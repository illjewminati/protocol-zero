{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Config } from '../common/config';\nimport { UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION } from '../common/constants';\nconst KNOWN_TOKENS_META_DATA = Config.getConfig().tokens;\nexport class KnownTokens {\n  constructor(knownTokensMetadata, networkID) {\n    _defineProperty(this, \"_tokens\", []);\n\n    _defineProperty(this, \"_networkID\", 5);\n\n    _defineProperty(this, \"getTokenBySymbol\", symbol => {\n      const symbolInLowerCaseScore = symbol.toLowerCase();\n\n      const token = this._tokens.find(t => t.symbol === symbolInLowerCaseScore);\n\n      if (!token) {\n        const errorMessage = `Token with symbol ${symbol} not found in known tokens`;\n        throw new Error(errorMessage);\n      }\n\n      return token;\n    });\n\n    _defineProperty(this, \"getTokenByAddress\", address => {\n      const addressInLowerCase = address.toLowerCase();\n\n      let token = this._tokens.find(t => t.address.toLowerCase() === addressInLowerCase);\n\n      if (!token) {\n        throw new Error(`Token with address ${address} not found in known tokens`);\n      }\n\n      return token;\n    });\n\n    _defineProperty(this, \"getTokens\", () => {\n      return this._tokens;\n    });\n\n    this._tokens = mapTokensMetaDataToTokenByNetworkId(knownTokensMetadata, networkID);\n  }\n\n}\nlet knownTokens;\nlet selectedNetworkId;\nexport const getKnownTokens = networkID => {\n  if (!knownTokens || !selectedNetworkId || networkID !== selectedNetworkId) {\n    knownTokens = new KnownTokens(KNOWN_TOKENS_META_DATA, networkID);\n  }\n\n  return knownTokens;\n};\n\nconst mapTokensMetaDataToTokenByNetworkId = (tokensMetaData, networkID) => {\n  const data = tokensMetaData.filter(tokenMetaData => tokenMetaData.addresses[networkID]).map(tokenMetaData => {\n    return {\n      address: tokenMetaData.addresses[networkID],\n      symbol: tokenMetaData.symbol,\n      decimals: tokenMetaData.decimals,\n      name: tokenMetaData.name,\n      primaryColor: tokenMetaData.primaryColor,\n      icon: tokenMetaData.icon,\n      displayDecimals: tokenMetaData.displayDecimals || UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION\n    };\n  });\n  return data;\n};","map":null,"metadata":{},"sourceType":"module"}