{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getType } from 'typesafe-actions';\nimport * as actions from '../actions';\nconst initialStepsModalState = {\n  doneSteps: [],\n  currentStep: null,\n  pendingSteps: []\n};\nconst initialState = {\n  stepsModal: initialStepsModalState\n};\nexport function stepsModal(state = initialStepsModalState, action) {\n  switch (action.type) {\n    case getType(actions.setStepsModalDoneSteps):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        doneSteps: action.payload\n      });\n\n    case getType(actions.setStepsModalPendingSteps):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pendingSteps: action.payload\n      });\n\n    case getType(actions.setStepsModalCurrentStep):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentStep: action.payload\n      });\n\n    case getType(actions.stepsModalAdvanceStep):\n      const {\n        doneSteps,\n        currentStep,\n        pendingSteps\n      } = state; // This first condition may happen in async scenarios\n\n      if (currentStep === null && pendingSteps.length === 0) {\n        return state;\n      } else if (pendingSteps.length === 0 && currentStep !== null) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          doneSteps: doneSteps.concat([currentStep]),\n          currentStep: null\n        });\n      } else {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          pendingSteps: pendingSteps.slice(1),\n          doneSteps: doneSteps.concat([currentStep]),\n          currentStep: pendingSteps[0]\n        });\n      }\n\n    case getType(actions.stepsModalReset):\n      return initialStepsModalState;\n\n    default:\n      return state;\n  }\n}\nexport default function uiReducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stepsModal: stepsModal(state.stepsModal, action)\n      });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}