"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IPermissions = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _contracts = require("@ethersproject/contracts");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var IPermissions = /*#__PURE__*/function (_Contract) {
  (0, _inherits2["default"])(IPermissions, _Contract);

  var _super = _createSuper(IPermissions);

  function IPermissions() {
    var _this;

    (0, _classCallCheck2["default"])(this, IPermissions);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "interface", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functions", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "callStatic", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filters", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "estimateGas", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "populateTransaction", void 0);
    return _this;
  }

  return IPermissions;
}(_contracts.Contract);

exports.IPermissions = IPermissions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9JUGVybWlzc2lvbnMuZC50cyJdLCJuYW1lcyI6WyJJUGVybWlzc2lvbnMiLCJDb250cmFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7OztJQXNIYUEsWTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQUFxQkMsbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCB7XG4gIGV0aGVycyxcbiAgRXZlbnRGaWx0ZXIsXG4gIFNpZ25lcixcbiAgQmlnTnVtYmVyLFxuICBCaWdOdW1iZXJpc2gsXG4gIFBvcHVsYXRlZFRyYW5zYWN0aW9uLFxufSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQge1xuICBDb250cmFjdCxcbiAgQ29udHJhY3RUcmFuc2FjdGlvbixcbiAgT3ZlcnJpZGVzLFxuICBDYWxsT3ZlcnJpZGVzLFxufSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29udHJhY3RzXCI7XG5pbXBvcnQgeyBCeXRlc0xpa2UgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IExpc3RlbmVyLCBQcm92aWRlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcnNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uRnJhZ21lbnQsIEV2ZW50RnJhZ21lbnQsIFJlc3VsdCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYmlcIjtcblxuaW50ZXJmYWNlIElQZXJtaXNzaW9uc0ludGVyZmFjZSBleHRlbmRzIGV0aGVycy51dGlscy5JbnRlcmZhY2Uge1xuICBmdW5jdGlvbnM6IHtcbiAgICBcInNldENvbXBhbmllc0NvbnRyYWN0KGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJzZXRQZXJtaXNzaW9uKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxib29sKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwic2V0UGVybWlzc2lvbnModWludDhbXSxhZGRyZXNzLGFkZHJlc3MsYm9vbClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInNldEJvb2xQZXJtaXNzaW9ucyhib29sWzE2XSxhZGRyZXNzLGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJnZXRQZXJtaXNzaW9uKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiZ2V0UGVybWlzc2lvbnMoYWRkcmVzcyxhZGRyZXNzKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiaXNTaWduZXJBcHByb3ZlZChhZGRyZXNzLGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJnZXRDb21wYW5pZXNDb250cmFjdCgpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gIH07XG5cbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic2V0Q29tcGFuaWVzQ29udHJhY3RcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmddXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic2V0UGVybWlzc2lvblwiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaCwgc3RyaW5nLCBzdHJpbmcsIGJvb2xlYW5dXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic2V0UGVybWlzc2lvbnNcIixcbiAgICB2YWx1ZXM6IFtCaWdOdW1iZXJpc2hbXSwgc3RyaW5nLCBzdHJpbmcsIGJvb2xlYW5dXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic2V0Qm9vbFBlcm1pc3Npb25zXCIsXG4gICAgdmFsdWVzOiBbXG4gICAgICBbXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW5cbiAgICAgIF0sXG4gICAgICBzdHJpbmcsXG4gICAgICBzdHJpbmdcbiAgICBdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0UGVybWlzc2lvblwiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaCwgc3RyaW5nLCBzdHJpbmcsIHN0cmluZ11cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRQZXJtaXNzaW9uc1wiLFxuICAgIHZhbHVlczogW3N0cmluZywgc3RyaW5nXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImlzU2lnbmVyQXBwcm92ZWRcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmcsIHN0cmluZ11cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRDb21wYW5pZXNDb250cmFjdFwiLFxuICAgIHZhbHVlcz86IHVuZGVmaW5lZFxuICApOiBzdHJpbmc7XG5cbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJzZXRDb21wYW5pZXNDb250cmFjdFwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic2V0UGVybWlzc2lvblwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic2V0UGVybWlzc2lvbnNcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInNldEJvb2xQZXJtaXNzaW9uc1wiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0UGVybWlzc2lvblwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0UGVybWlzc2lvbnNcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImlzU2lnbmVyQXBwcm92ZWRcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImdldENvbXBhbmllc0NvbnRyYWN0XCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcblxuICBldmVudHM6IHtcbiAgICBcIlNldENvbXBhbmllc0NvbnRyYWN0KGFkZHJlc3MpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJTZXRQZXJtaXNzaW9uKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxib29sKVwiOiBFdmVudEZyYWdtZW50O1xuICB9O1xuXG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiU2V0Q29tcGFuaWVzQ29udHJhY3RcIik6IEV2ZW50RnJhZ21lbnQ7XG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiU2V0UGVybWlzc2lvblwiKTogRXZlbnRGcmFnbWVudDtcbn1cblxuZXhwb3J0IGNsYXNzIElQZXJtaXNzaW9ucyBleHRlbmRzIENvbnRyYWN0IHtcbiAgY29ubmVjdChzaWduZXJPclByb3ZpZGVyOiBTaWduZXIgfCBQcm92aWRlciB8IHN0cmluZyk6IHRoaXM7XG4gIGF0dGFjaChhZGRyZXNzT3JOYW1lOiBzdHJpbmcpOiB0aGlzO1xuICBkZXBsb3llZCgpOiBQcm9taXNlPHRoaXM+O1xuXG4gIG9uKGV2ZW50OiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcbiAgb25jZShldmVudDogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXM7XG4gIGFkZExpc3RlbmVyKGV2ZW50TmFtZTogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXM7XG4gIHJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWU6IEV2ZW50RmlsdGVyIHwgc3RyaW5nKTogdGhpcztcbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lOiBhbnksIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXM7XG5cbiAgaW50ZXJmYWNlOiBJUGVybWlzc2lvbnNJbnRlcmZhY2U7XG5cbiAgZnVuY3Rpb25zOiB7XG4gICAgc2V0Q29tcGFuaWVzQ29udHJhY3QoXG4gICAgICBfY29tcGFuaWVzOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgXCJzZXRDb21wYW5pZXNDb250cmFjdChhZGRyZXNzKVwiKFxuICAgICAgX2NvbXBhbmllczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIHNldFBlcm1pc3Npb24oXG4gICAgICBfYWN0aW9uOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIF9hbGxvdzogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBcInNldFBlcm1pc3Npb24odWludDgsYWRkcmVzcyxhZGRyZXNzLGJvb2wpXCIoXG4gICAgICBfYWN0aW9uOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIF9hbGxvdzogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBzZXRQZXJtaXNzaW9ucyhcbiAgICAgIF9wZXJtaXNzaW9uczogQmlnTnVtYmVyaXNoW10sXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIF9hbGxvdzogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBcInNldFBlcm1pc3Npb25zKHVpbnQ4W10sYWRkcmVzcyxhZGRyZXNzLGJvb2wpXCIoXG4gICAgICBfcGVybWlzc2lvbnM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBfYWxsb3c6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgc2V0Qm9vbFBlcm1pc3Npb25zKFxuICAgICAgX3Blcm1pc3Npb25zOiBbXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW4sXG4gICAgICAgIGJvb2xlYW5cbiAgICAgIF0sXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBcInNldEJvb2xQZXJtaXNzaW9ucyhib29sWzE2XSxhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBfcGVybWlzc2lvbnM6IFtcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhblxuICAgICAgXSxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEdldHRlcnNcbiAgICAgKi9cbiAgICBnZXRQZXJtaXNzaW9uKFxuICAgICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBfc2lnbmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgLyoqXG4gICAgICogR2V0dGVyc1xuICAgICAqL1xuICAgIFwiZ2V0UGVybWlzc2lvbih1aW50OCxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIF9hY3Rpb246IEJpZ051bWJlcmlzaCxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX3NpZ25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5dPjtcblxuICAgIGdldFBlcm1pc3Npb25zKFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbltdXT47XG5cbiAgICBcImdldFBlcm1pc3Npb25zKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5bXV0+O1xuXG4gICAgaXNTaWduZXJBcHByb3ZlZChcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfc2lnbmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgXCJpc1NpZ25lckFwcHJvdmVkKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfc2lnbmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgZ2V0Q29tcGFuaWVzQ29udHJhY3Qob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgXCJnZXRDb21wYW5pZXNDb250cmFjdCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuICB9O1xuXG4gIHNldENvbXBhbmllc0NvbnRyYWN0KFxuICAgIF9jb21wYW5pZXM6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICBcInNldENvbXBhbmllc0NvbnRyYWN0KGFkZHJlc3MpXCIoXG4gICAgX2NvbXBhbmllczogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIHNldFBlcm1pc3Npb24oXG4gICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICBfYWxsb3c6IGJvb2xlYW4sXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgXCJzZXRQZXJtaXNzaW9uKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxib29sKVwiKFxuICAgIF9hY3Rpb246IEJpZ051bWJlcmlzaCxcbiAgICBfY29tcGFueTogc3RyaW5nLFxuICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgX2FsbG93OiBib29sZWFuLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIHNldFBlcm1pc3Npb25zKFxuICAgIF9wZXJtaXNzaW9uczogQmlnTnVtYmVyaXNoW10sXG4gICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgIF9hbGxvdzogYm9vbGVhbixcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICBcInNldFBlcm1pc3Npb25zKHVpbnQ4W10sYWRkcmVzcyxhZGRyZXNzLGJvb2wpXCIoXG4gICAgX3Blcm1pc3Npb25zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICBfY29tcGFueTogc3RyaW5nLFxuICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgX2FsbG93OiBib29sZWFuLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIHNldEJvb2xQZXJtaXNzaW9ucyhcbiAgICBfcGVybWlzc2lvbnM6IFtcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW5cbiAgICBdLFxuICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICBcInNldEJvb2xQZXJtaXNzaW9ucyhib29sWzE2XSxhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgX3Blcm1pc3Npb25zOiBbXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuLFxuICAgICAgYm9vbGVhbixcbiAgICAgIGJvb2xlYW4sXG4gICAgICBib29sZWFuXG4gICAgXSxcbiAgICBfY29tcGFueTogc3RyaW5nLFxuICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIEdldHRlcnNcbiAgICovXG4gIGdldFBlcm1pc3Npb24oXG4gICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICBfc2lnbmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBHZXR0ZXJzXG4gICAqL1xuICBcImdldFBlcm1pc3Npb24odWludDgsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICBfc2lnbmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIGdldFBlcm1pc3Npb25zKFxuICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Ym9vbGVhbltdPjtcblxuICBcImdldFBlcm1pc3Npb25zKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICBfY29tcGFueTogc3RyaW5nLFxuICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPGJvb2xlYW5bXT47XG5cbiAgaXNTaWduZXJBcHByb3ZlZChcbiAgICBfY29tcGFueTogc3RyaW5nLFxuICAgIF9zaWduZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgXCJpc1NpZ25lckFwcHJvdmVkKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICBfY29tcGFueTogc3RyaW5nLFxuICAgIF9zaWduZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgZ2V0Q29tcGFuaWVzQ29udHJhY3Qob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBcImdldENvbXBhbmllc0NvbnRyYWN0KClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIGNhbGxTdGF0aWM6IHtcbiAgICBzZXRDb21wYW5pZXNDb250cmFjdChcbiAgICAgIF9jb21wYW5pZXM6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgXCJzZXRDb21wYW5pZXNDb250cmFjdChhZGRyZXNzKVwiKFxuICAgICAgX2NvbXBhbmllczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICBzZXRQZXJtaXNzaW9uKFxuICAgICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBfYWxsb3c6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIFwic2V0UGVybWlzc2lvbih1aW50OCxhZGRyZXNzLGFkZHJlc3MsYm9vbClcIihcbiAgICAgIF9hY3Rpb246IEJpZ051bWJlcmlzaCxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX2FsbG93OiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICBzZXRQZXJtaXNzaW9ucyhcbiAgICAgIF9wZXJtaXNzaW9uczogQmlnTnVtYmVyaXNoW10sXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIF9hbGxvdzogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgXCJzZXRQZXJtaXNzaW9ucyh1aW50OFtdLGFkZHJlc3MsYWRkcmVzcyxib29sKVwiKFxuICAgICAgX3Blcm1pc3Npb25zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX2FsbG93OiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICBzZXRCb29sUGVybWlzc2lvbnMoXG4gICAgICBfcGVybWlzc2lvbnM6IFtcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhblxuICAgICAgXSxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICBcInNldEJvb2xQZXJtaXNzaW9ucyhib29sWzE2XSxhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBfcGVybWlzc2lvbnM6IFtcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhblxuICAgICAgXSxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXJzXG4gICAgICovXG4gICAgZ2V0UGVybWlzc2lvbihcbiAgICAgIF9hY3Rpb246IEJpZ051bWJlcmlzaCxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX3NpZ25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXJzXG4gICAgICovXG4gICAgXCJnZXRQZXJtaXNzaW9uKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBfc2lnbmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIGdldFBlcm1pc3Npb25zKFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuW10+O1xuXG4gICAgXCJnZXRQZXJtaXNzaW9ucyhhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW5bXT47XG5cbiAgICBpc1NpZ25lckFwcHJvdmVkKFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9zaWduZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgXCJpc1NpZ25lckFwcHJvdmVkKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfc2lnbmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIGdldENvbXBhbmllc0NvbnRyYWN0KG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBcImdldENvbXBhbmllc0NvbnRyYWN0KClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuICB9O1xuXG4gIGZpbHRlcnM6IHtcbiAgICBTZXRDb21wYW5pZXNDb250cmFjdChjb21wYW5pZXNDb250cmFjdDogc3RyaW5nIHwgbnVsbCk6IEV2ZW50RmlsdGVyO1xuXG4gICAgU2V0UGVybWlzc2lvbihcbiAgICAgIGFjdGlvbjogbnVsbCxcbiAgICAgIGNvbXBhbnk6IHN0cmluZyB8IG51bGwsXG4gICAgICBuZnRBZGRyZXNzOiBzdHJpbmcgfCBudWxsLFxuICAgICAgYWxsb3c6IG51bGxcbiAgICApOiBFdmVudEZpbHRlcjtcbiAgfTtcblxuICBlc3RpbWF0ZUdhczoge1xuICAgIHNldENvbXBhbmllc0NvbnRyYWN0KFxuICAgICAgX2NvbXBhbmllczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJzZXRDb21wYW5pZXNDb250cmFjdChhZGRyZXNzKVwiKFxuICAgICAgX2NvbXBhbmllczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgc2V0UGVybWlzc2lvbihcbiAgICAgIF9hY3Rpb246IEJpZ051bWJlcmlzaCxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX2FsbG93OiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJzZXRQZXJtaXNzaW9uKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxib29sKVwiKFxuICAgICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBfYWxsb3c6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBzZXRQZXJtaXNzaW9ucyhcbiAgICAgIF9wZXJtaXNzaW9uczogQmlnTnVtYmVyaXNoW10sXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIF9hbGxvdzogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwic2V0UGVybWlzc2lvbnModWludDhbXSxhZGRyZXNzLGFkZHJlc3MsYm9vbClcIihcbiAgICAgIF9wZXJtaXNzaW9uczogQmlnTnVtYmVyaXNoW10sXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIF9hbGxvdzogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIHNldEJvb2xQZXJtaXNzaW9ucyhcbiAgICAgIF9wZXJtaXNzaW9uczogW1xuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuLFxuICAgICAgICBib29sZWFuXG4gICAgICBdLFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcInNldEJvb2xQZXJtaXNzaW9ucyhib29sWzE2XSxhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBfcGVybWlzc2lvbnM6IFtcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhblxuICAgICAgXSxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogR2V0dGVyc1xuICAgICAqL1xuICAgIGdldFBlcm1pc3Npb24oXG4gICAgICBfYWN0aW9uOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIF9zaWduZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXJzXG4gICAgICovXG4gICAgXCJnZXRQZXJtaXNzaW9uKHVpbnQ4LGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBfc2lnbmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgZ2V0UGVybWlzc2lvbnMoXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImdldFBlcm1pc3Npb25zKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGlzU2lnbmVyQXBwcm92ZWQoXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX3NpZ25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiaXNTaWduZXJBcHByb3ZlZChhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX3NpZ25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGdldENvbXBhbmllc0NvbnRyYWN0KG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImdldENvbXBhbmllc0NvbnRyYWN0KClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuICB9O1xuXG4gIHBvcHVsYXRlVHJhbnNhY3Rpb246IHtcbiAgICBzZXRDb21wYW5pZXNDb250cmFjdChcbiAgICAgIF9jb21wYW5pZXM6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJzZXRDb21wYW5pZXNDb250cmFjdChhZGRyZXNzKVwiKFxuICAgICAgX2NvbXBhbmllczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBzZXRQZXJtaXNzaW9uKFxuICAgICAgX2FjdGlvbjogQmlnTnVtYmVyaXNoLFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBfYWxsb3c6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwic2V0UGVybWlzc2lvbih1aW50OCxhZGRyZXNzLGFkZHJlc3MsYm9vbClcIihcbiAgICAgIF9hY3Rpb246IEJpZ051bWJlcmlzaCxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX2FsbG93OiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBzZXRQZXJtaXNzaW9ucyhcbiAgICAgIF9wZXJtaXNzaW9uczogQmlnTnVtYmVyaXNoW10sXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIF9hbGxvdzogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJzZXRQZXJtaXNzaW9ucyh1aW50OFtdLGFkZHJlc3MsYWRkcmVzcyxib29sKVwiKFxuICAgICAgX3Blcm1pc3Npb25zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX2FsbG93OiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBzZXRCb29sUGVybWlzc2lvbnMoXG4gICAgICBfcGVybWlzc2lvbnM6IFtcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhblxuICAgICAgXSxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcInNldEJvb2xQZXJtaXNzaW9ucyhib29sWzE2XSxhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBfcGVybWlzc2lvbnM6IFtcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhbixcbiAgICAgICAgYm9vbGVhblxuICAgICAgXSxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXJzXG4gICAgICovXG4gICAgZ2V0UGVybWlzc2lvbihcbiAgICAgIF9hY3Rpb246IEJpZ051bWJlcmlzaCxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX3NpZ25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogR2V0dGVyc1xuICAgICAqL1xuICAgIFwiZ2V0UGVybWlzc2lvbih1aW50OCxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIF9hY3Rpb246IEJpZ051bWJlcmlzaCxcbiAgICAgIF9jb21wYW55OiBzdHJpbmcsXG4gICAgICBfbmZ0QWRkcmVzczogc3RyaW5nLFxuICAgICAgX3NpZ25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgZ2V0UGVybWlzc2lvbnMoXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX25mdEFkZHJlc3M6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiZ2V0UGVybWlzc2lvbnMoYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9uZnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBpc1NpZ25lckFwcHJvdmVkKFxuICAgICAgX2NvbXBhbnk6IHN0cmluZyxcbiAgICAgIF9zaWduZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiaXNTaWduZXJBcHByb3ZlZChhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBfY29tcGFueTogc3RyaW5nLFxuICAgICAgX3NpZ25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgZ2V0Q29tcGFuaWVzQ29udHJhY3QoXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcImdldENvbXBhbmllc0NvbnRyYWN0KClcIihcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcbiAgfTtcbn1cbiJdfQ==