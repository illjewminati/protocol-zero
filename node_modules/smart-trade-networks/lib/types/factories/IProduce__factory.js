"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IProduce__factory = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ethers = require("ethers");

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
var IProduce__factory = /*#__PURE__*/function () {
  function IProduce__factory() {
    (0, _classCallCheck2["default"])(this, IProduce__factory);
  }

  (0, _createClass2["default"])(IProduce__factory, null, [{
    key: "connect",
    value: function connect(address, signerOrProvider) {
      return new _ethers.Contract(address, _abi, signerOrProvider);
    }
  }]);
  return IProduce__factory;
}();

exports.IProduce__factory = IProduce__factory;
var _abi = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "companyAddress",
    type: "address"
  }, {
    indexed: true,
    internalType: "address",
    name: "stn721Address",
    type: "address"
  }, {
    indexed: false,
    internalType: "bytes32",
    name: "dbId",
    type: "bytes32"
  }, {
    indexed: false,
    internalType: "uint256",
    name: "numOfTokens",
    type: "uint256"
  }],
  name: "ProductionEvent",
  type: "event"
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "permissionsContract",
    type: "address"
  }],
  name: "SetPermissionsContract",
  type: "event"
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "stn721ManagerContract",
    type: "address"
  }],
  name: "SetSTN721ManagerContract",
  type: "event"
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "companyAddress",
    type: "address"
  }, {
    indexed: false,
    internalType: "uint256",
    name: "entry",
    type: "uint256"
  }],
  name: "ValidationEvent",
  type: "event"
}, {
  inputs: [{
    internalType: "address",
    name: "_permissions",
    type: "address"
  }],
  name: "setPermissionsContract",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_stn721Manager",
    type: "address"
  }],
  name: "setSTN721ManagerContract",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256[]",
    name: "_tokenIds",
    type: "uint256[]"
  }, {
    internalType: "bool",
    name: "_divisible",
    type: "bool"
  }, {
    internalType: "address",
    name: "_stn721Address",
    type: "address"
  }, {
    internalType: "address",
    name: "_companyAddress",
    type: "address"
  }, {
    internalType: "address[]",
    name: "_involvedCompanies",
    type: "address[]"
  }, {
    internalType: "bytes32",
    name: "_dbId",
    type: "bytes32"
  }],
  name: "produce",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256[]",
    name: "_tokenIds",
    type: "uint256[]"
  }, {
    internalType: "bool",
    name: "_divisible",
    type: "bool"
  }, {
    internalType: "address",
    name: "_stn721Address",
    type: "address"
  }, {
    internalType: "address",
    name: "_companyAddress",
    type: "address"
  }, {
    internalType: "address[]",
    name: "_involvedCompanies",
    type: "address[]"
  }, {
    internalType: "bytes32",
    name: "_dbId",
    type: "bytes32"
  }],
  name: "produceChild",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_companyAddress",
    type: "address"
  }, {
    internalType: "address",
    name: "_stn721Parent",
    type: "address"
  }, {
    internalType: "uint256",
    name: "_tokenId",
    type: "uint256"
  }, {
    internalType: "string",
    name: "_name",
    type: "string"
  }, {
    internalType: "string",
    name: "_symbol",
    type: "string"
  }],
  name: "createSTN721Child",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "_entry",
    type: "uint256"
  }, {
    internalType: "address",
    name: "_companyAddress",
    type: "address"
  }],
  name: "validateEntry",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_company",
    type: "address"
  }],
  name: "getEntriesByCompany",
  outputs: [{
    internalType: "uint256[]",
    name: "",
    type: "uint256[]"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_user",
    type: "address"
  }],
  name: "getEntriesByUser",
  outputs: [{
    internalType: "uint256[]",
    name: "",
    type: "uint256[]"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "_pos",
    type: "uint256"
  }],
  name: "getEntryData",
  outputs: [{
    components: [{
      internalType: "address",
      name: "company",
      type: "address"
    }, {
      internalType: "address",
      name: "signatorie",
      type: "address"
    }, {
      internalType: "address",
      name: "stn721Address",
      type: "address"
    }, {
      internalType: "uint256[]",
      name: "tokenIds",
      type: "uint256[]"
    }, {
      internalType: "uint256",
      name: "timestamp",
      type: "uint256"
    }, {
      internalType: "address[]",
      name: "involvedCompanies",
      type: "address[]"
    }, {
      internalType: "bytes32",
      name: "dbId",
      type: "bytes32"
    }],
    internalType: "struct IProduce.ProduceData",
    name: "",
    type: "tuple"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "_entry",
    type: "uint256"
  }],
  name: "getNumOfValidations",
  outputs: [{
    internalType: "uint256",
    name: "",
    type: "uint256"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "_entry",
    type: "uint256"
  }, {
    internalType: "uint256",
    name: "_pos",
    type: "uint256"
  }],
  name: "getValidation",
  outputs: [{
    components: [{
      internalType: "address",
      name: "company",
      type: "address"
    }, {
      internalType: "address",
      name: "signatorie",
      type: "address"
    }, {
      internalType: "uint256",
      name: "timestamp",
      type: "uint256"
    }],
    internalType: "struct IProduce.Validation",
    name: "",
    type: "tuple"
  }],
  stateMutability: "view",
  type: "function"
}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,