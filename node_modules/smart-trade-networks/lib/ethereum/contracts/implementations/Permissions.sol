// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "../interfaces/IPermissions.sol";
import "./companies/CompaniesFactory.sol";

contract Permissions is IPermissions, Ownable {

    uint8 public constant PRODUCE = 0;
    uint8 public constant CONSUME = 1;
    uint8 public constant USE = 2;
    uint8 public constant CITE = 3;
    uint8 public constant WORK = 4;
    uint8 public constant PICK_UP = 5;
    uint8 public constant DROP_OFF = 6; 
    uint8 public constant ACCEPT = 7; 
    uint8 public constant MODIFY = 8;
    uint8 public constant DELIVER_SERVICE = 9;
    uint8 public constant TRANSFER_CUSTODY = 10;
    uint8 public constant TRANSFER_ALL_RIGHTS = 11;
    uint8 public constant TRANSFER = 12;
    uint8 public constant MOVE = 13;
    uint8 public constant RAISE = 14;
    uint8 public constant LOWER = 15;


    //companyAddress -> (erc721Address => (actionId -> permission))
    mapping(address => mapping(address => mapping(uint256 => bool))) permissions;
    //santiagoCo => stnCowsContract  => produceId => true
    //santiagoCo => stnCowsContract => measureId => true
    //(companyAddress => contractAddress => actionId => allowed)

    CompaniesFactory companies;

    constructor (address _multisigWallet, address _companies) {
        require(_multisigWallet != address(0), "Multisig address cannot be 0");
        require(_companies != address(0), "CompaniesFactory address cannot be 0");
        companies = CompaniesFactory(_companies);
        transferOwnership(_multisigWallet);
    }

    /** Setters */

    function setCompaniesContract(address _companies) virtual override external onlyOwner {
        require(_companies != address(0), "companies address cannot be 0");
        companies = CompaniesFactory(_companies);
        emit SetCompaniesContract(_companies); 
    }

    function setPermission(uint8 _action, address _company, address _nftAddress, bool _allow) virtual override external onlyOwner {
        require(_company != address(0), "company address cannot be 0"); 
        permissions[_company][_nftAddress][uint8(_action)] = _allow;
        emit SetPermission(_action, _company, _nftAddress, _allow); 
    }

    function setPermissions(uint8[] memory _permissions, address _company, address _nftAddress, bool _allow) virtual override external onlyOwner {
        require(_company != address(0), "company address cannot be 0");
        for(uint8 i = 0; i < _permissions.length; i++) {
             permissions[_company][_nftAddress][_permissions[i]] = _allow;
             emit SetPermission(_permissions[i], _company, _nftAddress, _allow); 
        }
    }

    function setBoolPermissions(bool[16] memory _permissions, address _company, address _nftAddress) virtual override external onlyOwner {
        require(_company != address(0), "company address cannot be 0");
        for(uint8 i = 0; i < _permissions.length; i++) {
             permissions[_company][_nftAddress][i] = _permissions[i];
             emit SetPermission(i, _company, _nftAddress, _permissions[i]); 
        } 
    }

    /** Getters */
    function getPermission(uint8 _action, address _company, address _nftAddress, address _signer) virtual override external view returns (bool) {
        return permissions[_company][_nftAddress][uint8(_action)] && companies.isCompanyApproved(_company) && companies.isSignerApproved(_company, _signer); 
    }

    function getPermissions(address _company, address _nftAddress) virtual override external view returns(bool[] memory) {
        bool[] memory companyPermissions = new bool[](16);
        for(uint8 j = 0; j < 16; j++) {
            companyPermissions[j] = permissions[_company][_nftAddress][j];
        }
        return companyPermissions;
    }

    function isSignerApproved(address _company, address _signer) virtual override external view returns (bool) {
        return companies.isSignerApproved(_company, _signer);
    } 


    function getCompaniesContract() virtual override external view returns(address) {
        return address(companies);
    }

    
}