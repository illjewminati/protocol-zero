"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STN721Manager = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _contracts = require("@ethersproject/contracts");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var STN721Manager = /*#__PURE__*/function (_Contract) {
  (0, _inherits2["default"])(STN721Manager, _Contract);

  var _super = _createSuper(STN721Manager);

  function STN721Manager() {
    var _this;

    (0, _classCallCheck2["default"])(this, STN721Manager);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "interface", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functions", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "callStatic", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filters", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "estimateGas", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "populateTransaction", void 0);
    return _this;
  }

  return STN721Manager;
}(_contracts.Contract);

exports.STN721Manager = STN721Manager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9TVE43MjFNYW5hZ2VyLmQudHMiXSwibmFtZXMiOlsiU1RONzIxTWFuYWdlciIsIkNvbnRyYWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7O0lBNkdhQSxhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBQXNCQyxtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IHtcbiAgZXRoZXJzLFxuICBFdmVudEZpbHRlcixcbiAgU2lnbmVyLFxuICBCaWdOdW1iZXIsXG4gIEJpZ051bWJlcmlzaCxcbiAgUG9wdWxhdGVkVHJhbnNhY3Rpb24sXG59IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7XG4gIENvbnRyYWN0LFxuICBDb250cmFjdFRyYW5zYWN0aW9uLFxuICBPdmVycmlkZXMsXG4gIENhbGxPdmVycmlkZXMsXG59IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb250cmFjdHNcIjtcbmltcG9ydCB7IEJ5dGVzTGlrZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgTGlzdGVuZXIsIFByb3ZpZGVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3ZpZGVyc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25GcmFnbWVudCwgRXZlbnRGcmFnbWVudCwgUmVzdWx0IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FiaVwiO1xuXG5pbnRlcmZhY2UgU1RONzIxTWFuYWdlckludGVyZmFjZSBleHRlbmRzIGV0aGVycy51dGlscy5JbnRlcmZhY2Uge1xuICBmdW5jdGlvbnM6IHtcbiAgICBcIm93bmVyKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInJlbm91bmNlT3duZXJzaGlwKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJhZGRDb250cm9sbGVyKGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJyZW1vdmVDb250cm9sbGVyKGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJjcmVhdGVQYXJlbnRTVE43MjEoc3RyaW5nLHN0cmluZylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImNyZWF0ZUNoaWxkU1RONzIxKGFkZHJlc3MsdWludDI1NixzdHJpbmcsc3RyaW5nKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwibWludChhZGRyZXNzLGJvb2wsdWludDI1NltdLGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJtaW50Q2hpbGQoYWRkcmVzcyxib29sLHVpbnQyNTZbXSlcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImdldENoaWxkKGFkZHJlc3MsdWludDI1NilcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImdldEFsbCgpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gIH07XG5cbiAgZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQ6IFwib3duZXJcIiwgdmFsdWVzPzogdW5kZWZpbmVkKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJyZW5vdW5jZU93bmVyc2hpcFwiLFxuICAgIHZhbHVlcz86IHVuZGVmaW5lZFxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInRyYW5zZmVyT3duZXJzaGlwXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImFkZENvbnRyb2xsZXJcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmddXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwicmVtb3ZlQ29udHJvbGxlclwiLFxuICAgIHZhbHVlczogW3N0cmluZ11cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJjcmVhdGVQYXJlbnRTVE43MjFcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmcsIHN0cmluZ11cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJjcmVhdGVDaGlsZFNUTjcyMVwiLFxuICAgIHZhbHVlczogW3N0cmluZywgQmlnTnVtYmVyaXNoLCBzdHJpbmcsIHN0cmluZ11cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJtaW50XCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBib29sZWFuLCBCaWdOdW1iZXJpc2hbXSwgc3RyaW5nXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcIm1pbnRDaGlsZFwiLFxuICAgIHZhbHVlczogW3N0cmluZywgYm9vbGVhbiwgQmlnTnVtYmVyaXNoW11dXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0Q2hpbGRcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmcsIEJpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoZnVuY3Rpb25GcmFnbWVudDogXCJnZXRBbGxcIiwgdmFsdWVzPzogdW5kZWZpbmVkKTogc3RyaW5nO1xuXG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwib3duZXJcIiwgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInJlbm91bmNlT3duZXJzaGlwXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0cmFuc2Zlck93bmVyc2hpcFwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiYWRkQ29udHJvbGxlclwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwicmVtb3ZlQ29udHJvbGxlclwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiY3JlYXRlUGFyZW50U1RONzIxXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJjcmVhdGVDaGlsZFNUTjcyMVwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwibWludFwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwibWludENoaWxkXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJnZXRDaGlsZFwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0QWxsXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcblxuICBldmVudHM6IHtcbiAgICBcIkFkZENvbnRyb2xsZXIoYWRkcmVzcylcIjogRXZlbnRGcmFnbWVudDtcbiAgICBcIkNyZWF0ZVNUTjcyMUNoaWxkKGFkZHJlc3MsdWludDI1NixzdHJpbmcsc3RyaW5nKVwiOiBFdmVudEZyYWdtZW50O1xuICAgIFwiQ3JlYXRlU1RONzIxUGFyZW50KHN0cmluZyxzdHJpbmcpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzLGFkZHJlc3MpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJSZW1vdmVDb250cm9sbGVyKGFkZHJlc3MpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gIH07XG5cbiAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogXCJBZGRDb250cm9sbGVyXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIkNyZWF0ZVNUTjcyMUNoaWxkXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIkNyZWF0ZVNUTjcyMVBhcmVudFwiKTogRXZlbnRGcmFnbWVudDtcbiAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogXCJPd25lcnNoaXBUcmFuc2ZlcnJlZFwiKTogRXZlbnRGcmFnbWVudDtcbiAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogXCJSZW1vdmVDb250cm9sbGVyXCIpOiBFdmVudEZyYWdtZW50O1xufVxuXG5leHBvcnQgY2xhc3MgU1RONzIxTWFuYWdlciBleHRlbmRzIENvbnRyYWN0IHtcbiAgY29ubmVjdChzaWduZXJPclByb3ZpZGVyOiBTaWduZXIgfCBQcm92aWRlciB8IHN0cmluZyk6IHRoaXM7XG4gIGF0dGFjaChhZGRyZXNzT3JOYW1lOiBzdHJpbmcpOiB0aGlzO1xuICBkZXBsb3llZCgpOiBQcm9taXNlPHRoaXM+O1xuXG4gIG9uKGV2ZW50OiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcbiAgb25jZShldmVudDogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXM7XG4gIGFkZExpc3RlbmVyKGV2ZW50TmFtZTogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXM7XG4gIHJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWU6IEV2ZW50RmlsdGVyIHwgc3RyaW5nKTogdGhpcztcbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lOiBhbnksIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXM7XG5cbiAgaW50ZXJmYWNlOiBTVE43MjFNYW5hZ2VySW50ZXJmYWNlO1xuXG4gIGZ1bmN0aW9uczoge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgb3duZXIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcIm93bmVyKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgb3duZXIuIEl0IHdpbGwgbm90IGJlIHBvc3NpYmxlIHRvIGNhbGwgYG9ubHlPd25lcmAgZnVuY3Rpb25zIGFueW1vcmUuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4gTk9URTogUmVub3VuY2luZyBvd25lcnNoaXAgd2lsbCBsZWF2ZSB0aGUgY29udHJhY3Qgd2l0aG91dCBhbiBvd25lciwgdGhlcmVieSByZW1vdmluZyBhbnkgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIHRvIHRoZSBvd25lci5cbiAgICAgKi9cbiAgICByZW5vdW5jZU93bmVyc2hpcChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgXCJyZW5vdW5jZU93bmVyc2hpcCgpXCIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgdHJhbnNmZXJPd25lcnNoaXAoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgXCJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBhZGRDb250cm9sbGVyKFxuICAgICAgX25ld0NvbnRyb2xsZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBcImFkZENvbnRyb2xsZXIoYWRkcmVzcylcIihcbiAgICAgIF9uZXdDb250cm9sbGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgcmVtb3ZlQ29udHJvbGxlcihcbiAgICAgIF9jb250cm9sbGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgXCJyZW1vdmVDb250cm9sbGVyKGFkZHJlc3MpXCIoXG4gICAgICBfY29udHJvbGxlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIGNyZWF0ZVBhcmVudFNUTjcyMShcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHN5bWJvbDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIFwiY3JlYXRlUGFyZW50U1RONzIxKHN0cmluZyxzdHJpbmcpXCIoXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICBzeW1ib2w6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBjcmVhdGVDaGlsZFNUTjcyMShcbiAgICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgc3ltYm9sOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgXCJjcmVhdGVDaGlsZFNUTjcyMShhZGRyZXNzLHVpbnQyNTYsc3RyaW5nLHN0cmluZylcIihcbiAgICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgc3ltYm9sOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICoganVzdCBmb3IgU1RONzIxIHdoaWNoIGRvZXNudCBoYXZlIHBhcmVudFxuICAgICAqL1xuICAgIG1pbnQoXG4gICAgICBfc3RuNzIxOiBzdHJpbmcsXG4gICAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIGp1c3QgZm9yIFNUTjcyMSB3aGljaCBkb2VzbnQgaGF2ZSBwYXJlbnRcbiAgICAgKi9cbiAgICBcIm1pbnQoYWRkcmVzcyxib29sLHVpbnQyNTZbXSxhZGRyZXNzKVwiKFxuICAgICAgX3N0bjcyMTogc3RyaW5nLFxuICAgICAgZGl2aXNpYmxlOiBib29sZWFuLFxuICAgICAgdG9rZW5JZHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBqdXN0IGZvciBTVE43MjEgd2hpY2ggaGFzIHBhcmVudCwgdG9rZW5zIHNob3VsZCBnbyB0byB0aGUgb3duZXIgb2YgdGhlIHBhcmVudCB0b2tlblxuICAgICAqL1xuICAgIG1pbnRDaGlsZChcbiAgICAgIHN0bjcyMUNoaWxkOiBzdHJpbmcsXG4gICAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICoganVzdCBmb3IgU1RONzIxIHdoaWNoIGhhcyBwYXJlbnQsIHRva2VucyBzaG91bGQgZ28gdG8gdGhlIG93bmVyIG9mIHRoZSBwYXJlbnQgdG9rZW5cbiAgICAgKi9cbiAgICBcIm1pbnRDaGlsZChhZGRyZXNzLGJvb2wsdWludDI1NltdKVwiKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBnZXRDaGlsZChcbiAgICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgXCJnZXRDaGlsZChhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICBzdG43MjFQYXJlbnQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIGdldEFsbChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nW11dPjtcblxuICAgIFwiZ2V0QWxsKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nW11dPjtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICovXG4gIG93bmVyKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAqL1xuICBcIm93bmVyKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBMZWF2ZXMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgb3duZXIuIEl0IHdpbGwgbm90IGJlIHBvc3NpYmxlIHRvIGNhbGwgYG9ubHlPd25lcmAgZnVuY3Rpb25zIGFueW1vcmUuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4gTk9URTogUmVub3VuY2luZyBvd25lcnNoaXAgd2lsbCBsZWF2ZSB0aGUgY29udHJhY3Qgd2l0aG91dCBhbiBvd25lciwgdGhlcmVieSByZW1vdmluZyBhbnkgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIHRvIHRoZSBvd25lci5cbiAgICovXG4gIHJlbm91bmNlT3duZXJzaGlwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgKi9cbiAgXCJyZW5vdW5jZU93bmVyc2hpcCgpXCIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci5cbiAgICovXG4gIHRyYW5zZmVyT3duZXJzaGlwKFxuICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAqL1xuICBcInRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MpXCIoXG4gICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICBhZGRDb250cm9sbGVyKFxuICAgIF9uZXdDb250cm9sbGVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgXCJhZGRDb250cm9sbGVyKGFkZHJlc3MpXCIoXG4gICAgX25ld0NvbnRyb2xsZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICByZW1vdmVDb250cm9sbGVyKFxuICAgIF9jb250cm9sbGVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgXCJyZW1vdmVDb250cm9sbGVyKGFkZHJlc3MpXCIoXG4gICAgX2NvbnRyb2xsZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICBjcmVhdGVQYXJlbnRTVE43MjEoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHN5bWJvbDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIFwiY3JlYXRlUGFyZW50U1RONzIxKHN0cmluZyxzdHJpbmcpXCIoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHN5bWJvbDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIGNyZWF0ZUNoaWxkU1RONzIxKFxuICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgc3ltYm9sOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgXCJjcmVhdGVDaGlsZFNUTjcyMShhZGRyZXNzLHVpbnQyNTYsc3RyaW5nLHN0cmluZylcIihcbiAgICBzdG43MjFQYXJlbnQ6IHN0cmluZyxcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHN5bWJvbDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBqdXN0IGZvciBTVE43MjEgd2hpY2ggZG9lc250IGhhdmUgcGFyZW50XG4gICAqL1xuICBtaW50KFxuICAgIF9zdG43MjE6IHN0cmluZyxcbiAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgdG9rZW5JZHM6IEJpZ051bWJlcmlzaFtdLFxuICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIGp1c3QgZm9yIFNUTjcyMSB3aGljaCBkb2VzbnQgaGF2ZSBwYXJlbnRcbiAgICovXG4gIFwibWludChhZGRyZXNzLGJvb2wsdWludDI1NltdLGFkZHJlc3MpXCIoXG4gICAgX3N0bjcyMTogc3RyaW5nLFxuICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICoganVzdCBmb3IgU1RONzIxIHdoaWNoIGhhcyBwYXJlbnQsIHRva2VucyBzaG91bGQgZ28gdG8gdGhlIG93bmVyIG9mIHRoZSBwYXJlbnQgdG9rZW5cbiAgICovXG4gIG1pbnRDaGlsZChcbiAgICBzdG43MjFDaGlsZDogc3RyaW5nLFxuICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIGp1c3QgZm9yIFNUTjcyMSB3aGljaCBoYXMgcGFyZW50LCB0b2tlbnMgc2hvdWxkIGdvIHRvIHRoZSBvd25lciBvZiB0aGUgcGFyZW50IHRva2VuXG4gICAqL1xuICBcIm1pbnRDaGlsZChhZGRyZXNzLGJvb2wsdWludDI1NltdKVwiKFxuICAgIHN0bjcyMUNoaWxkOiBzdHJpbmcsXG4gICAgZGl2aXNpYmxlOiBib29sZWFuLFxuICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICBnZXRDaGlsZChcbiAgICBzdG43MjFQYXJlbnQ6IHN0cmluZyxcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgXCJnZXRDaGlsZChhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgc3RuNzIxUGFyZW50OiBzdHJpbmcsXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIGdldEFsbChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgXCJnZXRBbGwoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICBjYWxsU3RhdGljOiB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBvd25lcihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcIm93bmVyKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgcmVub3VuY2VPd25lcnNoaXAob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgb3duZXIuIEl0IHdpbGwgbm90IGJlIHBvc3NpYmxlIHRvIGNhbGwgYG9ubHlPd25lcmAgZnVuY3Rpb25zIGFueW1vcmUuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4gTk9URTogUmVub3VuY2luZyBvd25lcnNoaXAgd2lsbCBsZWF2ZSB0aGUgY29udHJhY3Qgd2l0aG91dCBhbiBvd25lciwgdGhlcmVieSByZW1vdmluZyBhbnkgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIHRvIHRoZSBvd25lci5cbiAgICAgKi9cbiAgICBcInJlbm91bmNlT3duZXJzaGlwKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgdHJhbnNmZXJPd25lcnNoaXAoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcylcIihcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIGFkZENvbnRyb2xsZXIoXG4gICAgICBfbmV3Q29udHJvbGxlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICBcImFkZENvbnRyb2xsZXIoYWRkcmVzcylcIihcbiAgICAgIF9uZXdDb250cm9sbGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIHJlbW92ZUNvbnRyb2xsZXIoXG4gICAgICBfY29udHJvbGxlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICBcInJlbW92ZUNvbnRyb2xsZXIoYWRkcmVzcylcIihcbiAgICAgIF9jb250cm9sbGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIGNyZWF0ZVBhcmVudFNUTjcyMShcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHN5bWJvbDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIFwiY3JlYXRlUGFyZW50U1RONzIxKHN0cmluZyxzdHJpbmcpXCIoXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICBzeW1ib2w6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBjcmVhdGVDaGlsZFNUTjcyMShcbiAgICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgc3ltYm9sOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgXCJjcmVhdGVDaGlsZFNUTjcyMShhZGRyZXNzLHVpbnQyNTYsc3RyaW5nLHN0cmluZylcIihcbiAgICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgc3ltYm9sOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICoganVzdCBmb3IgU1RONzIxIHdoaWNoIGRvZXNudCBoYXZlIHBhcmVudFxuICAgICAqL1xuICAgIG1pbnQoXG4gICAgICBfc3RuNzIxOiBzdHJpbmcsXG4gICAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBqdXN0IGZvciBTVE43MjEgd2hpY2ggZG9lc250IGhhdmUgcGFyZW50XG4gICAgICovXG4gICAgXCJtaW50KGFkZHJlc3MsYm9vbCx1aW50MjU2W10sYWRkcmVzcylcIihcbiAgICAgIF9zdG43MjE6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIGp1c3QgZm9yIFNUTjcyMSB3aGljaCBoYXMgcGFyZW50LCB0b2tlbnMgc2hvdWxkIGdvIHRvIHRoZSBvd25lciBvZiB0aGUgcGFyZW50IHRva2VuXG4gICAgICovXG4gICAgbWludENoaWxkKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICoganVzdCBmb3IgU1RONzIxIHdoaWNoIGhhcyBwYXJlbnQsIHRva2VucyBzaG91bGQgZ28gdG8gdGhlIG93bmVyIG9mIHRoZSBwYXJlbnQgdG9rZW5cbiAgICAgKi9cbiAgICBcIm1pbnRDaGlsZChhZGRyZXNzLGJvb2wsdWludDI1NltdKVwiKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgZ2V0Q2hpbGQoXG4gICAgICBzdG43MjFQYXJlbnQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBcImdldENoaWxkKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIGdldEFsbChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgICBcImdldEFsbCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nW10+O1xuICB9O1xuXG4gIGZpbHRlcnM6IHtcbiAgICBBZGRDb250cm9sbGVyKG5ld0NvbnRyb2xsZXI6IHN0cmluZyB8IG51bGwpOiBFdmVudEZpbHRlcjtcblxuICAgIENyZWF0ZVNUTjcyMUNoaWxkKFxuICAgICAgc3RuNzIxUGFyZW50OiBzdHJpbmcgfCBudWxsLFxuICAgICAgdG9rZW5JZDogbnVsbCxcbiAgICAgIG5hbWU6IG51bGwsXG4gICAgICBzeW1ib2w6IG51bGxcbiAgICApOiBFdmVudEZpbHRlcjtcblxuICAgIENyZWF0ZVNUTjcyMVBhcmVudChuYW1lOiBudWxsLCBzeW1ib2w6IG51bGwpOiBFdmVudEZpbHRlcjtcblxuICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKFxuICAgICAgcHJldmlvdXNPd25lcjogc3RyaW5nIHwgbnVsbCxcbiAgICAgIG5ld093bmVyOiBzdHJpbmcgfCBudWxsXG4gICAgKTogRXZlbnRGaWx0ZXI7XG5cbiAgICBSZW1vdmVDb250cm9sbGVyKGNvbnRyb2xsZXI6IHN0cmluZyB8IG51bGwpOiBFdmVudEZpbHRlcjtcbiAgfTtcblxuICBlc3RpbWF0ZUdhczoge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgb3duZXIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgXCJvd25lcigpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgICAqL1xuICAgIHJlbm91bmNlT3duZXJzaGlwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgICAqL1xuICAgIFwicmVub3VuY2VPd25lcnNoaXAoKVwiKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgdHJhbnNmZXJPd25lcnNoaXAoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MpXCIoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgYWRkQ29udHJvbGxlcihcbiAgICAgIF9uZXdDb250cm9sbGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImFkZENvbnRyb2xsZXIoYWRkcmVzcylcIihcbiAgICAgIF9uZXdDb250cm9sbGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICByZW1vdmVDb250cm9sbGVyKFxuICAgICAgX2NvbnRyb2xsZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwicmVtb3ZlQ29udHJvbGxlcihhZGRyZXNzKVwiKFxuICAgICAgX2NvbnRyb2xsZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGNyZWF0ZVBhcmVudFNUTjcyMShcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHN5bWJvbDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJjcmVhdGVQYXJlbnRTVE43MjEoc3RyaW5nLHN0cmluZylcIihcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHN5bWJvbDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgY3JlYXRlQ2hpbGRTVE43MjEoXG4gICAgICBzdG43MjFQYXJlbnQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHN5bWJvbDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJjcmVhdGVDaGlsZFNUTjcyMShhZGRyZXNzLHVpbnQyNTYsc3RyaW5nLHN0cmluZylcIihcbiAgICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgc3ltYm9sOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBqdXN0IGZvciBTVE43MjEgd2hpY2ggZG9lc250IGhhdmUgcGFyZW50XG4gICAgICovXG4gICAgbWludChcbiAgICAgIF9zdG43MjE6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBqdXN0IGZvciBTVE43MjEgd2hpY2ggZG9lc250IGhhdmUgcGFyZW50XG4gICAgICovXG4gICAgXCJtaW50KGFkZHJlc3MsYm9vbCx1aW50MjU2W10sYWRkcmVzcylcIihcbiAgICAgIF9zdG43MjE6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBqdXN0IGZvciBTVE43MjEgd2hpY2ggaGFzIHBhcmVudCwgdG9rZW5zIHNob3VsZCBnbyB0byB0aGUgb3duZXIgb2YgdGhlIHBhcmVudCB0b2tlblxuICAgICAqL1xuICAgIG1pbnRDaGlsZChcbiAgICAgIHN0bjcyMUNoaWxkOiBzdHJpbmcsXG4gICAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBqdXN0IGZvciBTVE43MjEgd2hpY2ggaGFzIHBhcmVudCwgdG9rZW5zIHNob3VsZCBnbyB0byB0aGUgb3duZXIgb2YgdGhlIHBhcmVudCB0b2tlblxuICAgICAqL1xuICAgIFwibWludENoaWxkKGFkZHJlc3MsYm9vbCx1aW50MjU2W10pXCIoXG4gICAgICBzdG43MjFDaGlsZDogc3RyaW5nLFxuICAgICAgZGl2aXNpYmxlOiBib29sZWFuLFxuICAgICAgdG9rZW5JZHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgZ2V0Q2hpbGQoXG4gICAgICBzdG43MjFQYXJlbnQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImdldENoaWxkKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHN0bjcyMVBhcmVudDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGdldEFsbChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJnZXRBbGwoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG4gIH07XG5cbiAgcG9wdWxhdGVUcmFuc2FjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgb3duZXIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcIm93bmVyKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgb3duZXIuIEl0IHdpbGwgbm90IGJlIHBvc3NpYmxlIHRvIGNhbGwgYG9ubHlPd25lcmAgZnVuY3Rpb25zIGFueW1vcmUuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4gTk9URTogUmVub3VuY2luZyBvd25lcnNoaXAgd2lsbCBsZWF2ZSB0aGUgY29udHJhY3Qgd2l0aG91dCBhbiBvd25lciwgdGhlcmVieSByZW1vdmluZyBhbnkgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIHRvIHRoZSBvd25lci5cbiAgICAgKi9cbiAgICByZW5vdW5jZU93bmVyc2hpcChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgICAqL1xuICAgIFwicmVub3VuY2VPd25lcnNoaXAoKVwiKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICB0cmFuc2Zlck93bmVyc2hpcChcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgXCJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgYWRkQ29udHJvbGxlcihcbiAgICAgIF9uZXdDb250cm9sbGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiYWRkQ29udHJvbGxlcihhZGRyZXNzKVwiKFxuICAgICAgX25ld0NvbnRyb2xsZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgcmVtb3ZlQ29udHJvbGxlcihcbiAgICAgIF9jb250cm9sbGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwicmVtb3ZlQ29udHJvbGxlcihhZGRyZXNzKVwiKFxuICAgICAgX2NvbnRyb2xsZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgY3JlYXRlUGFyZW50U1RONzIxKFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgc3ltYm9sOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiY3JlYXRlUGFyZW50U1RONzIxKHN0cmluZyxzdHJpbmcpXCIoXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICBzeW1ib2w6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgY3JlYXRlQ2hpbGRTVE43MjEoXG4gICAgICBzdG43MjFQYXJlbnQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHN5bWJvbDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcImNyZWF0ZUNoaWxkU1RONzIxKGFkZHJlc3MsdWludDI1NixzdHJpbmcsc3RyaW5nKVwiKFxuICAgICAgc3RuNzIxUGFyZW50OiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICBzeW1ib2w6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICoganVzdCBmb3IgU1RONzIxIHdoaWNoIGRvZXNudCBoYXZlIHBhcmVudFxuICAgICAqL1xuICAgIG1pbnQoXG4gICAgICBfc3RuNzIxOiBzdHJpbmcsXG4gICAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBqdXN0IGZvciBTVE43MjEgd2hpY2ggZG9lc250IGhhdmUgcGFyZW50XG4gICAgICovXG4gICAgXCJtaW50KGFkZHJlc3MsYm9vbCx1aW50MjU2W10sYWRkcmVzcylcIihcbiAgICAgIF9zdG43MjE6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIGp1c3QgZm9yIFNUTjcyMSB3aGljaCBoYXMgcGFyZW50LCB0b2tlbnMgc2hvdWxkIGdvIHRvIHRoZSBvd25lciBvZiB0aGUgcGFyZW50IHRva2VuXG4gICAgICovXG4gICAgbWludENoaWxkKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICoganVzdCBmb3IgU1RONzIxIHdoaWNoIGhhcyBwYXJlbnQsIHRva2VucyBzaG91bGQgZ28gdG8gdGhlIG93bmVyIG9mIHRoZSBwYXJlbnQgdG9rZW5cbiAgICAgKi9cbiAgICBcIm1pbnRDaGlsZChhZGRyZXNzLGJvb2wsdWludDI1NltdKVwiKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgZ2V0Q2hpbGQoXG4gICAgICBzdG43MjFQYXJlbnQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiZ2V0Q2hpbGQoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc3RuNzIxUGFyZW50OiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBnZXRBbGwob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJnZXRBbGwoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcbiAgfTtcbn1cbiJdfQ==