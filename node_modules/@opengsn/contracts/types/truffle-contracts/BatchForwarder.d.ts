/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface BatchForwarderContract
  extends Truffle.Contract<BatchForwarderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BatchForwarderInstance>;
}

export interface DomainRegistered {
  name: "DomainRegistered";
  args: {
    domainSeparator: string;
    domainValue: string;
    0: string;
    1: string;
  };
}

export interface RequestTypeRegistered {
  name: "RequestTypeRegistered";
  args: {
    typeHash: string;
    typeStr: string;
    0: string;
    1: string;
  };
}

type AllEvents = DomainRegistered | RequestTypeRegistered;

export interface BatchForwarderInstance extends Truffle.ContractInstance {
  EIP712_DOMAIN_TYPE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  GENERIC_PARAMS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getEncoded(
    req: {
      from: string;
      to: string;
      value: number | BN | string;
      gas: number | BN | string;
      nonce: number | BN | string;
      data: string;
      validUntil: number | BN | string;
    },
    requestTypeHash: string,
    suffixData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  domains(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  execute: {
    (
      req: {
        from: string;
        to: string;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
        validUntil: number | BN | string;
      },
      domainSeparator: string,
      requestTypeHash: string,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      req: {
        from: string;
        to: string;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
        validUntil: number | BN | string;
      },
      domainSeparator: string,
      requestTypeHash: string,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: string }>;
    sendTransaction(
      req: {
        from: string;
        to: string;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
        validUntil: number | BN | string;
      },
      domainSeparator: string,
      requestTypeHash: string,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      req: {
        from: string;
        to: string;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
        validUntil: number | BN | string;
      },
      domainSeparator: string,
      requestTypeHash: string,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(from: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
   */
  isTrustedForwarder(
    forwarder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
   * @param name the domain's display name
   * @param version the domain/protocol version
   */
  registerDomainSeparator: {
    (
      name: string,
      version: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      name: string,
      version: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      version: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      version: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Register a new Request typehash.
   * @param typeName - the name of the request type.
   * @param typeSuffix - any extra data after the generic params.  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)
   */
  registerRequestType: {
    (
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  trustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  typeHashes(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verify(
    req: {
      from: string;
      to: string;
      value: number | BN | string;
      gas: number | BN | string;
      nonce: number | BN | string;
      data: string;
      validUntil: number | BN | string;
    },
    domainSeparator: string,
    requestTypeHash: string,
    suffixData: string,
    sig: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

  sendBatch: {
    (
      targets: string[],
      encodedFunctions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      targets: string[],
      encodedFunctions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      targets: string[],
      encodedFunctions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      targets: string[],
      encodedFunctions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    EIP712_DOMAIN_TYPE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    GENERIC_PARAMS(txDetails?: Truffle.TransactionDetails): Promise<string>;

    _getEncoded(
      req: {
        from: string;
        to: string;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
        validUntil: number | BN | string;
      },
      requestTypeHash: string,
      suffixData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    domains(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    execute: {
      (
        req: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        },
        domainSeparator: string,
        requestTypeHash: string,
        suffixData: string,
        sig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        req: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        },
        domainSeparator: string,
        requestTypeHash: string,
        suffixData: string,
        sig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: boolean; 1: string }>;
      sendTransaction(
        req: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        },
        domainSeparator: string,
        requestTypeHash: string,
        suffixData: string,
        sig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        req: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        },
        domainSeparator: string,
        requestTypeHash: string,
        suffixData: string,
        sig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getNonce(from: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
     */
    isTrustedForwarder(
      forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.
     * @param name the domain's display name
     * @param version the domain/protocol version
     */
    registerDomainSeparator: {
      (
        name: string,
        version: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        name: string,
        version: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        name: string,
        version: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        name: string,
        version: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Register a new Request typehash.
     * @param typeName - the name of the request type.
     * @param typeSuffix - any extra data after the generic params.  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)
     */
    registerRequestType: {
      (
        typeName: string,
        typeSuffix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        typeName: string,
        typeSuffix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        typeName: string,
        typeSuffix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        typeName: string,
        typeSuffix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    trustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    typeHashes(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verify(
      req: {
        from: string;
        to: string;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
        validUntil: number | BN | string;
      },
      domainSeparator: string,
      requestTypeHash: string,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

    sendBatch: {
      (
        targets: string[],
        encodedFunctions: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        targets: string[],
        encodedFunctions: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        targets: string[],
        encodedFunctions: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        targets: string[],
        encodedFunctions: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
