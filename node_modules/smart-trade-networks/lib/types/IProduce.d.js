"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IProduce = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _contracts = require("@ethersproject/contracts");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var IProduce = /*#__PURE__*/function (_Contract) {
  (0, _inherits2["default"])(IProduce, _Contract);

  var _super = _createSuper(IProduce);

  function IProduce() {
    var _this;

    (0, _classCallCheck2["default"])(this, IProduce);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "interface", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functions", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "callStatic", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filters", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "estimateGas", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "populateTransaction", void 0);
    return _this;
  }

  return IProduce;
}(_contracts.Contract);

exports.IProduce = IProduce;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,