/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICompaniesFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createCompany(address,string,bytes32)": FunctionFragment;
    "removeCompany(address)": FunctionFragment;
    "approveCompany(address)": FunctionFragment;
    "addCompanySignatorie(address,address)": FunctionFragment;
    "removeCompanySignatorie(address,address)": FunctionFragment;
    "getCompanies()": FunctionFragment;
    "isCompanyOwner(address,address)": FunctionFragment;
    "getCompaniesBySignatorie(address)": FunctionFragment;
    "getSignersByCompany(address)": FunctionFragment;
    "isCompanyApproved(address)": FunctionFragment;
    "isSignerApproved(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createCompany",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCompany",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveCompany",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addCompanySignatorie",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCompanySignatorie",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCompanyOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompaniesBySignatorie",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignersByCompany",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompanyApproved",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSignerApproved",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCompanySignatorie",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCompanySignatorie",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCompanyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompaniesBySignatorie",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignersByCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCompanyApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSignerApproved",
    data: BytesLike
  ): Result;

  events: {
    "ApproveCompany(address)": EventFragment;
    "NewCompany(address,address)": EventFragment;
    "NewSignatorie(address,address)": EventFragment;
    "RemoveCompany(address)": EventFragment;
    "RemoveSignatorie(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveCompany"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCompany"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSignatorie"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCompany"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveSignatorie"): EventFragment;
}

export class ICompaniesFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICompaniesFactoryInterface;

  functions: {
    createCompany(
      _owner: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createCompany(address,string,bytes32)"(
      _owner: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeCompany(
      _company: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveCompany(
      _company: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addCompanySignatorie(
      _company: string,
      _newSignatorie: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addCompanySignatorie(address,address)"(
      _company: string,
      _newSignatorie: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeCompanySignatorie(
      _company: string,
      _signatorie: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeCompanySignatorie(address,address)"(
      _company: string,
      _signatorie: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCompanies(overrides?: CallOverrides): Promise<[string[]]>;

    "getCompanies()"(overrides?: CallOverrides): Promise<[string[]]>;

    isCompanyOwner(
      _company: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isCompanyOwner(address,address)"(
      _company: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCompaniesBySignatorie(
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getCompaniesBySignatorie(address)"(
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSignersByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getSignersByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isCompanyApproved(
      _company: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isCompanyApproved(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSignerApproved(
      _company: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSignerApproved(address,address)"(
      _company: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createCompany(
    _owner: string,
    _name: string,
    _ipfsLink: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createCompany(address,string,bytes32)"(
    _owner: string,
    _name: string,
    _ipfsLink: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeCompany(
    _company: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeCompany(address)"(
    _company: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveCompany(
    _company: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveCompany(address)"(
    _company: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addCompanySignatorie(
    _company: string,
    _newSignatorie: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addCompanySignatorie(address,address)"(
    _company: string,
    _newSignatorie: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeCompanySignatorie(
    _company: string,
    _signatorie: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeCompanySignatorie(address,address)"(
    _company: string,
    _signatorie: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCompanies(overrides?: CallOverrides): Promise<string[]>;

  "getCompanies()"(overrides?: CallOverrides): Promise<string[]>;

  isCompanyOwner(
    _company: string,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCompanyOwner(address,address)"(
    _company: string,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCompaniesBySignatorie(
    _signatorie: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getCompaniesBySignatorie(address)"(
    _signatorie: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSignersByCompany(
    _company: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getSignersByCompany(address)"(
    _company: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isCompanyApproved(
    _company: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCompanyApproved(address)"(
    _company: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSignerApproved(
    _company: string,
    _signer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSignerApproved(address,address)"(
    _company: string,
    _signer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createCompany(
      _owner: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "createCompany(address,string,bytes32)"(
      _owner: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCompany(_company: string, overrides?: CallOverrides): Promise<void>;

    "removeCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveCompany(_company: string, overrides?: CallOverrides): Promise<void>;

    "approveCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addCompanySignatorie(
      _company: string,
      _newSignatorie: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCompanySignatorie(address,address)"(
      _company: string,
      _newSignatorie: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCompanySignatorie(
      _company: string,
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeCompanySignatorie(address,address)"(
      _company: string,
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCompanies(overrides?: CallOverrides): Promise<string[]>;

    "getCompanies()"(overrides?: CallOverrides): Promise<string[]>;

    isCompanyOwner(
      _company: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCompanyOwner(address,address)"(
      _company: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCompaniesBySignatorie(
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getCompaniesBySignatorie(address)"(
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSignersByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getSignersByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isCompanyApproved(
      _company: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCompanyApproved(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSignerApproved(
      _company: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSignerApproved(address,address)"(
      _company: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ApproveCompany(company: string | null): EventFilter;

    NewCompany(
      companyAddress: string | null,
      companyOwner: string | null
    ): EventFilter;

    NewSignatorie(
      company: string | null,
      newSignatorie: string | null
    ): EventFilter;

    RemoveCompany(company: string | null): EventFilter;

    RemoveSignatorie(
      company: string | null,
      signatorie: string | null
    ): EventFilter;
  };

  estimateGas: {
    createCompany(
      _owner: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createCompany(address,string,bytes32)"(
      _owner: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeCompany(_company: string, overrides?: Overrides): Promise<BigNumber>;

    "removeCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveCompany(_company: string, overrides?: Overrides): Promise<BigNumber>;

    "approveCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addCompanySignatorie(
      _company: string,
      _newSignatorie: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addCompanySignatorie(address,address)"(
      _company: string,
      _newSignatorie: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeCompanySignatorie(
      _company: string,
      _signatorie: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeCompanySignatorie(address,address)"(
      _company: string,
      _signatorie: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCompanies(overrides?: CallOverrides): Promise<BigNumber>;

    "getCompanies()"(overrides?: CallOverrides): Promise<BigNumber>;

    isCompanyOwner(
      _company: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCompanyOwner(address,address)"(
      _company: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompaniesBySignatorie(
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCompaniesBySignatorie(address)"(
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSignersByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSignersByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCompanyApproved(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCompanyApproved(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSignerApproved(
      _company: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSignerApproved(address,address)"(
      _company: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createCompany(
      _owner: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createCompany(address,string,bytes32)"(
      _owner: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeCompany(
      _company: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveCompany(
      _company: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addCompanySignatorie(
      _company: string,
      _newSignatorie: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addCompanySignatorie(address,address)"(
      _company: string,
      _newSignatorie: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeCompanySignatorie(
      _company: string,
      _signatorie: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeCompanySignatorie(address,address)"(
      _company: string,
      _signatorie: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCompanies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCompanies()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCompanyOwner(
      _company: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCompanyOwner(address,address)"(
      _company: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompaniesBySignatorie(
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCompaniesBySignatorie(address)"(
      _signatorie: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSignersByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSignersByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCompanyApproved(
      _company: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCompanyApproved(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSignerApproved(
      _company: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSignerApproved(address,address)"(
      _company: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
