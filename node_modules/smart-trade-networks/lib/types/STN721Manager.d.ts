/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface STN721ManagerInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "addController(address)": FunctionFragment;
    "removeController(address)": FunctionFragment;
    "createParentSTN721(string,string)": FunctionFragment;
    "createChildSTN721(address,uint256,string,string)": FunctionFragment;
    "mint(address,bool,uint256[],address)": FunctionFragment;
    "mintChild(address,bool,uint256[])": FunctionFragment;
    "getChild(address,uint256)": FunctionFragment;
    "getAll()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createParentSTN721",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createChildSTN721",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, boolean, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintChild",
    values: [string, boolean, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getChild",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAll", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createParentSTN721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChildSTN721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;

  events: {
    "AddController(address)": EventFragment;
    "CreateSTN721Child(address,uint256,string,string)": EventFragment;
    "CreateSTN721Parent(string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveController(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSTN721Child"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSTN721Parent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveController"): EventFragment;
}

export class STN721Manager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: STN721ManagerInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addController(
      _newController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addController(address)"(
      _newController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createParentSTN721(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createParentSTN721(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createChildSTN721(
      stn721Parent: string,
      tokenId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createChildSTN721(address,uint256,string,string)"(
      stn721Parent: string,
      tokenId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * just for STN721 which doesnt have parent
     */
    mint(
      _stn721: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * just for STN721 which doesnt have parent
     */
    "mint(address,bool,uint256[],address)"(
      _stn721: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * just for STN721 which has parent, tokens should go to the owner of the parent token
     */
    mintChild(
      stn721Child: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * just for STN721 which has parent, tokens should go to the owner of the parent token
     */
    "mintChild(address,bool,uint256[])"(
      stn721Child: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getChild(
      stn721Parent: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getChild(address,uint256)"(
      stn721Parent: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAll(overrides?: CallOverrides): Promise<[string[]]>;

    "getAll()"(overrides?: CallOverrides): Promise<[string[]]>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addController(
    _newController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addController(address)"(
    _newController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createParentSTN721(
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createParentSTN721(string,string)"(
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createChildSTN721(
    stn721Parent: string,
    tokenId: BigNumberish,
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createChildSTN721(address,uint256,string,string)"(
    stn721Parent: string,
    tokenId: BigNumberish,
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * just for STN721 which doesnt have parent
   */
  mint(
    _stn721: string,
    divisible: boolean,
    tokenIds: BigNumberish[],
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * just for STN721 which doesnt have parent
   */
  "mint(address,bool,uint256[],address)"(
    _stn721: string,
    divisible: boolean,
    tokenIds: BigNumberish[],
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * just for STN721 which has parent, tokens should go to the owner of the parent token
   */
  mintChild(
    stn721Child: string,
    divisible: boolean,
    tokenIds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * just for STN721 which has parent, tokens should go to the owner of the parent token
   */
  "mintChild(address,bool,uint256[])"(
    stn721Child: string,
    divisible: boolean,
    tokenIds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getChild(
    stn721Parent: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getChild(address,uint256)"(
    stn721Parent: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAll(overrides?: CallOverrides): Promise<string[]>;

  "getAll()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addController(
      _newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addController(address)"(
      _newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createParentSTN721(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createParentSTN721(string,string)"(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createChildSTN721(
      stn721Parent: string,
      tokenId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createChildSTN721(address,uint256,string,string)"(
      stn721Parent: string,
      tokenId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * just for STN721 which doesnt have parent
     */
    mint(
      _stn721: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * just for STN721 which doesnt have parent
     */
    "mint(address,bool,uint256[],address)"(
      _stn721: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * just for STN721 which has parent, tokens should go to the owner of the parent token
     */
    mintChild(
      stn721Child: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * just for STN721 which has parent, tokens should go to the owner of the parent token
     */
    "mintChild(address,bool,uint256[])"(
      stn721Child: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getChild(
      stn721Parent: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getChild(address,uint256)"(
      stn721Parent: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAll(overrides?: CallOverrides): Promise<string[]>;

    "getAll()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    AddController(newController: string | null): EventFilter;

    CreateSTN721Child(
      stn721Parent: string | null,
      tokenId: null,
      name: null,
      symbol: null
    ): EventFilter;

    CreateSTN721Parent(name: null, symbol: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RemoveController(controller: string | null): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addController(
      _newController: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addController(address)"(
      _newController: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createParentSTN721(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createParentSTN721(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createChildSTN721(
      stn721Parent: string,
      tokenId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createChildSTN721(address,uint256,string,string)"(
      stn721Parent: string,
      tokenId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * just for STN721 which doesnt have parent
     */
    mint(
      _stn721: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * just for STN721 which doesnt have parent
     */
    "mint(address,bool,uint256[],address)"(
      _stn721: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * just for STN721 which has parent, tokens should go to the owner of the parent token
     */
    mintChild(
      stn721Child: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * just for STN721 which has parent, tokens should go to the owner of the parent token
     */
    "mintChild(address,bool,uint256[])"(
      stn721Child: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getChild(
      stn721Parent: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChild(address,uint256)"(
      stn721Parent: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAll(overrides?: CallOverrides): Promise<BigNumber>;

    "getAll()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addController(
      _newController: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addController(address)"(
      _newController: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createParentSTN721(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createParentSTN721(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createChildSTN721(
      stn721Parent: string,
      tokenId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createChildSTN721(address,uint256,string,string)"(
      stn721Parent: string,
      tokenId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * just for STN721 which doesnt have parent
     */
    mint(
      _stn721: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * just for STN721 which doesnt have parent
     */
    "mint(address,bool,uint256[],address)"(
      _stn721: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * just for STN721 which has parent, tokens should go to the owner of the parent token
     */
    mintChild(
      stn721Child: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * just for STN721 which has parent, tokens should go to the owner of the parent token
     */
    "mintChild(address,bool,uint256[])"(
      stn721Child: string,
      divisible: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getChild(
      stn721Parent: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChild(address,uint256)"(
      stn721Parent: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAll()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
