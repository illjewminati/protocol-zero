/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProduceInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setPermissionsContract(address)": FunctionFragment;
    "setSTN721ManagerContract(address)": FunctionFragment;
    "produce(uint256[],bool,address,address,address[],bytes32)": FunctionFragment;
    "produceChild(uint256[],bool,address,address,address[],bytes32)": FunctionFragment;
    "createSTN721Child(address,address,uint256,string,string)": FunctionFragment;
    "validateEntry(uint256,address)": FunctionFragment;
    "getEntriesByCompany(address)": FunctionFragment;
    "getEntriesByUser(address)": FunctionFragment;
    "getEntryData(uint256)": FunctionFragment;
    "getNumOfValidations(uint256)": FunctionFragment;
    "getValidation(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionsContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSTN721ManagerContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "produce",
    values: [BigNumberish[], boolean, string, string, string[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "produceChild",
    values: [BigNumberish[], boolean, string, string, string[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSTN721Child",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateEntry",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntriesByCompany",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntriesByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumOfValidations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidation",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSTN721ManagerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "produce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "produceChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSTN721Child",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntriesByCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntriesByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumOfValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidation",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProductionEvent(address,address,bytes32,uint256)": EventFragment;
    "SetPermissionsContract(address)": EventFragment;
    "SetSTN721ManagerContract(address)": EventFragment;
    "ValidationEvent(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductionEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPermissionsContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSTN721ManagerContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidationEvent"): EventFragment;
}

export class Produce extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProduceInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Setters
     */
    setPermissionsContract(
      _permissions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Setters
     */
    "setPermissionsContract(address)"(
      _permissions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSTN721ManagerContract(
      _stn721Manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSTN721ManagerContract(address)"(
      _stn721Manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    produce(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "produce(uint256[],bool,address,address,address[],bytes32)"(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * tokens minted go to owner of token
     */
    produceChild(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * tokens minted go to owner of token
     */
    "produceChild(uint256[],bool,address,address,address[],bytes32)"(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createSTN721Child(
      _companyAddress: string,
      _stn721Parent: string,
      _tokenId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createSTN721Child(address,address,uint256,string,string)"(
      _companyAddress: string,
      _stn721Parent: string,
      _tokenId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validateEntry(
      _entry: BigNumberish,
      _companyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "validateEntry(uint256,address)"(
      _entry: BigNumberish,
      _companyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Getters
     */
    getEntriesByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * Getters
     */
    "getEntriesByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEntriesByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getEntriesByUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEntryData(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber[], BigNumber, string[], string] & {
          company: string;
          signatorie: string;
          stn721Address: string;
          tokenIds: BigNumber[];
          timestamp: BigNumber;
          involvedCompanies: string[];
          dbId: string;
        }
      ]
    >;

    "getEntryData(uint256)"(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber[], BigNumber, string[], string] & {
          company: string;
          signatorie: string;
          stn721Address: string;
          tokenIds: BigNumber[];
          timestamp: BigNumber;
          involvedCompanies: string[];
          dbId: string;
        }
      ]
    >;

    getNumOfValidations(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumOfValidations(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValidation(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber] & {
          company: string;
          signatorie: string;
          timestamp: BigNumber;
        }
      ]
    >;

    "getValidation(uint256,uint256)"(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber] & {
          company: string;
          signatorie: string;
          timestamp: BigNumber;
        }
      ]
    >;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Setters
   */
  setPermissionsContract(
    _permissions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Setters
   */
  "setPermissionsContract(address)"(
    _permissions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSTN721ManagerContract(
    _stn721Manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSTN721ManagerContract(address)"(
    _stn721Manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  produce(
    _tokenIds: BigNumberish[],
    _divisible: boolean,
    _stn721Address: string,
    _companyAddress: string,
    _involvedCompanies: string[],
    _dbId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "produce(uint256[],bool,address,address,address[],bytes32)"(
    _tokenIds: BigNumberish[],
    _divisible: boolean,
    _stn721Address: string,
    _companyAddress: string,
    _involvedCompanies: string[],
    _dbId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * tokens minted go to owner of token
   */
  produceChild(
    _tokenIds: BigNumberish[],
    _divisible: boolean,
    _stn721Address: string,
    _companyAddress: string,
    _involvedCompanies: string[],
    _dbId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * tokens minted go to owner of token
   */
  "produceChild(uint256[],bool,address,address,address[],bytes32)"(
    _tokenIds: BigNumberish[],
    _divisible: boolean,
    _stn721Address: string,
    _companyAddress: string,
    _involvedCompanies: string[],
    _dbId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createSTN721Child(
    _companyAddress: string,
    _stn721Parent: string,
    _tokenId: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createSTN721Child(address,address,uint256,string,string)"(
    _companyAddress: string,
    _stn721Parent: string,
    _tokenId: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validateEntry(
    _entry: BigNumberish,
    _companyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "validateEntry(uint256,address)"(
    _entry: BigNumberish,
    _companyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Getters
   */
  getEntriesByCompany(
    _company: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Getters
   */
  "getEntriesByCompany(address)"(
    _company: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEntriesByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getEntriesByUser(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEntryData(
    _pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber[], BigNumber, string[], string] & {
      company: string;
      signatorie: string;
      stn721Address: string;
      tokenIds: BigNumber[];
      timestamp: BigNumber;
      involvedCompanies: string[];
      dbId: string;
    }
  >;

  "getEntryData(uint256)"(
    _pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber[], BigNumber, string[], string] & {
      company: string;
      signatorie: string;
      stn721Address: string;
      tokenIds: BigNumber[];
      timestamp: BigNumber;
      involvedCompanies: string[];
      dbId: string;
    }
  >;

  getNumOfValidations(
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumOfValidations(uint256)"(
    _entry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidation(
    _entry: BigNumberish,
    _pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      company: string;
      signatorie: string;
      timestamp: BigNumber;
    }
  >;

  "getValidation(uint256,uint256)"(
    _entry: BigNumberish,
    _pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      company: string;
      signatorie: string;
      timestamp: BigNumber;
    }
  >;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Setters
     */
    setPermissionsContract(
      _permissions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Setters
     */
    "setPermissionsContract(address)"(
      _permissions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSTN721ManagerContract(
      _stn721Manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSTN721ManagerContract(address)"(
      _stn721Manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    produce(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "produce(uint256[],bool,address,address,address[],bytes32)"(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * tokens minted go to owner of token
     */
    produceChild(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * tokens minted go to owner of token
     */
    "produceChild(uint256[],bool,address,address,address[],bytes32)"(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createSTN721Child(
      _companyAddress: string,
      _stn721Parent: string,
      _tokenId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createSTN721Child(address,address,uint256,string,string)"(
      _companyAddress: string,
      _stn721Parent: string,
      _tokenId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateEntry(
      _entry: BigNumberish,
      _companyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "validateEntry(uint256,address)"(
      _entry: BigNumberish,
      _companyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getters
     */
    getEntriesByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Getters
     */
    "getEntriesByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEntriesByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getEntriesByUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEntryData(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber[], BigNumber, string[], string] & {
        company: string;
        signatorie: string;
        stn721Address: string;
        tokenIds: BigNumber[];
        timestamp: BigNumber;
        involvedCompanies: string[];
        dbId: string;
      }
    >;

    "getEntryData(uint256)"(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber[], BigNumber, string[], string] & {
        company: string;
        signatorie: string;
        stn721Address: string;
        tokenIds: BigNumber[];
        timestamp: BigNumber;
        involvedCompanies: string[];
        dbId: string;
      }
    >;

    getNumOfValidations(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumOfValidations(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidation(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        company: string;
        signatorie: string;
        timestamp: BigNumber;
      }
    >;

    "getValidation(uint256,uint256)"(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        company: string;
        signatorie: string;
        timestamp: BigNumber;
      }
    >;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ProductionEvent(
      companyAddress: string | null,
      stn721Address: string | null,
      dbId: null,
      numOfTokens: null
    ): EventFilter;

    SetPermissionsContract(permissionsContract: string | null): EventFilter;

    SetSTN721ManagerContract(stn721ManagerContract: string | null): EventFilter;

    ValidationEvent(companyAddress: string | null, entry: null): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Setters
     */
    setPermissionsContract(
      _permissions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Setters
     */
    "setPermissionsContract(address)"(
      _permissions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSTN721ManagerContract(
      _stn721Manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSTN721ManagerContract(address)"(
      _stn721Manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    produce(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "produce(uint256[],bool,address,address,address[],bytes32)"(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * tokens minted go to owner of token
     */
    produceChild(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * tokens minted go to owner of token
     */
    "produceChild(uint256[],bool,address,address,address[],bytes32)"(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createSTN721Child(
      _companyAddress: string,
      _stn721Parent: string,
      _tokenId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createSTN721Child(address,address,uint256,string,string)"(
      _companyAddress: string,
      _stn721Parent: string,
      _tokenId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validateEntry(
      _entry: BigNumberish,
      _companyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "validateEntry(uint256,address)"(
      _entry: BigNumberish,
      _companyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Getters
     */
    getEntriesByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Getters
     */
    "getEntriesByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntriesByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEntriesByUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntryData(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEntryData(uint256)"(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumOfValidations(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumOfValidations(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidation(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValidation(uint256,uint256)"(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Setters
     */
    setPermissionsContract(
      _permissions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Setters
     */
    "setPermissionsContract(address)"(
      _permissions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSTN721ManagerContract(
      _stn721Manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSTN721ManagerContract(address)"(
      _stn721Manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    produce(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "produce(uint256[],bool,address,address,address[],bytes32)"(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * tokens minted go to owner of token
     */
    produceChild(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * tokens minted go to owner of token
     */
    "produceChild(uint256[],bool,address,address,address[],bytes32)"(
      _tokenIds: BigNumberish[],
      _divisible: boolean,
      _stn721Address: string,
      _companyAddress: string,
      _involvedCompanies: string[],
      _dbId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createSTN721Child(
      _companyAddress: string,
      _stn721Parent: string,
      _tokenId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createSTN721Child(address,address,uint256,string,string)"(
      _companyAddress: string,
      _stn721Parent: string,
      _tokenId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validateEntry(
      _entry: BigNumberish,
      _companyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "validateEntry(uint256,address)"(
      _entry: BigNumberish,
      _companyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getters
     */
    getEntriesByCompany(
      _company: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getters
     */
    "getEntriesByCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntriesByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntriesByUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntryData(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntryData(uint256)"(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumOfValidations(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumOfValidations(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidation(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValidation(uint256,uint256)"(
      _entry: BigNumberish,
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
