{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/account/uniswap_swap.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { ChainId, ETH } from \"uniswap-dapp-integration-shared\";\nimport UniswapReact from \"uniswap-react\";\n\nfunction App2() {\n  const {\n    0: uniswapDappSharedLogicContext,\n    1: setUniswapDappSharedLogicContext\n  } = useState();\n  const [metamaskInstalled, setMetamaskInstalled] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  useEffect(() => {\n    (async () => {\n      async function getMetaMaskAccount() {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          });\n          return accounts;\n        } catch (error) {\n          // keep trying if they reject the request!\n          return getMetaMaskAccount();\n        }\n      } // checking metamask or any injected ethereum provider is installed\n\n\n      const ethereum = window.ethereum;\n\n      if (!ethereum) {\n        setMetamaskInstalled(false);\n        setLoading(false);\n        return;\n      }\n\n      const accounts = await getMetaMaskAccount();\n      const uniswapDappSharedLogicContext = {\n        supportedNetworkTokens: [// only showing mainnet but works for all testnets uniswap is deployed on!\n        {\n          chainId: ChainId.MAINNET,\n          // the deep linked input amount\n          // if not passed input will have nothing deep linked in\n          // it should always be the formatted string aka 0.0001 ETH\n          // you pass ether value ('0.0001'). Same with tokens you pass in\n          // the formatted value\n          defaultInputValue: \"1\",\n          // what you want the deep linked input token to be\n          // if not passed in will use eth!\n          defaultInputToken: ETH.MAINNET().contractAddress,\n          // what you want the deep linked output token to be\n          // if not passed in will select nothing and make the user pick.\n          defaultOutputToken: \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n          // all your supported contract erc20 tokens you wish to support on the\n          // widget\n          supportedTokens: [{\n            contractAddress: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\"\n          }, {\n            contractAddress: \"0xdac17f958d2ee523a2206206994597c13d831ec7\"\n          }, {\n            contractAddress: \"0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\"\n          }, {\n            contractAddress: \"0xde30da39c46104798bb5aa3fe8b9e0e1f348163f\"\n          }, {\n            // can override the image with your own icon, by default if this is not defined\n            // it try to find them in trustwallet assets\n            tokenImageContext: {\n              image: \"yourCustomIconImageUrl.png\"\n            },\n            contractAddress: \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\"\n          }, {\n            contractAddress: \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n          }, {\n            contractAddress: \"0xc944e90c64b2c07662a292be6244bdf05cda44a7\"\n          }, {\n            contractAddress: \"0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e\"\n          }, {\n            contractAddress: \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\"\n          }]\n        }],\n        // the ethereum address for the user\n        ethereumAddress: accounts[0],\n        // It must confirm to the `https://eips.ethereum.org/EIPS/eip-1193`\n        // If your using MetaMask for example you can just pass in the ethereum provider from the window aka `window.ethereum`.\n        // If your using a integrated wallet you should pass in your own custom provider.\n        ethereumProvider: ethereum\n      }; // set the config in the react state!\n\n      setUniswapDappSharedLogicContext(uniswapDappSharedLogicContext);\n      setLoading(false);\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [metamaskInstalled && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please approve account or login to MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), !loading &&\n    /*#__PURE__*/\n    // added some styling to the dApp to make it small and center showcase has the same css\n    // https://github.com/uniswap-integration/uniswap-dapp-integration-monorepo/blob/master/showcase/src/App.css\n    // again this is purely to for demo purposes and to make it look like the uniswap widget width.\n    _jsxDEV(\"div\", {\n      className: \"uniswap-container\",\n      children: [uniswapDappSharedLogicContext !== undefined && metamaskInstalled && /*#__PURE__*/_jsxDEV(UniswapReact, {\n        uniswapDappSharedLogicContext: uniswapDappSharedLogicContext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), !metamaskInstalled && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This showcase only supports MetaMask please install it.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\nexport default App2;","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/account/uniswap_swap.tsx"],"names":["React","useEffect","useState","ChainId","ETH","UniswapReact","App2","uniswapDappSharedLogicContext","setUniswapDappSharedLogicContext","metamaskInstalled","setMetamaskInstalled","loading","setLoading","getMetaMaskAccount","accounts","window","ethereum","request","method","error","supportedNetworkTokens","chainId","MAINNET","defaultInputValue","defaultInputToken","contractAddress","defaultOutputToken","supportedTokens","tokenImageContext","image","ethereumAddress","ethereumProvider","undefined"],"mappings":";;AAAA,OAAOA,KAAP,IAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SACEC,OADF,EAEEC,GAFF,QAKO,iCALP;AAMA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,SAASC,IAAT,GAAgB;AACd,QAAM;AAAA,OACJC,6BADI;AAAA,OAEJC;AAFI,MAGFN,QAAQ,EAHZ;AAIA,QAAM,CAACO,iBAAD,EAAoBC,oBAApB,IAA4CV,KAAK,CAACE,QAAN,CAEhD,KAFgD,CAAlD;AAIA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBZ,KAAK,CAACE,QAAN,CAAwB,IAAxB,CAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,qBAAeY,kBAAf,GAAuD;AACrD,YAAI;AACF,gBAAMC,QAAQ,GAAG,MAAOC,MAAD,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC;AACtDC,YAAAA,MAAM,EAAE;AAD8C,WAAjC,CAAvB;AAGA,iBAAOJ,QAAP;AACD,SALD,CAKE,OAAOK,KAAP,EAAc;AACd;AACA,iBAAON,kBAAkB,EAAzB;AACD;AACF,OAXU,CAaX;;;AACA,YAAMG,QAAQ,GAAID,MAAD,CAAgBC,QAAjC;;AACA,UAAI,CAACA,QAAL,EAAe;AACbN,QAAAA,oBAAoB,CAAC,KAAD,CAApB;AACAE,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD;;AAED,YAAME,QAAQ,GAAG,MAAMD,kBAAkB,EAAzC;AAEA,YAAMN,6BAA4D,GAAG;AACnEa,QAAAA,sBAAsB,EAAE,CACtB;AACA;AACEC,UAAAA,OAAO,EAAElB,OAAO,CAACmB,OADnB;AAEE;AACA;AACA;AACA;AACA;AACAC,UAAAA,iBAAiB,EAAE,GAPrB;AAQE;AACA;AACAC,UAAAA,iBAAiB,EAAEpB,GAAG,CAACkB,OAAJ,GAAcG,eAVnC;AAWE;AACA;AACAC,UAAAA,kBAAkB,EAAE,4CAbtB;AAcE;AACA;AACAC,UAAAA,eAAe,EAAE,CACf;AACEF,YAAAA,eAAe,EAAE;AADnB,WADe,EAIf;AACEA,YAAAA,eAAe,EAAE;AADnB,WAJe,EAOf;AACEA,YAAAA,eAAe,EAAE;AADnB,WAPe,EAUf;AACEA,YAAAA,eAAe,EAAE;AADnB,WAVe,EAaf;AACE;AACA;AACAG,YAAAA,iBAAiB,EAAE;AACjBC,cAAAA,KAAK,EAAE;AADU,aAHrB;AAMEJ,YAAAA,eAAe,EAAE;AANnB,WAbe,EAqBf;AACEA,YAAAA,eAAe,EAAE;AADnB,WArBe,EAwBf;AACEA,YAAAA,eAAe,EAAE;AADnB,WAxBe,EA2Bf;AACEA,YAAAA,eAAe,EAAE;AADnB,WA3Be,EA8Bf;AACEA,YAAAA,eAAe,EAAE;AADnB,WA9Be;AAhBnB,SAFsB,CAD2C;AAuDnE;AACAK,QAAAA,eAAe,EAAEhB,QAAQ,CAAC,CAAD,CAxD0C;AAyDnE;AACA;AACA;AACAiB,QAAAA,gBAAgB,EAAEf;AA5DiD,OAArE,CAvBW,CAqFX;;AACAR,MAAAA,gCAAgC,CAACD,6BAAD,CAAhC;AACAK,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAxFD;AAyFD,GA1FQ,EA0FN,EA1FM,CAAT;AA4FA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eAEGD,OAAO,iBACN;AAAA,iBACGF,iBAAiB,iBAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAYG,CAACE,OAAD;AAAA;AACC;AACA;AACA;AACA;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,iBACGJ,6BAA6B,KAAKyB,SAAlC,IAA+CvB,iBAA/C,iBACC,QAAC,YAAD;AACE,QAAA,6BAA6B,EAAEF;AADjC;AAAA;AAAA;AAAA;AAAA,cAFJ,EAOG,CAACE,iBAAD,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;;AAED,eAAeH,IAAf","sourcesContent":["import React, { PureComponent, useEffect, useState } from \"react\";\nimport {\n  ChainId,\n  ETH,\n  UniswapDappSharedLogic,\n  UniswapDappSharedLogicContext,\n} from \"uniswap-dapp-integration-shared\";\nimport UniswapReact from \"uniswap-react\";\n\nfunction App2() {\n  const [\n    uniswapDappSharedLogicContext,\n    setUniswapDappSharedLogicContext,\n  ] = useState<UniswapDappSharedLogicContext | undefined>();\n  const [metamaskInstalled, setMetamaskInstalled] = React.useState<\n    undefined | boolean\n  >(false);\n\n  const [loading, setLoading] = React.useState<boolean>(true);\n\n  useEffect(() => {\n    (async () => {\n      async function getMetaMaskAccount(): Promise<string[]> {\n        try {\n          const accounts = await (window as any).ethereum.request({\n            method: \"eth_requestAccounts\",\n          });\n          return accounts;\n        } catch (error) {\n          // keep trying if they reject the request!\n          return getMetaMaskAccount();\n        }\n      }\n\n      // checking metamask or any injected ethereum provider is installed\n      const ethereum = (window as any).ethereum;\n      if (!ethereum) {\n        setMetamaskInstalled(false);\n        setLoading(false);\n        return;\n      }\n\n      const accounts = await getMetaMaskAccount();\n\n      const uniswapDappSharedLogicContext: UniswapDappSharedLogicContext = {\n        supportedNetworkTokens: [\n          // only showing mainnet but works for all testnets uniswap is deployed on!\n          {\n            chainId: ChainId.MAINNET,\n            // the deep linked input amount\n            // if not passed input will have nothing deep linked in\n            // it should always be the formatted string aka 0.0001 ETH\n            // you pass ether value ('0.0001'). Same with tokens you pass in\n            // the formatted value\n            defaultInputValue: \"1\",\n            // what you want the deep linked input token to be\n            // if not passed in will use eth!\n            defaultInputToken: ETH.MAINNET().contractAddress,\n            // what you want the deep linked output token to be\n            // if not passed in will select nothing and make the user pick.\n            defaultOutputToken: \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n            // all your supported contract erc20 tokens you wish to support on the\n            // widget\n            supportedTokens: [\n              {\n                contractAddress: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n              },\n              {\n                contractAddress: \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n              },\n              {\n                contractAddress: \"0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\",\n              },\n              {\n                contractAddress: \"0xde30da39c46104798bb5aa3fe8b9e0e1f348163f\",\n              },\n              {\n                // can override the image with your own icon, by default if this is not defined\n                // it try to find them in trustwallet assets\n                tokenImageContext: {\n                  image: \"yourCustomIconImageUrl.png\",\n                },\n                contractAddress: \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n              },\n              {\n                contractAddress: \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n              },\n              {\n                contractAddress: \"0xc944e90c64b2c07662a292be6244bdf05cda44a7\",\n              },\n              {\n                contractAddress: \"0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e\",\n              },\n              {\n                contractAddress: \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\",\n              },\n            ],\n          },\n        ],\n        // the ethereum address for the user\n        ethereumAddress: accounts[0],\n        // It must confirm to the `https://eips.ethereum.org/EIPS/eip-1193`\n        // If your using MetaMask for example you can just pass in the ethereum provider from the window aka `window.ethereum`.\n        // If your using a integrated wallet you should pass in your own custom provider.\n        ethereumProvider: ethereum,\n      };\n      // set the config in the react state!\n      setUniswapDappSharedLogicContext(uniswapDappSharedLogicContext);\n      setLoading(false);\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* Just a random loading context, just showing that you should not render the component until you have done the above */}\n      {loading && (\n        <div>\n          {metamaskInstalled && (\n            <p>Please approve account or login to MetaMask</p>\n          )}\n\n          <p>Loading...</p>\n        </div>\n      )}\n\n      {!loading && (\n        // added some styling to the dApp to make it small and center showcase has the same css\n        // https://github.com/uniswap-integration/uniswap-dapp-integration-monorepo/blob/master/showcase/src/App.css\n        // again this is purely to for demo purposes and to make it look like the uniswap widget width.\n        <div className=\"uniswap-container\">\n          {uniswapDappSharedLogicContext !== undefined && metamaskInstalled && (\n            <UniswapReact\n              uniswapDappSharedLogicContext={uniswapDappSharedLogicContext}\n            />\n          )}\n          {/* Not part of the lib but just showing handler to let the user know they dont have MetaMask installed */}\n          {!metamaskInstalled && (\n            <p>This showcase only supports MetaMask please install it.</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App2;\n"]},"metadata":{},"sourceType":"module"}