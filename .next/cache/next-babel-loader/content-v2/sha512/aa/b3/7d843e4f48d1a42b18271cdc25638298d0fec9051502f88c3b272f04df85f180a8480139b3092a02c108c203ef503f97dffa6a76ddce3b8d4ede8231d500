{"ast":null,"code":"import _classCallCheck from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Config } from '../common/config';\nimport { UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION } from '../common/constants';\nvar KNOWN_TOKENS_META_DATA = Config.getConfig().tokens;\nexport var KnownTokens = function KnownTokens(knownTokensMetadata, networkID) {\n  var _this = this;\n\n  _classCallCheck(this, KnownTokens);\n\n  _defineProperty(this, \"_tokens\", []);\n\n  _defineProperty(this, \"_networkID\", 5);\n\n  _defineProperty(this, \"getTokenBySymbol\", function (symbol) {\n    var symbolInLowerCaseScore = symbol.toLowerCase();\n\n    var token = _this._tokens.find(function (t) {\n      return t.symbol === symbolInLowerCaseScore;\n    });\n\n    if (!token) {\n      var errorMessage = \"Token with symbol \".concat(symbol, \" not found in known tokens\");\n      throw new Error(errorMessage);\n    }\n\n    return token;\n  });\n\n  _defineProperty(this, \"getTokenByAddress\", function (address) {\n    var addressInLowerCase = address.toLowerCase();\n\n    var token = _this._tokens.find(function (t) {\n      return t.address.toLowerCase() === addressInLowerCase;\n    });\n\n    if (!token) {\n      throw new Error(\"Token with address \".concat(address, \" not found in known tokens\"));\n    }\n\n    return token;\n  });\n\n  _defineProperty(this, \"getTokens\", function () {\n    return _this._tokens;\n  });\n\n  this._tokens = mapTokensMetaDataToTokenByNetworkId(knownTokensMetadata, networkID);\n};\nvar knownTokens;\nvar selectedNetworkId;\nexport var getKnownTokens = function getKnownTokens(networkID) {\n  if (!knownTokens || !selectedNetworkId || networkID !== selectedNetworkId) {\n    knownTokens = new KnownTokens(KNOWN_TOKENS_META_DATA, networkID);\n  }\n\n  return knownTokens;\n};\n\nvar mapTokensMetaDataToTokenByNetworkId = function mapTokensMetaDataToTokenByNetworkId(tokensMetaData, networkID) {\n  var data = tokensMetaData.filter(function (tokenMetaData) {\n    return tokenMetaData.addresses[networkID];\n  }).map(function (tokenMetaData) {\n    return {\n      address: tokenMetaData.addresses[networkID],\n      symbol: tokenMetaData.symbol,\n      decimals: tokenMetaData.decimals,\n      name: tokenMetaData.name,\n      primaryColor: tokenMetaData.primaryColor,\n      icon: tokenMetaData.icon,\n      displayDecimals: tokenMetaData.displayDecimals || UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION\n    };\n  });\n  return data;\n};","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/util/known_tokens.ts"],"names":["Config","UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION","KNOWN_TOKENS_META_DATA","getConfig","tokens","KnownTokens","knownTokensMetadata","networkID","symbol","symbolInLowerCaseScore","toLowerCase","token","_tokens","find","t","errorMessage","Error","address","addressInLowerCase","mapTokensMetaDataToTokenByNetworkId","knownTokens","selectedNetworkId","getKnownTokens","tokensMetaData","data","filter","tokenMetaData","addresses","map","decimals","name","primaryColor","icon","displayDecimals"],"mappings":";;AACA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,uCAAT,QAAwD,qBAAxD;AAIA,IAAMC,sBAAuC,GAAGF,MAAM,CAACG,SAAP,GAAmBC,MAAnE;AAGA,WAAaC,WAAb,GAII,qBAAYC,mBAAZ,EAAkDC,SAAlD,EAAqE;AAAA;;AAAA;;AAAA,mCAHjC,EAGiC;;AAAA,sCAF/B,CAE+B;;AAAA,4CAM3C,UAACC,MAAD,EAA2B;AACjD,QAAMC,sBAAsB,GAAGD,MAAM,CAACE,WAAP,EAA/B;;AACA,QAAMC,KAAK,GAAG,KAAI,CAACC,OAAL,CAAaC,IAAb,CAAkB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACN,MAAF,KAAaC,sBAAjB;AAAA,KAAnB,CAAd;;AAEA,QAAI,CAACE,KAAL,EAAY;AACR,UAAMI,YAAY,+BAAwBP,MAAxB,+BAAlB;AACA,YAAM,IAAIQ,KAAJ,CAAUD,YAAV,CAAN;AACH;;AACD,WAAOJ,KAAP;AACH,GAfoE;;AAAA,6CAiB1C,UAACM,OAAD,EAA4B;AACnD,QAAMC,kBAAkB,GAAGD,OAAO,CAACP,WAAR,EAA3B;;AACA,QAAIC,KAAK,GAAG,KAAI,CAACC,OAAL,CAAaC,IAAb,CAAkB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACG,OAAF,CAAUP,WAAV,OAA4BQ,kBAAhC;AAAA,KAAnB,CAAZ;;AAEA,QAAI,CAACP,KAAL,EAAY;AACR,YAAM,IAAIK,KAAJ,8BAAgCC,OAAhC,gCAAN;AACH;;AACD,WAAON,KAAP;AACH,GAzBoE;;AAAA,qCA2BlD,YAAe;AAC9B,WAAO,KAAI,CAACC,OAAZ;AACH,GA7BoE;;AAEjE,OAAKA,OAAL,GAAeO,mCAAmC,CAACb,mBAAD,EAAsBC,SAAtB,CAAlD;AAEH,CARL;AAoCA,IAAIa,WAAJ;AACA,IAAIC,iBAAJ;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACf,SAAD,EAAoC;AAC9D,MAAI,CAACa,WAAD,IAAgB,CAACC,iBAAjB,IAAsCd,SAAS,KAAKc,iBAAxD,EAA2E;AACvED,IAAAA,WAAW,GAAG,IAAIf,WAAJ,CAAgBH,sBAAhB,EAAwCK,SAAxC,CAAd;AACH;;AACD,SAAOa,WAAP;AACH,CALM;;AAOP,IAAMD,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACI,cAAD,EAAkChB,SAAlC,EAAiE;AAEzG,MAAMiB,IAAI,GAAID,cAAc,CACvBE,MADS,CACF,UAAAC,aAAa;AAAA,WAAIA,aAAa,CAACC,SAAd,CAAwBpB,SAAxB,CAAJ;AAAA,GADX,EAETqB,GAFS,CAGN,UAACF,aAAD,EAA0B;AACtB,WAAO;AACHT,MAAAA,OAAO,EAAES,aAAa,CAACC,SAAd,CAAwBpB,SAAxB,CADN;AAEHC,MAAAA,MAAM,EAAEkB,aAAa,CAAClB,MAFnB;AAGHqB,MAAAA,QAAQ,EAAEH,aAAa,CAACG,QAHrB;AAIHC,MAAAA,IAAI,EAAEJ,aAAa,CAACI,IAJjB;AAKHC,MAAAA,YAAY,EAAEL,aAAa,CAACK,YALzB;AAMHC,MAAAA,IAAI,EAAEN,aAAa,CAACM,IANjB;AAOHC,MAAAA,eAAe,EAAEP,aAAa,CAACO,eAAd,IAAiChC;AAP/C,KAAP;AASH,GAbK,CAAd;AAgBA,SAAOuB,IAAP;AACH,CAnBD","sourcesContent":["\nimport { Config } from '../common/config';\nimport { UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION } from '../common/constants';\nimport { TokenMetaData, Token } from '../types/blockchain';\n\n\nconst KNOWN_TOKENS_META_DATA: TokenMetaData[] = Config.getConfig().tokens;\n\n\nexport class KnownTokens {\n    private readonly _tokens: Token[] = [];\n    private readonly _networkID: number = 5;\n\n    constructor(knownTokensMetadata: TokenMetaData[], networkID: number) {\n    \n        this._tokens = mapTokensMetaDataToTokenByNetworkId(knownTokensMetadata, networkID);\n\n    }\n\n    public getTokenBySymbol = (symbol: string): Token => {\n        const symbolInLowerCaseScore = symbol.toLowerCase();\n        const token = this._tokens.find(t => t.symbol === symbolInLowerCaseScore);\n\n        if (!token) {\n            const errorMessage = `Token with symbol ${symbol} not found in known tokens`;\n            throw new Error(errorMessage);\n        }\n        return token;\n    };\n\n    public getTokenByAddress = (address: string): Token => {\n        const addressInLowerCase = address.toLowerCase();\n        let token = this._tokens.find(t => t.address.toLowerCase() === addressInLowerCase);\n        \n        if (!token) {\n            throw new Error(`Token with address ${address} not found in known tokens`);\n        }\n        return token;\n    };\n\n    public getTokens = (): Token[] => {\n        return this._tokens;\n    };\n}\n\nlet knownTokens: KnownTokens;\nlet selectedNetworkId: number\nexport const getKnownTokens = (networkID: number): KnownTokens => {\n    if (!knownTokens || !selectedNetworkId || networkID !== selectedNetworkId) {\n        knownTokens = new KnownTokens(KNOWN_TOKENS_META_DATA, networkID);\n    }\n    return knownTokens;\n};\n\nconst mapTokensMetaDataToTokenByNetworkId = (tokensMetaData: TokenMetaData[], networkID: number): Token[] => {\n    \n    const data =  tokensMetaData\n        .filter(tokenMetaData => tokenMetaData.addresses[networkID])\n        .map(\n            (tokenMetaData): Token => {\n                return {\n                    address: tokenMetaData.addresses[networkID],\n                    symbol: tokenMetaData.symbol,\n                    decimals: tokenMetaData.decimals,\n                    name: tokenMetaData.name,\n                    primaryColor: tokenMetaData.primaryColor,\n                    icon: tokenMetaData.icon,\n                    displayDecimals: tokenMetaData.displayDecimals || UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION,\n                };\n            },\n        );\n\n    return data\n};\n\n\n"]},"metadata":{},"sourceType":"module"}