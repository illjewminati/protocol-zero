"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IMultisigENS__factory = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ethers = require("ethers");

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
var IMultisigENS__factory = /*#__PURE__*/function () {
  function IMultisigENS__factory() {
    (0, _classCallCheck2["default"])(this, IMultisigENS__factory);
  }

  (0, _createClass2["default"])(IMultisigENS__factory, null, [{
    key: "connect",
    value: function connect(address, signerOrProvider) {
      return new _ethers.Contract(address, _abi, signerOrProvider);
    }
  }]);
  return IMultisigENS__factory;
}();

exports.IMultisigENS__factory = IMultisigENS__factory;
var _abi = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "msigAddress",
    type: "address"
  }, {
    indexed: false,
    internalType: "string",
    name: "name",
    type: "string"
  }],
  name: "SetContractName",
  type: "event"
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "msigDeployerAddress",
    type: "address"
  }],
  name: "SetMultisigDeployerAddress",
  type: "event"
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "userAddress",
    type: "address"
  }, {
    indexed: false,
    internalType: "string",
    name: "name",
    type: "string"
  }],
  name: "SetUserName",
  type: "event"
}, {
  inputs: [{
    internalType: "string",
    name: "_name",
    type: "string"
  }],
  name: "setMultisigName",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "string",
    name: "_name",
    type: "string"
  }],
  name: "setUserName",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_msigDeployerAddress",
    type: "address"
  }],
  name: "setMultisigDeployerAddress",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [],
  name: "getMultisigDeployerAddress",
  outputs: [{
    internalType: "address",
    name: "",
    type: "address"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_msig",
    type: "address"
  }],
  name: "getMultisigName",
  outputs: [{
    internalType: "string",
    name: "",
    type: "string"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_user",
    type: "address"
  }],
  name: "getUserName",
  outputs: [{
    internalType: "string",
    name: "",
    type: "string"
  }],
  stateMutability: "view",
  type: "function"
}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,