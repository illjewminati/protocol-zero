/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IPenalizerContract
  extends Truffle.Contract<IPenalizerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPenalizerInstance>;
}

export interface CommitAdded {
  name: "CommitAdded";
  args: {
    sender: string;
    commitHash: string;
    readyBlockNumber: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents = CommitAdded;

export interface IPenalizerInstance extends Truffle.ContractInstance {
  commit: {
    (commitHash: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      commitHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      commitHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      commitHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  penalizeRepeatedNonce: {
    (
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string,
      randomValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string,
      randomValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string,
      randomValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string,
      randomValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  penalizeIllegalTransaction: {
    (
      unsignedTx: string,
      signature: string,
      hub: string,
      randomValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      unsignedTx: string,
      signature: string,
      hub: string,
      randomValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unsignedTx: string,
      signature: string,
      hub: string,
      randomValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unsignedTx: string,
      signature: string,
      hub: string,
      randomValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPenalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;

  penalizeBlockDelay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  penalizeBlockExpiration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    commit: {
      (commitHash: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        commitHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        commitHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        commitHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    penalizeRepeatedNonce: {
      (
        unsignedTx1: string,
        signature1: string,
        unsignedTx2: string,
        signature2: string,
        hub: string,
        randomValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        unsignedTx1: string,
        signature1: string,
        unsignedTx2: string,
        signature2: string,
        hub: string,
        randomValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        unsignedTx1: string,
        signature1: string,
        unsignedTx2: string,
        signature2: string,
        hub: string,
        randomValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        unsignedTx1: string,
        signature1: string,
        unsignedTx2: string,
        signature2: string,
        hub: string,
        randomValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    penalizeIllegalTransaction: {
      (
        unsignedTx: string,
        signature: string,
        hub: string,
        randomValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        unsignedTx: string,
        signature: string,
        hub: string,
        randomValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        unsignedTx: string,
        signature: string,
        hub: string,
        randomValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        unsignedTx: string,
        signature: string,
        hub: string,
        randomValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    versionPenalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;

    penalizeBlockDelay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    penalizeBlockExpiration(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
