"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RootChainManagerStorage = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _contracts = require("@ethersproject/contracts");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var RootChainManagerStorage = /*#__PURE__*/function (_Contract) {
  (0, _inherits2["default"])(RootChainManagerStorage, _Contract);

  var _super = _createSuper(RootChainManagerStorage);

  function RootChainManagerStorage() {
    var _this;

    (0, _classCallCheck2["default"])(this, RootChainManagerStorage);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "interface", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functions", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "callStatic", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filters", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "estimateGas", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "populateTransaction", void 0);
    return _this;
  }

  return RootChainManagerStorage;
}(_contracts.Contract);

exports.RootChainManagerStorage = RootChainManagerStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9Sb290Q2hhaW5NYW5hZ2VyU3RvcmFnZS5kLnRzIl0sIm5hbWVzIjpbIlJvb3RDaGFpbk1hbmFnZXJTdG9yYWdlIiwiQ29udHJhY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7SUFxRWFBLHVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBQWdDQyxtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IHtcbiAgZXRoZXJzLFxuICBFdmVudEZpbHRlcixcbiAgU2lnbmVyLFxuICBCaWdOdW1iZXIsXG4gIEJpZ051bWJlcmlzaCxcbiAgUG9wdWxhdGVkVHJhbnNhY3Rpb24sXG59IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7XG4gIENvbnRyYWN0LFxuICBDb250cmFjdFRyYW5zYWN0aW9uLFxuICBDYWxsT3ZlcnJpZGVzLFxufSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29udHJhY3RzXCI7XG5pbXBvcnQgeyBCeXRlc0xpa2UgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IExpc3RlbmVyLCBQcm92aWRlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcnNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uRnJhZ21lbnQsIEV2ZW50RnJhZ21lbnQsIFJlc3VsdCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYmlcIjtcblxuaW50ZXJmYWNlIFJvb3RDaGFpbk1hbmFnZXJTdG9yYWdlSW50ZXJmYWNlIGV4dGVuZHMgZXRoZXJzLnV0aWxzLkludGVyZmFjZSB7XG4gIGZ1bmN0aW9uczoge1xuICAgIFwiY2hpbGRDaGFpbk1hbmFnZXJBZGRyZXNzKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImNoaWxkVG9Sb290VG9rZW4oYWRkcmVzcylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInByb2Nlc3NlZEV4aXRzKGJ5dGVzMzIpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJyb290VG9DaGlsZFRva2VuKGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJ0b2tlblRvVHlwZShhZGRyZXNzKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwidHlwZVRvUHJlZGljYXRlKGJ5dGVzMzIpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gIH07XG5cbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiY2hpbGRDaGFpbk1hbmFnZXJBZGRyZXNzXCIsXG4gICAgdmFsdWVzPzogdW5kZWZpbmVkXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiY2hpbGRUb1Jvb3RUb2tlblwiLFxuICAgIHZhbHVlczogW3N0cmluZ11cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJwcm9jZXNzZWRFeGl0c1wiLFxuICAgIHZhbHVlczogW0J5dGVzTGlrZV1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJyb290VG9DaGlsZFRva2VuXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcInRva2VuVG9UeXBlXCIsIHZhbHVlczogW3N0cmluZ10pOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInR5cGVUb1ByZWRpY2F0ZVwiLFxuICAgIHZhbHVlczogW0J5dGVzTGlrZV1cbiAgKTogc3RyaW5nO1xuXG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiY2hpbGRDaGFpbk1hbmFnZXJBZGRyZXNzXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJjaGlsZFRvUm9vdFRva2VuXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJwcm9jZXNzZWRFeGl0c1wiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwicm9vdFRvQ2hpbGRUb2tlblwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwidG9rZW5Ub1R5cGVcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInR5cGVUb1ByZWRpY2F0ZVwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG5cbiAgZXZlbnRzOiB7fTtcbn1cblxuZXhwb3J0IGNsYXNzIFJvb3RDaGFpbk1hbmFnZXJTdG9yYWdlIGV4dGVuZHMgQ29udHJhY3Qge1xuICBjb25uZWN0KHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyIHwgc3RyaW5nKTogdGhpcztcbiAgYXR0YWNoKGFkZHJlc3NPck5hbWU6IHN0cmluZyk6IHRoaXM7XG4gIGRlcGxveWVkKCk6IFByb21pc2U8dGhpcz47XG5cbiAgb24oZXZlbnQ6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuICBvbmNlKGV2ZW50OiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcbiAgYWRkTGlzdGVuZXIoZXZlbnROYW1lOiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZTogRXZlbnRGaWx0ZXIgfCBzdHJpbmcpOiB0aGlzO1xuICByZW1vdmVMaXN0ZW5lcihldmVudE5hbWU6IGFueSwgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcblxuICBpbnRlcmZhY2U6IFJvb3RDaGFpbk1hbmFnZXJTdG9yYWdlSW50ZXJmYWNlO1xuXG4gIGZ1bmN0aW9uczoge1xuICAgIGNoaWxkQ2hhaW5NYW5hZ2VyQWRkcmVzcyhvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICBcImNoaWxkQ2hhaW5NYW5hZ2VyQWRkcmVzcygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgY2hpbGRUb1Jvb3RUb2tlbihcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIFwiY2hpbGRUb1Jvb3RUb2tlbihhZGRyZXNzKVwiKFxuICAgICAgYXJnMDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgcHJvY2Vzc2VkRXhpdHMoXG4gICAgICBhcmcwOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgXCJwcm9jZXNzZWRFeGl0cyhieXRlczMyKVwiKFxuICAgICAgYXJnMDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5dPjtcblxuICAgIHJvb3RUb0NoaWxkVG9rZW4oXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICBcInJvb3RUb0NoaWxkVG9rZW4oYWRkcmVzcylcIihcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIHRva2VuVG9UeXBlKGFyZzA6IHN0cmluZywgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgXCJ0b2tlblRvVHlwZShhZGRyZXNzKVwiKFxuICAgICAgYXJnMDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgdHlwZVRvUHJlZGljYXRlKFxuICAgICAgYXJnMDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgXCJ0eXBlVG9QcmVkaWNhdGUoYnl0ZXMzMilcIihcbiAgICAgIGFyZzA6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmddPjtcbiAgfTtcblxuICBjaGlsZENoYWluTWFuYWdlckFkZHJlc3Mob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBcImNoaWxkQ2hhaW5NYW5hZ2VyQWRkcmVzcygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBjaGlsZFRvUm9vdFRva2VuKGFyZzA6IHN0cmluZywgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBcImNoaWxkVG9Sb290VG9rZW4oYWRkcmVzcylcIihcbiAgICBhcmcwOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgcHJvY2Vzc2VkRXhpdHMoYXJnMDogQnl0ZXNMaWtlLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxib29sZWFuPjtcblxuICBcInByb2Nlc3NlZEV4aXRzKGJ5dGVzMzIpXCIoXG4gICAgYXJnMDogQnl0ZXNMaWtlLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICByb290VG9DaGlsZFRva2VuKGFyZzA6IHN0cmluZywgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBcInJvb3RUb0NoaWxkVG9rZW4oYWRkcmVzcylcIihcbiAgICBhcmcwOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgdG9rZW5Ub1R5cGUoYXJnMDogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIFwidG9rZW5Ub1R5cGUoYWRkcmVzcylcIihcbiAgICBhcmcwOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgdHlwZVRvUHJlZGljYXRlKGFyZzA6IEJ5dGVzTGlrZSwgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBcInR5cGVUb1ByZWRpY2F0ZShieXRlczMyKVwiKFxuICAgIGFyZzA6IEJ5dGVzTGlrZSxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8c3RyaW5nPjtcblxuICBjYWxsU3RhdGljOiB7XG4gICAgY2hpbGRDaGFpbk1hbmFnZXJBZGRyZXNzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBcImNoaWxkQ2hhaW5NYW5hZ2VyQWRkcmVzcygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIGNoaWxkVG9Sb290VG9rZW4oYXJnMDogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgXCJjaGlsZFRvUm9vdFRva2VuKGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgcHJvY2Vzc2VkRXhpdHMoXG4gICAgICBhcmcwOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIFwicHJvY2Vzc2VkRXhpdHMoYnl0ZXMzMilcIihcbiAgICAgIGFyZzA6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgcm9vdFRvQ2hpbGRUb2tlbihhcmcwOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBcInJvb3RUb0NoaWxkVG9rZW4oYWRkcmVzcylcIihcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICB0b2tlblRvVHlwZShhcmcwOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBcInRva2VuVG9UeXBlKGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgdHlwZVRvUHJlZGljYXRlKFxuICAgICAgYXJnMDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIFwidHlwZVRvUHJlZGljYXRlKGJ5dGVzMzIpXCIoXG4gICAgICBhcmcwOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+O1xuICB9O1xuXG4gIGZpbHRlcnM6IHt9O1xuXG4gIGVzdGltYXRlR2FzOiB7XG4gICAgY2hpbGRDaGFpbk1hbmFnZXJBZGRyZXNzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImNoaWxkQ2hhaW5NYW5hZ2VyQWRkcmVzcygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGNoaWxkVG9Sb290VG9rZW4oXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJjaGlsZFRvUm9vdFRva2VuKGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgcHJvY2Vzc2VkRXhpdHMoXG4gICAgICBhcmcwOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJwcm9jZXNzZWRFeGl0cyhieXRlczMyKVwiKFxuICAgICAgYXJnMDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIHJvb3RUb0NoaWxkVG9rZW4oXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJyb290VG9DaGlsZFRva2VuKGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgdG9rZW5Ub1R5cGUoYXJnMDogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJ0b2tlblRvVHlwZShhZGRyZXNzKVwiKFxuICAgICAgYXJnMDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIHR5cGVUb1ByZWRpY2F0ZShcbiAgICAgIGFyZzA6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcInR5cGVUb1ByZWRpY2F0ZShieXRlczMyKVwiKFxuICAgICAgYXJnMDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcbiAgfTtcblxuICBwb3B1bGF0ZVRyYW5zYWN0aW9uOiB7XG4gICAgY2hpbGRDaGFpbk1hbmFnZXJBZGRyZXNzKFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJjaGlsZENoYWluTWFuYWdlckFkZHJlc3MoKVwiKFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgY2hpbGRUb1Jvb3RUb2tlbihcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiY2hpbGRUb1Jvb3RUb2tlbihhZGRyZXNzKVwiKFxuICAgICAgYXJnMDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgcHJvY2Vzc2VkRXhpdHMoXG4gICAgICBhcmcwOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcInByb2Nlc3NlZEV4aXRzKGJ5dGVzMzIpXCIoXG4gICAgICBhcmcwOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICByb290VG9DaGlsZFRva2VuKFxuICAgICAgYXJnMDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJyb290VG9DaGlsZFRva2VuKGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICB0b2tlblRvVHlwZShcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwidG9rZW5Ub1R5cGUoYWRkcmVzcylcIihcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIHR5cGVUb1ByZWRpY2F0ZShcbiAgICAgIGFyZzA6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwidHlwZVRvUHJlZGljYXRlKGJ5dGVzMzIpXCIoXG4gICAgICBhcmcwOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG4gIH07XG59XG4iXX0=