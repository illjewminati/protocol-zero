{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/account/uniswap_swap.tsx\";\nimport React, { useEffect } from 'react';\nimport { ChainId, ETH } from 'uniswap-dapp-integration-shared';\nimport UniswapReact from 'uniswap-react';\n\nfunction YourComponent() {\n  const [uniswapDappSharedLogicContext, setUniswapDappSharedLogicContext] = React.useState(undefined);\n  useEffect(() => {\n    (async () => {\n      // MetaMask example\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // basic config!\n\n      const uniswapDappSharedLogicContext = {\n        supportedNetworkTokens: [{\n          chainId: ChainId.GÖRLI,\n          defaultInputToken: ETH.MAINNET().contractAddress,\n          defaultOutputToken: '0xde30da39c46104798bb5aa3fe8b9e0e1f348163f',\n          supportedTokens: [{\n            contractAddress: ETH.MAINNET().contractAddress\n          }, {\n            contractAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'\n          }, {\n            contractAddress: '0xdac17f958d2ee523a2206206994597c13d831ec7'\n          }, {\n            contractAddress: '0x1985365e9f78359a9B6AD760e32412f4a445E862'\n          }, {\n            contractAddress: '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9'\n          }, {\n            contractAddress: '0xDe30da39c46104798bB5aA3fe8B9e0e1F348163F'\n          }]\n        }, {\n          chainId: ChainId.RINKEBY,\n          defaultInputToken: ETH.RINKEBY().contractAddress,\n          defaultOutputToken: '0xef0e839cf88e47be676e72d5a9cb6ced99fad1cf',\n          supportedTokens: [{\n            contractAddress: ETH.RINKEBY().contractAddress\n          }, {\n            contractAddress: '0xef0e839cf88e47be676e72d5a9cb6ced99fad1cf'\n          }]\n        }],\n        ethereumAddress: accounts[0],\n        ethereumProvider: window.ethereum\n      };\n      setUniswapDappSharedLogicContext(uniswapDappSharedLogicContext);\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: uniswapDappSharedLogicContext !== undefined && /*#__PURE__*/_jsxDEV(UniswapReact, {\n      uniswapDappSharedLogicContext: uniswapDappSharedLogicContext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\nexport default YourComponent;","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/account/uniswap_swap.tsx"],"names":["React","useEffect","ChainId","ETH","UniswapReact","YourComponent","uniswapDappSharedLogicContext","setUniswapDappSharedLogicContext","useState","undefined","accounts","window","ethereum","request","method","supportedNetworkTokens","chainId","GÖRLI","defaultInputToken","MAINNET","contractAddress","defaultOutputToken","supportedTokens","RINKEBY","ethereumAddress","ethereumProvider"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,OADF,EAEEC,GAFF,QAIO,iCAJP;AAKA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,SAASC,aAAT,GAAyB;AACvB,QAAM,CAACC,6BAAD,EAAgCC,gCAAhC,IACJP,KAAK,CAACQ,QAAN,CAA0DC,SAA1D,CADF;AAGAR,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX;AACA,YAAMS,QAAQ,GAAG,MAAOC,MAAD,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC;AACtDC,QAAAA,MAAM,EAAE;AAD8C,OAAjC,CAAvB,CAFW,CAMX;;AACA,YAAMR,6BAA4D,GAAG;AACnES,QAAAA,sBAAsB,EAAE,CACtB;AACEC,UAAAA,OAAO,EAAEd,OAAO,CAACe,KADnB;AAEEC,UAAAA,iBAAiB,EAAEf,GAAG,CAACgB,OAAJ,GAAcC,eAFnC;AAGEC,UAAAA,kBAAkB,EAAE,4CAHtB;AAIEC,UAAAA,eAAe,EAAE,CACf;AAAEF,YAAAA,eAAe,EAAEjB,GAAG,CAACgB,OAAJ,GAAcC;AAAjC,WADe,EAEf;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WAFe,EAGf;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WAHe,EAIf;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WAJe,EAKf;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WALe,EAMf;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WANe;AAJnB,SADsB,EActB;AACEJ,UAAAA,OAAO,EAAEd,OAAO,CAACqB,OADnB;AAEEL,UAAAA,iBAAiB,EAAEf,GAAG,CAACoB,OAAJ,GAAcH,eAFnC;AAGEC,UAAAA,kBAAkB,EAAE,4CAHtB;AAIEC,UAAAA,eAAe,EAAE,CACf;AAAEF,YAAAA,eAAe,EAAEjB,GAAG,CAACoB,OAAJ,GAAcH;AAAjC,WADe,EAEf;AAAEA,YAAAA,eAAe,EAAE;AAAnB,WAFe;AAJnB,SAdsB,CAD2C;AAyBnEI,QAAAA,eAAe,EAAEd,QAAQ,CAAC,CAAD,CAzB0C;AA0BnEe,QAAAA,gBAAgB,EAAGd,MAAD,CAAgBC;AA1BiC,OAArE;AA6BAL,MAAAA,gCAAgC,CAACD,6BAAD,CAAhC;AACD,KArCD;AAsCD,GAvCQ,EAuCN,EAvCM,CAAT;AAyCA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACGA,6BAA6B,KAAKG,SAAlC,iBACC,QAAC,YAAD;AACE,MAAA,6BAA6B,EAAEH;AADjC;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AAED,eAAeD,aAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  ChainId,\n  ETH,\n  UniswapDappSharedLogicContext,\n} from 'uniswap-dapp-integration-shared';\nimport UniswapReact from 'uniswap-react';\n\nfunction YourComponent() {\n  const [uniswapDappSharedLogicContext, setUniswapDappSharedLogicContext] =\n    React.useState<undefined | UniswapDappSharedLogicContext>(undefined);\n\n  useEffect(() => {\n    (async () => {\n      // MetaMask example\n      const accounts = await (window as any).ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      // basic config!\n      const uniswapDappSharedLogicContext: UniswapDappSharedLogicContext = {\n        supportedNetworkTokens: [\n          {\n            chainId: ChainId.GÖRLI,\n            defaultInputToken: ETH.MAINNET().contractAddress,\n            defaultOutputToken: '0xde30da39c46104798bb5aa3fe8b9e0e1f348163f',\n            supportedTokens: [\n              { contractAddress: ETH.MAINNET().contractAddress },\n              { contractAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984' },\n              { contractAddress: '0xdac17f958d2ee523a2206206994597c13d831ec7' },\n              { contractAddress: '0x1985365e9f78359a9B6AD760e32412f4a445E862' },\n              { contractAddress: '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9' },\n              { contractAddress: '0xDe30da39c46104798bB5aA3fe8B9e0e1F348163F' },\n            ],\n          },\n          {\n            chainId: ChainId.RINKEBY,\n            defaultInputToken: ETH.RINKEBY().contractAddress,\n            defaultOutputToken: '0xef0e839cf88e47be676e72d5a9cb6ced99fad1cf',\n            supportedTokens: [\n              { contractAddress: ETH.RINKEBY().contractAddress },\n              { contractAddress: '0xef0e839cf88e47be676e72d5a9cb6ced99fad1cf' },\n            ],\n          },\n        ],\n        ethereumAddress: accounts[0],\n        ethereumProvider: (window as any).ethereum,\n      };\n\n      setUniswapDappSharedLogicContext(uniswapDappSharedLogicContext);\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {uniswapDappSharedLogicContext !== undefined && (\n        <UniswapReact\n          uniswapDappSharedLogicContext={uniswapDappSharedLogicContext}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default YourComponent;"]},"metadata":{},"sourceType":"module"}