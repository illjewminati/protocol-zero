// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface ICompanies {

    /*
     *  Events
     */
    event NewCompany(address indexed company, string name);
    event RemoveCompany(address indexed company);
    event NewSignatorie(address indexed company, address signatorie);
    event RemoveSignatorie(address indexed company, address signatorie);
    event ChangeCompanyName(string lastName, string newName);
    event ChangeCompanyIPFS(bytes32 lastIPFS, bytes32 newIPFS);

    struct CompanyData {
        uint256 createdAt;
        address[] signatories;
        string name;
        bytes32 ipfsLink;
    }


    function addCompany(address _company, string calldata _name, bytes32 _ipfsLink) external;

    function removeCompany(address _company) external;

    function addSignatorie(address _signatorie) external;

    function removeSignatorie(address _signatorie) external;

    function setCompanyData(string calldata _name, bytes32 _ipfsLink) external;

    /**
    * Getters
    */

    function getAllCompanies() external view returns(address[] memory);

    function isAddressCompany(address _company) external view returns(bool);

    function getCompanyBySignatorie(address _signatorie) external view returns(address);

    function getCompanyByAddress(address _company) external view returns(CompanyData memory, bool);

    function getCompanyByName(string memory _stringName) external view returns(CompanyData memory, bool);

    function isSignatorieAuthorized(address _signatorie) external view returns(bool);
}