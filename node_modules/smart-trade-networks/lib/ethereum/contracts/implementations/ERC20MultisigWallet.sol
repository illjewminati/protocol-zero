// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./MultisigWallet.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./FeeCollector.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

/// @author Santiago Del Valle - <sdelvalle57@gmail.com>
contract ERC20MultisigWallet is MultisigWallet {
    using SafeMath for uint256;

    event WithDrawal(address indexed _token, address indexed _to, uint256 _amount);

    FeeCollector private _feeCollector;

    constructor(address[] memory _owners, uint256 _required, address _feeCollectorAddress) MultisigWallet(_owners, _required) {
        require(_feeCollectorAddress != address(0), "Fee Collector cannot be 0");
        _feeCollector = FeeCollector(_feeCollectorAddress);
    }

    function getFee() public view returns(uint256) {
        return _feeCollector.getFeeByMultisig(address(this));
    }

    function getFeeCollector() public view returns(address) {
        return address(_feeCollector);
    }

    function getWithdrawWithFee(uint256 _amount) public view returns(uint256, uint256) {
        uint256 fee = getFee();
        uint256 amountToUser = _amount.sub(_amount.mul(fee).div(1000)); // amount - (amount*fee/100)
        uint256 amountToCollector = _amount - amountToUser;
        return (amountToUser, amountToCollector);
    }

    /// @dev Withdraws token balance from the wallet
    /// @param _token Address of ERC20 token to withdraw.
    /// @param _to Address of receiver
    /// @param _amount Amount to withdraw
    function withdraw(address _token, address _to, uint256 _amount) public onlyWallet {
        require(_token != address(0), "Token address cannot be 0");
        require(_to != address(0), "recipient address cannot be 0");
        require(_amount > 0, "amount cannot be 0");

        require(ERC20(_token).balanceOf(address(this)) > 0, "Contract does not have any balance");
        require(ERC20(_token).balanceOf(address(this)) >= _amount, "Contract does not have such balance");

        /** transfer amount */
        /** transfer fee to feeCollector */
        (uint256 transferAmount, uint256 feeAmount) = getWithdrawWithFee(_amount);
        ERC20(_token).transfer(_to, transferAmount);
        ERC20(_token).transfer(address(_feeCollector), feeAmount);
        emit WithDrawal(_token, _to, transferAmount);
    }
}

