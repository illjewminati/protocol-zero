{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/common/dropdown.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nexport let DropdownPositions;\n\n(function (DropdownPositions) {\n  DropdownPositions[DropdownPositions[\"Center\"] = 0] = \"Center\";\n  DropdownPositions[DropdownPositions[\"Left\"] = 1] = \"Left\";\n  DropdownPositions[DropdownPositions[\"Right\"] = 2] = \"Right\";\n})(DropdownPositions || (DropdownPositions = {}));\n\nexport class Dropdown extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isOpen: false\n    });\n\n    _defineProperty(this, \"_wrapperRef\", void 0);\n\n    _defineProperty(this, \"render\", () => {\n      const _this$props = this.props,\n            {\n        header,\n        body,\n        horizontalPosition = DropdownPositions.Left,\n        bottom\n      } = _this$props,\n            restProps = _objectWithoutProperties(_this$props, [\"header\", \"body\", \"horizontalPosition\", \"bottom\"]);\n\n      return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n        className: \"dropdown-wrapper\",\n        ref: this._setWrapperRef\n      }, restProps), {}, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-wrapper-header\",\n          onClick: this._toggleDropdown,\n          children: header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this), this.state.isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `dropdown-wrapper-body ${bottom ? \"is-bottom\" : \"\"}`,\n          onClick: this._closeDropdownBody,\n          children: body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this) : null]\n      }), void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this);\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      document.addEventListener('mousedown', this._handleClickOutside);\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      document.removeEventListener('mousedown', this._handleClickOutside);\n    });\n\n    _defineProperty(this, \"closeDropdown\", () => {\n      this.setState({\n        isOpen: false\n      });\n    });\n\n    _defineProperty(this, \"_setWrapperRef\", node => {\n      this._wrapperRef = node;\n    });\n\n    _defineProperty(this, \"_handleClickOutside\", event => {\n      const {\n        close = true\n      } = this.props;\n\n      if (this._wrapperRef && !this._wrapperRef.contains(event.target) && close) {\n        this.closeDropdown();\n      }\n    });\n\n    _defineProperty(this, \"_toggleDropdown\", () => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    });\n\n    _defineProperty(this, \"_closeDropdownBody\", () => {\n      const {\n        shouldCloseDropdownOnClickInside = false\n      } = this.props;\n\n      if (shouldCloseDropdownOnClickInside) {\n        this.closeDropdown();\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/common/dropdown.tsx"],"names":["React","DropdownPositions","Dropdown","Component","isOpen","props","header","body","horizontalPosition","Left","bottom","restProps","_setWrapperRef","_toggleDropdown","state","_closeDropdownBody","document","addEventListener","_handleClickOutside","removeEventListener","setState","node","_wrapperRef","event","close","contains","target","closeDropdown","shouldCloseDropdownOnClickInside"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAsC,OAAtC;AAEA,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;GAAAA,iB,KAAAA,iB;;AAuBZ,OAAO,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAqD;AAAA;AAAA;;AAAA,mCACzB;AAC3BC,MAAAA,MAAM,EAAE;AADmB,KADyB;;AAAA;;AAAA,oCAMxC,MAAM;AAClB,0BAA4F,KAAKC,KAAjG;AAAA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA,kBAAkB,GAAGP,iBAAiB,CAACQ,IAAvD;AAA6DC,QAAAA;AAA7D,OAAN;AAAA,YAA8EC,SAA9E;;AAEA,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAmC,QAAA,GAAG,EAAE,KAAKC;AAA7C,SAAiED,SAAjE;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAyC,UAAA,OAAO,EAAE,KAAKE,eAAvD;AAAA,oBAAyEP;AAAzE;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEK,KAAKQ,KAAL,CAAWV,MAAX,gBACG;AAAK,UAAA,SAAS,EAAG,yBAAwBM,MAAM,GAAG,WAAH,GAAiB,EAAG,EAAnE;AAAsE,UAAA,OAAO,EAAE,KAAKK,kBAApF;AAAA,oBACKR;AADL;AAAA;AAAA;AAAA;AAAA,gBADH,GAIG,IANR;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH,KAnBuD;;AAAA,+CAqB7B,MAAM;AAC7BS,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuC,KAAKC,mBAA5C;AACH,KAvBuD;;AAAA,kDAyB1B,MAAM;AAChCF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,WAA7B,EAA0C,KAAKD,mBAA/C;AACH,KA3BuD;;AAAA,2CA6BjC,MAAM;AACzB,WAAKE,QAAL,CAAc;AAAEhB,QAAAA,MAAM,EAAE;AAAV,OAAd;AACH,KA/BuD;;AAAA,4CAiCrBiB,IAAD,IAAe;AAC7C,WAAKC,WAAL,GAAmBD,IAAnB;AACH,KAnCuD;;AAAA,iDAqChBE,KAAD,IAAgB;AACnD,YAAM;AAAEC,QAAAA,KAAK,GAAG;AAAV,UAAmB,KAAKnB,KAA9B;;AACA,UAAI,KAAKiB,WAAL,IAAoB,CAAC,KAAKA,WAAL,CAAiBG,QAAjB,CAA0BF,KAAK,CAACG,MAAhC,CAArB,IAAgEF,KAApE,EAA2E;AACvE,aAAKG,aAAL;AACH;AACJ,KA1CuD;;AAAA,6CA4CrB,MAAM;AACrC,WAAKP,QAAL,CAAc;AAAEhB,QAAAA,MAAM,EAAE,CAAC,KAAKU,KAAL,CAAWV;AAAtB,OAAd;AACH,KA9CuD;;AAAA,gDAgDlB,MAAM;AACxC,YAAM;AAAEwB,QAAAA,gCAAgC,GAAG;AAArC,UAA+C,KAAKvB,KAA1D;;AACA,UAAIuB,gCAAJ,EAAsC;AAClC,aAAKD,aAAL;AACH;AACJ,KArDuD;AAAA;;AAAA","sourcesContent":["import React, { HTMLAttributes } from 'react';\n\nexport enum DropdownPositions {\n    Center,\n    Left,\n    Right,\n}\n\ninterface DropdownWrapperBodyProps {\n    horizontalPosition?: DropdownPositions;\n    bottom?: boolean;\n}\n\ninterface Props extends HTMLAttributes<HTMLDivElement>, DropdownWrapperBodyProps {\n    body: React.ReactNode;\n    header: React.ReactNode;\n    close?: boolean;\n    shouldCloseDropdownOnClickInside?: boolean;\n    bottom?: boolean;\n}\n\ninterface State {\n    isOpen: boolean;\n}\n\nexport class Dropdown extends React.Component<Props, State> {\n    public readonly state: State = {\n        isOpen: false,\n    };\n    private _wrapperRef: any;\n\n    public render = () => {\n        const { header, body, horizontalPosition = DropdownPositions.Left, bottom, ...restProps } = this.props;\n\n        return (\n            <div className='dropdown-wrapper'  ref={this._setWrapperRef} {...restProps}>\n                <div className=\"dropdown-wrapper-header\" onClick={this._toggleDropdown}>{header}</div>\n                {this.state.isOpen ? (\n                    <div className={`dropdown-wrapper-body ${bottom ? \"is-bottom\" : \"\"}`} onClick={this._closeDropdownBody}>\n                        {body}\n                    </div>\n                ) : null}\n            </div>\n        );\n    };\n\n    public componentDidMount = () => {\n        document.addEventListener('mousedown', this._handleClickOutside);\n    };\n\n    public componentWillUnmount = () => {\n        document.removeEventListener('mousedown', this._handleClickOutside);\n    };\n\n    public closeDropdown = () => {\n        this.setState({ isOpen: false });\n    };\n\n    private readonly _setWrapperRef = (node: any) => {\n        this._wrapperRef = node;\n    };\n\n    private readonly _handleClickOutside = (event: any) => {\n        const { close = true } = this.props;\n        if (this._wrapperRef && !this._wrapperRef.contains(event.target) && close) {\n            this.closeDropdown();\n        }\n    };\n\n    private readonly _toggleDropdown = () => {\n        this.setState({ isOpen: !this.state.isOpen });\n    };\n\n    private readonly _closeDropdownBody = () => {\n        const { shouldCloseDropdownOnClickInside = false } = this.props;\n        if (shouldCloseDropdownOnClickInside) {\n            this.closeDropdown();\n        }\n    };\n}"]},"metadata":{},"sourceType":"module"}