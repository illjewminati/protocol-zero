"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERC20MultisigWallet = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _contracts = require("@ethersproject/contracts");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ERC20MultisigWallet = /*#__PURE__*/function (_Contract) {
  (0, _inherits2["default"])(ERC20MultisigWallet, _Contract);

  var _super = _createSuper(ERC20MultisigWallet);

  function ERC20MultisigWallet() {
    var _this;

    (0, _classCallCheck2["default"])(this, ERC20MultisigWallet);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "interface", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functions", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "callStatic", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filters", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "estimateGas", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "populateTransaction", void 0);
    return _this;
  }

  return ERC20MultisigWallet;
}(_contracts.Contract);

exports.ERC20MultisigWallet = ERC20MultisigWallet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9FUkMyME11bHRpc2lnV2FsbGV0LmQudHMiXSwibmFtZXMiOlsiRVJDMjBNdWx0aXNpZ1dhbGxldCIsIkNvbnRyYWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7O0lBNE9hQSxtQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQUE0QkMsbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCB7XG4gIGV0aGVycyxcbiAgRXZlbnRGaWx0ZXIsXG4gIFNpZ25lcixcbiAgQmlnTnVtYmVyLFxuICBCaWdOdW1iZXJpc2gsXG4gIFBvcHVsYXRlZFRyYW5zYWN0aW9uLFxufSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQge1xuICBDb250cmFjdCxcbiAgQ29udHJhY3RUcmFuc2FjdGlvbixcbiAgT3ZlcnJpZGVzLFxuICBDYWxsT3ZlcnJpZGVzLFxufSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29udHJhY3RzXCI7XG5pbXBvcnQgeyBCeXRlc0xpa2UgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IExpc3RlbmVyLCBQcm92aWRlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcnNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uRnJhZ21lbnQsIEV2ZW50RnJhZ21lbnQsIFJlc3VsdCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYmlcIjtcblxuaW50ZXJmYWNlIEVSQzIwTXVsdGlzaWdXYWxsZXRJbnRlcmZhY2UgZXh0ZW5kcyBldGhlcnMudXRpbHMuSW50ZXJmYWNlIHtcbiAgZnVuY3Rpb25zOiB7XG4gICAgXCJNQVhfT1dORVJfQ09VTlQoKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiYWRkT3duZXIoYWRkcmVzcylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImNoYW5nZVJlcXVpcmVtZW50KHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJjb25maXJtVHJhbnNhY3Rpb24odWludDI1NilcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImNvbmZpcm1hdGlvbnModWludDI1NixhZGRyZXNzKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiZXhlY3V0ZVRyYW5zYWN0aW9uKHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJnZXRDb25maXJtYXRpb25Db3VudCh1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiZ2V0Q29uZmlybWF0aW9ucyh1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiZ2V0T3duZXJzKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImdldFRyYW5zYWN0aW9uKHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJnZXRUcmFuc2FjdGlvbkNvdW50KGJvb2wsYm9vbClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImdldFRyYW5zYWN0aW9uSWRzKHVpbnQyNTYsdWludDI1Nixib29sLGJvb2wpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJpc0NvbmZpcm1lZCh1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiaXNPd25lcihhZGRyZXNzKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwib3duZXJzKHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJyZW1vdmVPd25lcihhZGRyZXNzKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwicmVwbGFjZU93bmVyKGFkZHJlc3MsYWRkcmVzcylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInJlcXVpcmVkKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInJldm9rZUNvbmZpcm1hdGlvbih1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwic3VibWl0VHJhbnNhY3Rpb24oYWRkcmVzcyx1aW50MjU2LGJ5dGVzLHN0cmluZylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInRyYW5zYWN0aW9uQ291bnQoKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwidHJhbnNhY3Rpb25zKHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJnZXRGZWUoKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiZ2V0RmVlQ29sbGVjdG9yKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImdldFdpdGhkcmF3V2l0aEZlZSh1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwid2l0aGRyYXcoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gIH07XG5cbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiTUFYX09XTkVSX0NPVU5UXCIsXG4gICAgdmFsdWVzPzogdW5kZWZpbmVkXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQ6IFwiYWRkT3duZXJcIiwgdmFsdWVzOiBbc3RyaW5nXSk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiY2hhbmdlUmVxdWlyZW1lbnRcIixcbiAgICB2YWx1ZXM6IFtCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiY29uZmlybVRyYW5zYWN0aW9uXCIsXG4gICAgdmFsdWVzOiBbQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImNvbmZpcm1hdGlvbnNcIixcbiAgICB2YWx1ZXM6IFtCaWdOdW1iZXJpc2gsIHN0cmluZ11cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJleGVjdXRlVHJhbnNhY3Rpb25cIixcbiAgICB2YWx1ZXM6IFtCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0Q29uZmlybWF0aW9uQ291bnRcIixcbiAgICB2YWx1ZXM6IFtCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0Q29uZmlybWF0aW9uc1wiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoZnVuY3Rpb25GcmFnbWVudDogXCJnZXRPd25lcnNcIiwgdmFsdWVzPzogdW5kZWZpbmVkKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRUcmFuc2FjdGlvblwiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRUcmFuc2FjdGlvbkNvdW50XCIsXG4gICAgdmFsdWVzOiBbYm9vbGVhbiwgYm9vbGVhbl1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRUcmFuc2FjdGlvbklkc1wiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaCwgQmlnTnVtYmVyaXNoLCBib29sZWFuLCBib29sZWFuXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImlzQ29uZmlybWVkXCIsXG4gICAgdmFsdWVzOiBbQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcImlzT3duZXJcIiwgdmFsdWVzOiBbc3RyaW5nXSk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwib3duZXJzXCIsXG4gICAgdmFsdWVzOiBbQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcInJlbW92ZU93bmVyXCIsIHZhbHVlczogW3N0cmluZ10pOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInJlcGxhY2VPd25lclwiLFxuICAgIHZhbHVlczogW3N0cmluZywgc3RyaW5nXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcInJlcXVpcmVkXCIsIHZhbHVlcz86IHVuZGVmaW5lZCk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwicmV2b2tlQ29uZmlybWF0aW9uXCIsXG4gICAgdmFsdWVzOiBbQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInN1Ym1pdFRyYW5zYWN0aW9uXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBCaWdOdW1iZXJpc2gsIEJ5dGVzTGlrZSwgc3RyaW5nXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInRyYW5zYWN0aW9uQ291bnRcIixcbiAgICB2YWx1ZXM/OiB1bmRlZmluZWRcbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0cmFuc2FjdGlvbnNcIixcbiAgICB2YWx1ZXM6IFtCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0RmVlXCIsIHZhbHVlcz86IHVuZGVmaW5lZCk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0RmVlQ29sbGVjdG9yXCIsXG4gICAgdmFsdWVzPzogdW5kZWZpbmVkXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0V2l0aGRyYXdXaXRoRmVlXCIsXG4gICAgdmFsdWVzOiBbQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcIndpdGhkcmF3XCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBzdHJpbmcsIEJpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuXG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiTUFYX09XTkVSX0NPVU5UXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJhZGRPd25lclwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiY2hhbmdlUmVxdWlyZW1lbnRcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImNvbmZpcm1UcmFuc2FjdGlvblwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiY29uZmlybWF0aW9uc1wiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZXhlY3V0ZVRyYW5zYWN0aW9uXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRDb25maXJtYXRpb25Db3VudFwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0Q29uZmlybWF0aW9uc1wiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0T3duZXJzXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRUcmFuc2FjdGlvblwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0VHJhbnNhY3Rpb25JZHNcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImlzQ29uZmlybWVkXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJpc093bmVyXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJvd25lcnNcIiwgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInJlbW92ZU93bmVyXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJyZXBsYWNlT3duZXJcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50OiBcInJlcXVpcmVkXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJyZXZva2VDb25maXJtYXRpb25cIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInN1Ym1pdFRyYW5zYWN0aW9uXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0cmFuc2FjdGlvbkNvdW50XCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0cmFuc2FjdGlvbnNcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50OiBcImdldEZlZVwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0RmVlQ29sbGVjdG9yXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRXaXRoZHJhd1dpdGhGZWVcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50OiBcIndpdGhkcmF3XCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcblxuICBldmVudHM6IHtcbiAgICBcIkNvbmZpcm1hdGlvbihhZGRyZXNzLHVpbnQyNTYpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJEZXBvc2l0KGFkZHJlc3MsdWludDI1NilcIjogRXZlbnRGcmFnbWVudDtcbiAgICBcIkV4ZWN1dGlvbih1aW50MjU2KVwiOiBFdmVudEZyYWdtZW50O1xuICAgIFwiRXhlY3V0aW9uRmFpbHVyZSh1aW50MjU2KVwiOiBFdmVudEZyYWdtZW50O1xuICAgIFwiT3duZXJBZGRpdGlvbihhZGRyZXNzKVwiOiBFdmVudEZyYWdtZW50O1xuICAgIFwiT3duZXJSZW1vdmFsKGFkZHJlc3MpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJSZXF1aXJlbWVudENoYW5nZSh1aW50MjU2KVwiOiBFdmVudEZyYWdtZW50O1xuICAgIFwiUmV2b2NhdGlvbihhZGRyZXNzLHVpbnQyNTYpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJTdWJtaXNzaW9uKHVpbnQyNTYpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJXaXRoRHJhd2FsKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiOiBFdmVudEZyYWdtZW50O1xuICB9O1xuXG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiQ29uZmlybWF0aW9uXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIkRlcG9zaXRcIik6IEV2ZW50RnJhZ21lbnQ7XG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiRXhlY3V0aW9uXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIkV4ZWN1dGlvbkZhaWx1cmVcIik6IEV2ZW50RnJhZ21lbnQ7XG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiT3duZXJBZGRpdGlvblwiKTogRXZlbnRGcmFnbWVudDtcbiAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogXCJPd25lclJlbW92YWxcIik6IEV2ZW50RnJhZ21lbnQ7XG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiUmVxdWlyZW1lbnRDaGFuZ2VcIik6IEV2ZW50RnJhZ21lbnQ7XG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiUmV2b2NhdGlvblwiKTogRXZlbnRGcmFnbWVudDtcbiAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogXCJTdWJtaXNzaW9uXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIldpdGhEcmF3YWxcIik6IEV2ZW50RnJhZ21lbnQ7XG59XG5cbmV4cG9ydCBjbGFzcyBFUkMyME11bHRpc2lnV2FsbGV0IGV4dGVuZHMgQ29udHJhY3Qge1xuICBjb25uZWN0KHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyIHwgc3RyaW5nKTogdGhpcztcbiAgYXR0YWNoKGFkZHJlc3NPck5hbWU6IHN0cmluZyk6IHRoaXM7XG4gIGRlcGxveWVkKCk6IFByb21pc2U8dGhpcz47XG5cbiAgb24oZXZlbnQ6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuICBvbmNlKGV2ZW50OiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcbiAgYWRkTGlzdGVuZXIoZXZlbnROYW1lOiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZTogRXZlbnRGaWx0ZXIgfCBzdHJpbmcpOiB0aGlzO1xuICByZW1vdmVMaXN0ZW5lcihldmVudE5hbWU6IGFueSwgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcblxuICBpbnRlcmZhY2U6IEVSQzIwTXVsdGlzaWdXYWxsZXRJbnRlcmZhY2U7XG5cbiAgZnVuY3Rpb25zOiB7XG4gICAgTUFYX09XTkVSX0NPVU5UKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtCaWdOdW1iZXJdPjtcblxuICAgIFwiTUFYX09XTkVSX0NPVU5UKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbQmlnTnVtYmVyXT47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gYWRkIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyIHRvIGFkZC5cbiAgICAgKi9cbiAgICBhZGRPd25lcihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIGFkZCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG5ldyBvd25lciB0byBhZGQuXG4gICAgICovXG4gICAgXCJhZGRPd25lcihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBudW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuXG4gICAgICovXG4gICAgY2hhbmdlUmVxdWlyZW1lbnQoXG4gICAgICBfcmVxdWlyZWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBudW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuXG4gICAgICovXG4gICAgXCJjaGFuZ2VSZXF1aXJlbWVudCh1aW50MjU2KVwiKFxuICAgICAgX3JlcXVpcmVkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFuIG93bmVyIHRvIGNvbmZpcm0gYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICBjb25maXJtVHJhbnNhY3Rpb24oXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFuIG93bmVyIHRvIGNvbmZpcm0gYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICBcImNvbmZpcm1UcmFuc2FjdGlvbih1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIGNvbmZpcm1hdGlvbnMoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBhcmcxOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgXCJjb25maXJtYXRpb25zKHVpbnQyNTYsYWRkcmVzcylcIihcbiAgICAgIGFyZzA6IEJpZ051bWJlcmlzaCxcbiAgICAgIGFyZzE6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtib29sZWFuXT47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW55b25lIHRvIGV4ZWN1dGUgYSBjb25maXJtZWQgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuXG4gICAgICovXG4gICAgZXhlY3V0ZVRyYW5zYWN0aW9uKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbnlvbmUgdG8gZXhlY3V0ZSBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICBcImV4ZWN1dGVUcmFuc2FjdGlvbih1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMgb2YgYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIE51bWJlciBvZiBjb25maXJtYXRpb25zLlxuICAgICAqL1xuICAgIGdldENvbmZpcm1hdGlvbkNvdW50KFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W0JpZ051bWJlcl0gJiB7IGNvdW50OiBCaWdOdW1iZXIgfT47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG51bWJlciBvZiBjb25maXJtYXRpb25zIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuIHJldHVybiBOdW1iZXIgb2YgY29uZmlybWF0aW9ucy5cbiAgICAgKi9cbiAgICBcImdldENvbmZpcm1hdGlvbkNvdW50KHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbQmlnTnVtYmVyXSAmIHsgY291bnQ6IEJpZ051bWJlciB9PjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXJyYXkgd2l0aCBvd25lciBhZGRyZXNzZXMsIHdoaWNoIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIFJldHVybnMgYXJyYXkgb2Ygb3duZXIgYWRkcmVzc2VzLlxuICAgICAqL1xuICAgIGdldENvbmZpcm1hdGlvbnMoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbc3RyaW5nW11dICYgeyBfY29uZmlybWF0aW9uczogc3RyaW5nW10gfT47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFycmF5IHdpdGggb3duZXIgYWRkcmVzc2VzLCB3aGljaCBjb25maXJtZWQgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuIHJldHVybiBSZXR1cm5zIGFycmF5IG9mIG93bmVyIGFkZHJlc3Nlcy5cbiAgICAgKi9cbiAgICBcImdldENvbmZpcm1hdGlvbnModWludDI1NilcIihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmdbXV0gJiB7IF9jb25maXJtYXRpb25zOiBzdHJpbmdbXSB9PjtcblxuICAgIGdldE93bmVycyhvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nW11dPjtcblxuICAgIFwiZ2V0T3duZXJzKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nW11dPjtcblxuICAgIGdldFRyYW5zYWN0aW9uKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8XG4gICAgICBbXG4gICAgICAgIFtzdHJpbmcsIHN0cmluZywgQmlnTnVtYmVyLCBzdHJpbmcsIGJvb2xlYW4sIEJpZ051bWJlcl0gJiB7XG4gICAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgICBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICAgICAgICAgIHZhbHVlOiBCaWdOdW1iZXI7XG4gICAgICAgICAgZGF0YTogc3RyaW5nO1xuICAgICAgICAgIGV4ZWN1dGVkOiBib29sZWFuO1xuICAgICAgICAgIHRpbWVzdGFtcDogQmlnTnVtYmVyO1xuICAgICAgICB9XG4gICAgICBdXG4gICAgPjtcblxuICAgIFwiZ2V0VHJhbnNhY3Rpb24odWludDI1NilcIihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFxuICAgICAgW1xuICAgICAgICBbc3RyaW5nLCBzdHJpbmcsIEJpZ051bWJlciwgc3RyaW5nLCBib29sZWFuLCBCaWdOdW1iZXJdICYge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgICAgICAgZGVzdGluYXRpb246IHN0cmluZztcbiAgICAgICAgICB2YWx1ZTogQmlnTnVtYmVyO1xuICAgICAgICAgIGRhdGE6IHN0cmluZztcbiAgICAgICAgICBleGVjdXRlZDogYm9vbGVhbjtcbiAgICAgICAgICB0aW1lc3RhbXA6IEJpZ051bWJlcjtcbiAgICAgICAgfVxuICAgICAgXVxuICAgID47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsZXJzIGFyZSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gcmV0dXJuIFRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsdGVycyBhcmUgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxuICAgICAqL1xuICAgIGdldFRyYW5zYWN0aW9uQ291bnQoXG4gICAgICBwZW5kaW5nOiBib29sZWFuLFxuICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbQmlnTnVtYmVyXSAmIHsgY291bnQ6IEJpZ051bWJlciB9PjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWxlcnMgYXJlIGFwcGxpZWQuXG4gICAgICogQHBhcmFtIGV4ZWN1dGVkIEluY2x1ZGUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25zLiByZXR1cm4gVG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWx0ZXJzIGFyZSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgXCJnZXRUcmFuc2FjdGlvbkNvdW50KGJvb2wsYm9vbClcIihcbiAgICAgIHBlbmRpbmc6IGJvb2xlYW4sXG4gICAgICBleGVjdXRlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtCaWdOdW1iZXJdICYgeyBjb3VudDogQmlnTnVtYmVyIH0+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBsaXN0IG9mIHRyYW5zYWN0aW9uIElEcyBpbiBkZWZpbmVkIHJhbmdlLlxuICAgICAqIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gcmV0dXJuIFJldHVybnMgYXJyYXkgb2YgdHJhbnNhY3Rpb24gSURzLlxuICAgICAqIEBwYXJhbSBmcm9tIEluZGV4IHN0YXJ0IHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LlxuICAgICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICogQHBhcmFtIHRvIEluZGV4IGVuZCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS5cbiAgICAgKi9cbiAgICBnZXRUcmFuc2FjdGlvbklkcyhcbiAgICAgIGZyb206IEJpZ051bWJlcmlzaCxcbiAgICAgIHRvOiBCaWdOdW1iZXJpc2gsXG4gICAgICBwZW5kaW5nOiBib29sZWFuLFxuICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbQmlnTnVtYmVyW11dICYgeyBfdHJhbnNhY3Rpb25JZHM6IEJpZ051bWJlcltdIH0+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBsaXN0IG9mIHRyYW5zYWN0aW9uIElEcyBpbiBkZWZpbmVkIHJhbmdlLlxuICAgICAqIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gcmV0dXJuIFJldHVybnMgYXJyYXkgb2YgdHJhbnNhY3Rpb24gSURzLlxuICAgICAqIEBwYXJhbSBmcm9tIEluZGV4IHN0YXJ0IHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LlxuICAgICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICogQHBhcmFtIHRvIEluZGV4IGVuZCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS5cbiAgICAgKi9cbiAgICBcImdldFRyYW5zYWN0aW9uSWRzKHVpbnQyNTYsdWludDI1Nixib29sLGJvb2wpXCIoXG4gICAgICBmcm9tOiBCaWdOdW1iZXJpc2gsXG4gICAgICB0bzogQmlnTnVtYmVyaXNoLFxuICAgICAgcGVuZGluZzogYm9vbGVhbixcbiAgICAgIGV4ZWN1dGVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W0JpZ051bWJlcltdXSAmIHsgX3RyYW5zYWN0aW9uSWRzOiBCaWdOdW1iZXJbXSB9PjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbmZpcm1hdGlvbiBzdGF0dXMgb2YgYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIENvbmZpcm1hdGlvbiBzdGF0dXMuXG4gICAgICovXG4gICAgaXNDb25maXJtZWQoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29uZmlybWF0aW9uIHN0YXR1cyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gQ29uZmlybWF0aW9uIHN0YXR1cy5cbiAgICAgKi9cbiAgICBcImlzQ29uZmlybWVkKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgaXNPd25lcihhcmcwOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtib29sZWFuXT47XG5cbiAgICBcImlzT3duZXIoYWRkcmVzcylcIihcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtib29sZWFuXT47XG5cbiAgICBvd25lcnMoYXJnMDogQmlnTnVtYmVyaXNoLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICBcIm93bmVycyh1aW50MjU2KVwiKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIHJlbW92ZSBhbiBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG93bmVyIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmVPd25lcihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIHJlbW92ZSBhbiBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG93bmVyIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICBcInJlbW92ZU93bmVyKGFkZHJlc3MpXCIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byByZXBsYWNlIGFuIG93bmVyIHdpdGggYSBuZXcgb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gYmUgcmVwbGFjZWQuXG4gICAgICovXG4gICAgcmVwbGFjZU93bmVyKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIHJlcGxhY2UgYW4gb3duZXIgd2l0aCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBuZXdPd25lciBBZGRyZXNzIG9mIG5ldyBvd25lci5cbiAgICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lciB0byBiZSByZXBsYWNlZC5cbiAgICAgKi9cbiAgICBcInJlcGxhY2VPd25lcihhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICByZXF1aXJlZChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbQmlnTnVtYmVyXT47XG5cbiAgICBcInJlcXVpcmVkKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbQmlnTnVtYmVyXT47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gcmV2b2tlIGEgY29uZmlybWF0aW9uIGZvciBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIHJldm9rZUNvbmZpcm1hdGlvbihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gcmV2b2tlIGEgY29uZmlybWF0aW9uIGZvciBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIFwicmV2b2tlQ29uZmlybWF0aW9uKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFuIG93bmVyIHRvIHN1Ym1pdCBhbmQgY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSBkYXRhIFRyYW5zYWN0aW9uIGRhdGEgcGF5bG9hZC4gcmV0dXJuIFJldHVybnMgdHJhbnNhY3Rpb24gSUQuXG4gICAgICogQHBhcmFtIGRlc3RpbmF0aW9uIFRyYW5zYWN0aW9uIHRhcmdldCBhZGRyZXNzLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUcmFuc2FjdGlvbiBldGhlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBzdWJtaXRUcmFuc2FjdGlvbihcbiAgICAgIGRlc3RpbmF0aW9uOiBzdHJpbmcsXG4gICAgICB2YWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gc3VibWl0IGFuZCBjb25maXJtIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIGRhdGEgVHJhbnNhY3Rpb24gZGF0YSBwYXlsb2FkLiByZXR1cm4gUmV0dXJucyB0cmFuc2FjdGlvbiBJRC5cbiAgICAgKiBAcGFyYW0gZGVzdGluYXRpb24gVHJhbnNhY3Rpb24gdGFyZ2V0IGFkZHJlc3MuXG4gICAgICogQHBhcmFtIHZhbHVlIFRyYW5zYWN0aW9uIGV0aGVyIHZhbHVlLlxuICAgICAqL1xuICAgIFwic3VibWl0VHJhbnNhY3Rpb24oYWRkcmVzcyx1aW50MjU2LGJ5dGVzLHN0cmluZylcIihcbiAgICAgIGRlc3RpbmF0aW9uOiBzdHJpbmcsXG4gICAgICB2YWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICB0cmFuc2FjdGlvbkNvdW50KG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtCaWdOdW1iZXJdPjtcblxuICAgIFwidHJhbnNhY3Rpb25Db3VudCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W0JpZ051bWJlcl0+O1xuXG4gICAgdHJhbnNhY3Rpb25zKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8XG4gICAgICBbc3RyaW5nLCBzdHJpbmcsIEJpZ051bWJlciwgc3RyaW5nLCBib29sZWFuLCBCaWdOdW1iZXJdICYge1xuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgICBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogQmlnTnVtYmVyO1xuICAgICAgICBkYXRhOiBzdHJpbmc7XG4gICAgICAgIGV4ZWN1dGVkOiBib29sZWFuO1xuICAgICAgICB0aW1lc3RhbXA6IEJpZ051bWJlcjtcbiAgICAgIH1cbiAgICA+O1xuXG4gICAgXCJ0cmFuc2FjdGlvbnModWludDI1NilcIihcbiAgICAgIGFyZzA6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFxuICAgICAgW3N0cmluZywgc3RyaW5nLCBCaWdOdW1iZXIsIHN0cmluZywgYm9vbGVhbiwgQmlnTnVtYmVyXSAmIHtcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgZGVzdGluYXRpb246IHN0cmluZztcbiAgICAgICAgdmFsdWU6IEJpZ051bWJlcjtcbiAgICAgICAgZGF0YTogc3RyaW5nO1xuICAgICAgICBleGVjdXRlZDogYm9vbGVhbjtcbiAgICAgICAgdGltZXN0YW1wOiBCaWdOdW1iZXI7XG4gICAgICB9XG4gICAgPjtcblxuICAgIGdldEZlZShvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbQmlnTnVtYmVyXT47XG5cbiAgICBcImdldEZlZSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W0JpZ051bWJlcl0+O1xuXG4gICAgZ2V0RmVlQ29sbGVjdG9yKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIFwiZ2V0RmVlQ29sbGVjdG9yKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICBnZXRXaXRoZHJhd1dpdGhGZWUoXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbQmlnTnVtYmVyLCBCaWdOdW1iZXJdPjtcblxuICAgIFwiZ2V0V2l0aGRyYXdXaXRoRmVlKHVpbnQyNTYpXCIoXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbQmlnTnVtYmVyLCBCaWdOdW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIFdpdGhkcmF3cyB0b2tlbiBiYWxhbmNlIGZyb20gdGhlIHdhbGxldFxuICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byB3aXRoZHJhd1xuICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiByZWNlaXZlclxuICAgICAqIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMyMCB0b2tlbiB0byB3aXRoZHJhdy5cbiAgICAgKi9cbiAgICB3aXRoZHJhdyhcbiAgICAgIF90b2tlbjogc3RyaW5nLFxuICAgICAgX3RvOiBzdHJpbmcsXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogV2l0aGRyYXdzIHRva2VuIGJhbGFuY2UgZnJvbSB0aGUgd2FsbGV0XG4gICAgICogQHBhcmFtIF9hbW91bnQgQW1vdW50IHRvIHdpdGhkcmF3XG4gICAgICogQHBhcmFtIF90byBBZGRyZXNzIG9mIHJlY2VpdmVyXG4gICAgICogQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQzIwIHRva2VuIHRvIHdpdGhkcmF3LlxuICAgICAqL1xuICAgIFwid2l0aGRyYXcoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICBfdG9rZW46IHN0cmluZyxcbiAgICAgIF90bzogc3RyaW5nLFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcbiAgfTtcblxuICBNQVhfT1dORVJfQ09VTlQob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICBcIk1BWF9PV05FUl9DT1VOVCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIGFkZCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIgdG8gYWRkLlxuICAgKi9cbiAgYWRkT3duZXIob3duZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIGFkZCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIgdG8gYWRkLlxuICAgKi9cbiAgXCJhZGRPd25lcihhZGRyZXNzKVwiKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIEFsbG93cyB0byBjaGFuZ2UgdGhlIG51bWJlciBvZiByZXF1aXJlZCBjb25maXJtYXRpb25zLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAqIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuXG4gICAqL1xuICBjaGFuZ2VSZXF1aXJlbWVudChcbiAgICBfcmVxdWlyZWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIGNoYW5nZSB0aGUgbnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICogQHBhcmFtIF9yZXF1aXJlZCBOdW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy5cbiAgICovXG4gIFwiY2hhbmdlUmVxdWlyZW1lbnQodWludDI1NilcIihcbiAgICBfcmVxdWlyZWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIGFuIG93bmVyIHRvIGNvbmZpcm0gYSB0cmFuc2FjdGlvbi5cbiAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuXG4gICAqL1xuICBjb25maXJtVHJhbnNhY3Rpb24oXG4gICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICovXG4gIFwiY29uZmlybVRyYW5zYWN0aW9uKHVpbnQyNTYpXCIoXG4gICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIGNvbmZpcm1hdGlvbnMoXG4gICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgIGFyZzE6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgXCJjb25maXJtYXRpb25zKHVpbnQyNTYsYWRkcmVzcylcIihcbiAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgYXJnMTogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAvKipcbiAgICogQWxsb3dzIGFueW9uZSB0byBleGVjdXRlIGEgY29uZmlybWVkIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICovXG4gIGV4ZWN1dGVUcmFuc2FjdGlvbihcbiAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIEFsbG93cyBhbnlvbmUgdG8gZXhlY3V0ZSBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuXG4gICAqL1xuICBcImV4ZWN1dGVUcmFuc2FjdGlvbih1aW50MjU2KVwiKFxuICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogUmV0dXJucyBudW1iZXIgb2YgY29uZmlybWF0aW9ucyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIE51bWJlciBvZiBjb25maXJtYXRpb25zLlxuICAgKi9cbiAgZ2V0Q29uZmlybWF0aW9uQ291bnQoXG4gICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG51bWJlciBvZiBjb25maXJtYXRpb25zIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gTnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMuXG4gICAqL1xuICBcImdldENvbmZpcm1hdGlvbkNvdW50KHVpbnQyNTYpXCIoXG4gICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFycmF5IHdpdGggb3duZXIgYWRkcmVzc2VzLCB3aGljaCBjb25maXJtZWQgdHJhbnNhY3Rpb24uXG4gICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gUmV0dXJucyBhcnJheSBvZiBvd25lciBhZGRyZXNzZXMuXG4gICAqL1xuICBnZXRDb25maXJtYXRpb25zKFxuICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8c3RyaW5nW10+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFycmF5IHdpdGggb3duZXIgYWRkcmVzc2VzLCB3aGljaCBjb25maXJtZWQgdHJhbnNhY3Rpb24uXG4gICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gUmV0dXJucyBhcnJheSBvZiBvd25lciBhZGRyZXNzZXMuXG4gICAqL1xuICBcImdldENvbmZpcm1hdGlvbnModWludDI1NilcIihcbiAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICBnZXRPd25lcnMob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nW10+O1xuXG4gIFwiZ2V0T3duZXJzKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgZ2V0VHJhbnNhY3Rpb24oXG4gICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxcbiAgICBbc3RyaW5nLCBzdHJpbmcsIEJpZ051bWJlciwgc3RyaW5nLCBib29sZWFuLCBCaWdOdW1iZXJdICYge1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIGRlc3RpbmF0aW9uOiBzdHJpbmc7XG4gICAgICB2YWx1ZTogQmlnTnVtYmVyO1xuICAgICAgZGF0YTogc3RyaW5nO1xuICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW47XG4gICAgICB0aW1lc3RhbXA6IEJpZ051bWJlcjtcbiAgICB9XG4gID47XG5cbiAgXCJnZXRUcmFuc2FjdGlvbih1aW50MjU2KVwiKFxuICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8XG4gICAgW3N0cmluZywgc3RyaW5nLCBCaWdOdW1iZXIsIHN0cmluZywgYm9vbGVhbiwgQmlnTnVtYmVyXSAmIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgICBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICAgICAgdmFsdWU6IEJpZ051bWJlcjtcbiAgICAgIGRhdGE6IHN0cmluZztcbiAgICAgIGV4ZWN1dGVkOiBib29sZWFuO1xuICAgICAgdGltZXN0YW1wOiBCaWdOdW1iZXI7XG4gICAgfVxuICA+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsZXJzIGFyZSBhcHBsaWVkLlxuICAgKiBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuIHJldHVybiBUb3RhbCBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIGFmdGVyIGZpbHRlcnMgYXJlIGFwcGxpZWQuXG4gICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbkNvdW50KFxuICAgIHBlbmRpbmc6IGJvb2xlYW4sXG4gICAgZXhlY3V0ZWQ6IGJvb2xlYW4sXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWxlcnMgYXJlIGFwcGxpZWQuXG4gICAqIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gcmV0dXJuIFRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsdGVycyBhcmUgYXBwbGllZC5cbiAgICogQHBhcmFtIHBlbmRpbmcgSW5jbHVkZSBwZW5kaW5nIHRyYW5zYWN0aW9ucy5cbiAgICovXG4gIFwiZ2V0VHJhbnNhY3Rpb25Db3VudChib29sLGJvb2wpXCIoXG4gICAgcGVuZGluZzogYm9vbGVhbixcbiAgICBleGVjdXRlZDogYm9vbGVhbixcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAvKipcbiAgICogUmV0dXJucyBsaXN0IG9mIHRyYW5zYWN0aW9uIElEcyBpbiBkZWZpbmVkIHJhbmdlLlxuICAgKiBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuIHJldHVybiBSZXR1cm5zIGFycmF5IG9mIHRyYW5zYWN0aW9uIElEcy5cbiAgICogQHBhcmFtIGZyb20gSW5kZXggc3RhcnQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuXG4gICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAqIEBwYXJhbSB0byBJbmRleCBlbmQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbklkcyhcbiAgICBmcm9tOiBCaWdOdW1iZXJpc2gsXG4gICAgdG86IEJpZ051bWJlcmlzaCxcbiAgICBwZW5kaW5nOiBib29sZWFuLFxuICAgIGV4ZWN1dGVkOiBib29sZWFuLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXJbXT47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbGlzdCBvZiB0cmFuc2FjdGlvbiBJRHMgaW4gZGVmaW5lZCByYW5nZS5cbiAgICogQHBhcmFtIGV4ZWN1dGVkIEluY2x1ZGUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25zLiByZXR1cm4gUmV0dXJucyBhcnJheSBvZiB0cmFuc2FjdGlvbiBJRHMuXG4gICAqIEBwYXJhbSBmcm9tIEluZGV4IHN0YXJ0IHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LlxuICAgKiBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxuICAgKiBAcGFyYW0gdG8gSW5kZXggZW5kIHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LlxuICAgKi9cbiAgXCJnZXRUcmFuc2FjdGlvbklkcyh1aW50MjU2LHVpbnQyNTYsYm9vbCxib29sKVwiKFxuICAgIGZyb206IEJpZ051bWJlcmlzaCxcbiAgICB0bzogQmlnTnVtYmVyaXNoLFxuICAgIHBlbmRpbmc6IGJvb2xlYW4sXG4gICAgZXhlY3V0ZWQ6IGJvb2xlYW4sXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPEJpZ051bWJlcltdPjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29uZmlybWF0aW9uIHN0YXR1cyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIENvbmZpcm1hdGlvbiBzdGF0dXMuXG4gICAqL1xuICBpc0NvbmZpcm1lZChcbiAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb25maXJtYXRpb24gc3RhdHVzIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gQ29uZmlybWF0aW9uIHN0YXR1cy5cbiAgICovXG4gIFwiaXNDb25maXJtZWQodWludDI1NilcIihcbiAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIGlzT3duZXIoYXJnMDogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxib29sZWFuPjtcblxuICBcImlzT3duZXIoYWRkcmVzcylcIihhcmcwOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIG93bmVycyhhcmcwOiBCaWdOdW1iZXJpc2gsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgXCJvd25lcnModWludDI1NilcIihcbiAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIEFsbG93cyB0byByZW1vdmUgYW4gb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gcmVtb3ZlLlxuICAgKi9cbiAgcmVtb3ZlT3duZXIoXG4gICAgb3duZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIHJlbW92ZSBhbiBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lciB0byByZW1vdmUuXG4gICAqL1xuICBcInJlbW92ZU93bmVyKGFkZHJlc3MpXCIoXG4gICAgb3duZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIHJlcGxhY2UgYW4gb3duZXIgd2l0aCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgKiBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIuXG4gICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG93bmVyIHRvIGJlIHJlcGxhY2VkLlxuICAgKi9cbiAgcmVwbGFjZU93bmVyKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIHJlcGxhY2UgYW4gb3duZXIgd2l0aCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgKiBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIuXG4gICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG93bmVyIHRvIGJlIHJlcGxhY2VkLlxuICAgKi9cbiAgXCJyZXBsYWNlT3duZXIoYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICByZXF1aXJlZChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIFwicmVxdWlyZWQoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgLyoqXG4gICAqIEFsbG93cyBhbiBvd25lciB0byByZXZva2UgYSBjb25maXJtYXRpb24gZm9yIGEgdHJhbnNhY3Rpb24uXG4gICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgKi9cbiAgcmV2b2tlQ29uZmlybWF0aW9uKFxuICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIGFuIG93bmVyIHRvIHJldm9rZSBhIGNvbmZpcm1hdGlvbiBmb3IgYSB0cmFuc2FjdGlvbi5cbiAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuXG4gICAqL1xuICBcInJldm9rZUNvbmZpcm1hdGlvbih1aW50MjU2KVwiKFxuICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIGFuIG93bmVyIHRvIHN1Ym1pdCBhbmQgY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gZGF0YSBUcmFuc2FjdGlvbiBkYXRhIHBheWxvYWQuIHJldHVybiBSZXR1cm5zIHRyYW5zYWN0aW9uIElELlxuICAgKiBAcGFyYW0gZGVzdGluYXRpb24gVHJhbnNhY3Rpb24gdGFyZ2V0IGFkZHJlc3MuXG4gICAqIEBwYXJhbSB2YWx1ZSBUcmFuc2FjdGlvbiBldGhlciB2YWx1ZS5cbiAgICovXG4gIHN1Ym1pdFRyYW5zYWN0aW9uKFxuICAgIGRlc3RpbmF0aW9uOiBzdHJpbmcsXG4gICAgdmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICBkYXRhOiBCeXRlc0xpa2UsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogQWxsb3dzIGFuIG93bmVyIHRvIHN1Ym1pdCBhbmQgY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gZGF0YSBUcmFuc2FjdGlvbiBkYXRhIHBheWxvYWQuIHJldHVybiBSZXR1cm5zIHRyYW5zYWN0aW9uIElELlxuICAgKiBAcGFyYW0gZGVzdGluYXRpb24gVHJhbnNhY3Rpb24gdGFyZ2V0IGFkZHJlc3MuXG4gICAqIEBwYXJhbSB2YWx1ZSBUcmFuc2FjdGlvbiBldGhlciB2YWx1ZS5cbiAgICovXG4gIFwic3VibWl0VHJhbnNhY3Rpb24oYWRkcmVzcyx1aW50MjU2LGJ5dGVzLHN0cmluZylcIihcbiAgICBkZXN0aW5hdGlvbjogc3RyaW5nLFxuICAgIHZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgdHJhbnNhY3Rpb25Db3VudChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIFwidHJhbnNhY3Rpb25Db3VudCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICB0cmFuc2FjdGlvbnMoXG4gICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxcbiAgICBbc3RyaW5nLCBzdHJpbmcsIEJpZ051bWJlciwgc3RyaW5nLCBib29sZWFuLCBCaWdOdW1iZXJdICYge1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIGRlc3RpbmF0aW9uOiBzdHJpbmc7XG4gICAgICB2YWx1ZTogQmlnTnVtYmVyO1xuICAgICAgZGF0YTogc3RyaW5nO1xuICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW47XG4gICAgICB0aW1lc3RhbXA6IEJpZ051bWJlcjtcbiAgICB9XG4gID47XG5cbiAgXCJ0cmFuc2FjdGlvbnModWludDI1NilcIihcbiAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPFxuICAgIFtzdHJpbmcsIHN0cmluZywgQmlnTnVtYmVyLCBzdHJpbmcsIGJvb2xlYW4sIEJpZ051bWJlcl0gJiB7XG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgZGVzdGluYXRpb246IHN0cmluZztcbiAgICAgIHZhbHVlOiBCaWdOdW1iZXI7XG4gICAgICBkYXRhOiBzdHJpbmc7XG4gICAgICBleGVjdXRlZDogYm9vbGVhbjtcbiAgICAgIHRpbWVzdGFtcDogQmlnTnVtYmVyO1xuICAgIH1cbiAgPjtcblxuICBnZXRGZWUob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICBcImdldEZlZSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICBnZXRGZWVDb2xsZWN0b3Iob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBcImdldEZlZUNvbGxlY3RvcigpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBnZXRXaXRoZHJhd1dpdGhGZWUoXG4gICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxbQmlnTnVtYmVyLCBCaWdOdW1iZXJdPjtcblxuICBcImdldFdpdGhkcmF3V2l0aEZlZSh1aW50MjU2KVwiKFxuICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8W0JpZ051bWJlciwgQmlnTnVtYmVyXT47XG5cbiAgLyoqXG4gICAqIFdpdGhkcmF3cyB0b2tlbiBiYWxhbmNlIGZyb20gdGhlIHdhbGxldFxuICAgKiBAcGFyYW0gX2Ftb3VudCBBbW91bnQgdG8gd2l0aGRyYXdcbiAgICogQHBhcmFtIF90byBBZGRyZXNzIG9mIHJlY2VpdmVyXG4gICAqIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMyMCB0b2tlbiB0byB3aXRoZHJhdy5cbiAgICovXG4gIHdpdGhkcmF3KFxuICAgIF90b2tlbjogc3RyaW5nLFxuICAgIF90bzogc3RyaW5nLFxuICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogV2l0aGRyYXdzIHRva2VuIGJhbGFuY2UgZnJvbSB0aGUgd2FsbGV0XG4gICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byB3aXRoZHJhd1xuICAgKiBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgcmVjZWl2ZXJcbiAgICogQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQzIwIHRva2VuIHRvIHdpdGhkcmF3LlxuICAgKi9cbiAgXCJ3aXRoZHJhdyhhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICBfdG9rZW46IHN0cmluZyxcbiAgICBfdG86IHN0cmluZyxcbiAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgY2FsbFN0YXRpYzoge1xuICAgIE1BWF9PV05FUl9DT1VOVChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJNQVhfT1dORVJfQ09VTlQoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gYWRkIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyIHRvIGFkZC5cbiAgICAgKi9cbiAgICBhZGRPd25lcihvd25lcjogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBhZGQgYSBuZXcgb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIgdG8gYWRkLlxuICAgICAqL1xuICAgIFwiYWRkT3duZXIoYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBjaGFuZ2UgdGhlIG51bWJlciBvZiByZXF1aXJlZCBjb25maXJtYXRpb25zLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIF9yZXF1aXJlZCBOdW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy5cbiAgICAgKi9cbiAgICBjaGFuZ2VSZXF1aXJlbWVudChcbiAgICAgIF9yZXF1aXJlZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBudW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuXG4gICAgICovXG4gICAgXCJjaGFuZ2VSZXF1aXJlbWVudCh1aW50MjU2KVwiKFxuICAgICAgX3JlcXVpcmVkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbiBvd25lciB0byBjb25maXJtIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuXG4gICAgICovXG4gICAgY29uZmlybVRyYW5zYWN0aW9uKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIFwiY29uZmlybVRyYW5zYWN0aW9uKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIGNvbmZpcm1hdGlvbnMoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBhcmcxOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIFwiY29uZmlybWF0aW9ucyh1aW50MjU2LGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBhcmcxOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbnlvbmUgdG8gZXhlY3V0ZSBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICBleGVjdXRlVHJhbnNhY3Rpb24oXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbnlvbmUgdG8gZXhlY3V0ZSBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICBcImV4ZWN1dGVUcmFuc2FjdGlvbih1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG51bWJlciBvZiBjb25maXJtYXRpb25zIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuIHJldHVybiBOdW1iZXIgb2YgY29uZmlybWF0aW9ucy5cbiAgICAgKi9cbiAgICBnZXRDb25maXJtYXRpb25Db3VudChcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG51bWJlciBvZiBjb25maXJtYXRpb25zIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuIHJldHVybiBOdW1iZXIgb2YgY29uZmlybWF0aW9ucy5cbiAgICAgKi9cbiAgICBcImdldENvbmZpcm1hdGlvbkNvdW50KHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcnJheSB3aXRoIG93bmVyIGFkZHJlc3Nlcywgd2hpY2ggY29uZmlybWVkIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gUmV0dXJucyBhcnJheSBvZiBvd25lciBhZGRyZXNzZXMuXG4gICAgICovXG4gICAgZ2V0Q29uZmlybWF0aW9ucyhcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXJyYXkgd2l0aCBvd25lciBhZGRyZXNzZXMsIHdoaWNoIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIFJldHVybnMgYXJyYXkgb2Ygb3duZXIgYWRkcmVzc2VzLlxuICAgICAqL1xuICAgIFwiZ2V0Q29uZmlybWF0aW9ucyh1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8c3RyaW5nW10+O1xuXG4gICAgZ2V0T3duZXJzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICAgIFwiZ2V0T3duZXJzKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgICBnZXRUcmFuc2FjdGlvbihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFxuICAgICAgW3N0cmluZywgc3RyaW5nLCBCaWdOdW1iZXIsIHN0cmluZywgYm9vbGVhbiwgQmlnTnVtYmVyXSAmIHtcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgZGVzdGluYXRpb246IHN0cmluZztcbiAgICAgICAgdmFsdWU6IEJpZ051bWJlcjtcbiAgICAgICAgZGF0YTogc3RyaW5nO1xuICAgICAgICBleGVjdXRlZDogYm9vbGVhbjtcbiAgICAgICAgdGltZXN0YW1wOiBCaWdOdW1iZXI7XG4gICAgICB9XG4gICAgPjtcblxuICAgIFwiZ2V0VHJhbnNhY3Rpb24odWludDI1NilcIihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFxuICAgICAgW3N0cmluZywgc3RyaW5nLCBCaWdOdW1iZXIsIHN0cmluZywgYm9vbGVhbiwgQmlnTnVtYmVyXSAmIHtcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgZGVzdGluYXRpb246IHN0cmluZztcbiAgICAgICAgdmFsdWU6IEJpZ051bWJlcjtcbiAgICAgICAgZGF0YTogc3RyaW5nO1xuICAgICAgICBleGVjdXRlZDogYm9vbGVhbjtcbiAgICAgICAgdGltZXN0YW1wOiBCaWdOdW1iZXI7XG4gICAgICB9XG4gICAgPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWxlcnMgYXJlIGFwcGxpZWQuXG4gICAgICogQHBhcmFtIGV4ZWN1dGVkIEluY2x1ZGUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25zLiByZXR1cm4gVG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWx0ZXJzIGFyZSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25Db3VudChcbiAgICAgIHBlbmRpbmc6IGJvb2xlYW4sXG4gICAgICBleGVjdXRlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsZXJzIGFyZSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gcmV0dXJuIFRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsdGVycyBhcmUgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxuICAgICAqL1xuICAgIFwiZ2V0VHJhbnNhY3Rpb25Db3VudChib29sLGJvb2wpXCIoXG4gICAgICBwZW5kaW5nOiBib29sZWFuLFxuICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBsaXN0IG9mIHRyYW5zYWN0aW9uIElEcyBpbiBkZWZpbmVkIHJhbmdlLlxuICAgICAqIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gcmV0dXJuIFJldHVybnMgYXJyYXkgb2YgdHJhbnNhY3Rpb24gSURzLlxuICAgICAqIEBwYXJhbSBmcm9tIEluZGV4IHN0YXJ0IHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LlxuICAgICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICogQHBhcmFtIHRvIEluZGV4IGVuZCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS5cbiAgICAgKi9cbiAgICBnZXRUcmFuc2FjdGlvbklkcyhcbiAgICAgIGZyb206IEJpZ051bWJlcmlzaCxcbiAgICAgIHRvOiBCaWdOdW1iZXJpc2gsXG4gICAgICBwZW5kaW5nOiBib29sZWFuLFxuICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXJbXT47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGxpc3Qgb2YgdHJhbnNhY3Rpb24gSURzIGluIGRlZmluZWQgcmFuZ2UuXG4gICAgICogQHBhcmFtIGV4ZWN1dGVkIEluY2x1ZGUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25zLiByZXR1cm4gUmV0dXJucyBhcnJheSBvZiB0cmFuc2FjdGlvbiBJRHMuXG4gICAgICogQHBhcmFtIGZyb20gSW5kZXggc3RhcnQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuXG4gICAgICogQHBhcmFtIHBlbmRpbmcgSW5jbHVkZSBwZW5kaW5nIHRyYW5zYWN0aW9ucy5cbiAgICAgKiBAcGFyYW0gdG8gSW5kZXggZW5kIHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LlxuICAgICAqL1xuICAgIFwiZ2V0VHJhbnNhY3Rpb25JZHModWludDI1Nix1aW50MjU2LGJvb2wsYm9vbClcIihcbiAgICAgIGZyb206IEJpZ051bWJlcmlzaCxcbiAgICAgIHRvOiBCaWdOdW1iZXJpc2gsXG4gICAgICBwZW5kaW5nOiBib29sZWFuLFxuICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXJbXT47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb25maXJtYXRpb24gc3RhdHVzIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuIHJldHVybiBDb25maXJtYXRpb24gc3RhdHVzLlxuICAgICAqL1xuICAgIGlzQ29uZmlybWVkKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb25maXJtYXRpb24gc3RhdHVzIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuIHJldHVybiBDb25maXJtYXRpb24gc3RhdHVzLlxuICAgICAqL1xuICAgIFwiaXNDb25maXJtZWQodWludDI1NilcIihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgaXNPd25lcihhcmcwOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgXCJpc093bmVyKGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIG93bmVycyhhcmcwOiBCaWdOdW1iZXJpc2gsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBcIm93bmVycyh1aW50MjU2KVwiKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byByZW1vdmUgYW4gb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lciB0byByZW1vdmUuXG4gICAgICovXG4gICAgcmVtb3ZlT3duZXIob3duZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gcmVtb3ZlIGFuIG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gcmVtb3ZlLlxuICAgICAqL1xuICAgIFwicmVtb3ZlT3duZXIoYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byByZXBsYWNlIGFuIG93bmVyIHdpdGggYSBuZXcgb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gYmUgcmVwbGFjZWQuXG4gICAgICovXG4gICAgcmVwbGFjZU93bmVyKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byByZXBsYWNlIGFuIG93bmVyIHdpdGggYSBuZXcgb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gYmUgcmVwbGFjZWQuXG4gICAgICovXG4gICAgXCJyZXBsYWNlT3duZXIoYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIHJlcXVpcmVkKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcInJlcXVpcmVkKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFuIG93bmVyIHRvIHJldm9rZSBhIGNvbmZpcm1hdGlvbiBmb3IgYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICByZXZva2VDb25maXJtYXRpb24oXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbiBvd25lciB0byByZXZva2UgYSBjb25maXJtYXRpb24gZm9yIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuXG4gICAgICovXG4gICAgXCJyZXZva2VDb25maXJtYXRpb24odWludDI1NilcIihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFuIG93bmVyIHRvIHN1Ym1pdCBhbmQgY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSBkYXRhIFRyYW5zYWN0aW9uIGRhdGEgcGF5bG9hZC4gcmV0dXJuIFJldHVybnMgdHJhbnNhY3Rpb24gSUQuXG4gICAgICogQHBhcmFtIGRlc3RpbmF0aW9uIFRyYW5zYWN0aW9uIHRhcmdldCBhZGRyZXNzLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUcmFuc2FjdGlvbiBldGhlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBzdWJtaXRUcmFuc2FjdGlvbihcbiAgICAgIGRlc3RpbmF0aW9uOiBzdHJpbmcsXG4gICAgICB2YWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gc3VibWl0IGFuZCBjb25maXJtIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIGRhdGEgVHJhbnNhY3Rpb24gZGF0YSBwYXlsb2FkLiByZXR1cm4gUmV0dXJucyB0cmFuc2FjdGlvbiBJRC5cbiAgICAgKiBAcGFyYW0gZGVzdGluYXRpb24gVHJhbnNhY3Rpb24gdGFyZ2V0IGFkZHJlc3MuXG4gICAgICogQHBhcmFtIHZhbHVlIFRyYW5zYWN0aW9uIGV0aGVyIHZhbHVlLlxuICAgICAqL1xuICAgIFwic3VibWl0VHJhbnNhY3Rpb24oYWRkcmVzcyx1aW50MjU2LGJ5dGVzLHN0cmluZylcIihcbiAgICAgIGRlc3RpbmF0aW9uOiBzdHJpbmcsXG4gICAgICB2YWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICB0cmFuc2FjdGlvbkNvdW50KG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcInRyYW5zYWN0aW9uQ291bnQoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICB0cmFuc2FjdGlvbnMoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtzdHJpbmcsIHN0cmluZywgQmlnTnVtYmVyLCBzdHJpbmcsIGJvb2xlYW4sIEJpZ051bWJlcl0gJiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgICAgIGRlc3RpbmF0aW9uOiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBCaWdOdW1iZXI7XG4gICAgICAgIGRhdGE6IHN0cmluZztcbiAgICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW47XG4gICAgICAgIHRpbWVzdGFtcDogQmlnTnVtYmVyO1xuICAgICAgfVxuICAgID47XG5cbiAgICBcInRyYW5zYWN0aW9ucyh1aW50MjU2KVwiKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8XG4gICAgICBbc3RyaW5nLCBzdHJpbmcsIEJpZ051bWJlciwgc3RyaW5nLCBib29sZWFuLCBCaWdOdW1iZXJdICYge1xuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgICBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogQmlnTnVtYmVyO1xuICAgICAgICBkYXRhOiBzdHJpbmc7XG4gICAgICAgIGV4ZWN1dGVkOiBib29sZWFuO1xuICAgICAgICB0aW1lc3RhbXA6IEJpZ051bWJlcjtcbiAgICAgIH1cbiAgICA+O1xuXG4gICAgZ2V0RmVlKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImdldEZlZSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGdldEZlZUNvbGxlY3RvcihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgXCJnZXRGZWVDb2xsZWN0b3IoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBnZXRXaXRoZHJhd1dpdGhGZWUoXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbQmlnTnVtYmVyLCBCaWdOdW1iZXJdPjtcblxuICAgIFwiZ2V0V2l0aGRyYXdXaXRoRmVlKHVpbnQyNTYpXCIoXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbQmlnTnVtYmVyLCBCaWdOdW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIFdpdGhkcmF3cyB0b2tlbiBiYWxhbmNlIGZyb20gdGhlIHdhbGxldFxuICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byB3aXRoZHJhd1xuICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiByZWNlaXZlclxuICAgICAqIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMyMCB0b2tlbiB0byB3aXRoZHJhdy5cbiAgICAgKi9cbiAgICB3aXRoZHJhdyhcbiAgICAgIF90b2tlbjogc3RyaW5nLFxuICAgICAgX3RvOiBzdHJpbmcsXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFdpdGhkcmF3cyB0b2tlbiBiYWxhbmNlIGZyb20gdGhlIHdhbGxldFxuICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byB3aXRoZHJhd1xuICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiByZWNlaXZlclxuICAgICAqIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMyMCB0b2tlbiB0byB3aXRoZHJhdy5cbiAgICAgKi9cbiAgICBcIndpdGhkcmF3KGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgX3Rva2VuOiBzdHJpbmcsXG4gICAgICBfdG86IHN0cmluZyxcbiAgICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuICB9O1xuXG4gIGZpbHRlcnM6IHtcbiAgICBDb25maXJtYXRpb24oXG4gICAgICBzZW5kZXI6IHN0cmluZyB8IG51bGwsXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2ggfCBudWxsXG4gICAgKTogRXZlbnRGaWx0ZXI7XG5cbiAgICBEZXBvc2l0KHNlbmRlcjogc3RyaW5nIHwgbnVsbCwgdmFsdWU6IG51bGwpOiBFdmVudEZpbHRlcjtcblxuICAgIEV4ZWN1dGlvbih0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2ggfCBudWxsKTogRXZlbnRGaWx0ZXI7XG5cbiAgICBFeGVjdXRpb25GYWlsdXJlKHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCB8IG51bGwpOiBFdmVudEZpbHRlcjtcblxuICAgIE93bmVyQWRkaXRpb24ob3duZXI6IHN0cmluZyB8IG51bGwpOiBFdmVudEZpbHRlcjtcblxuICAgIE93bmVyUmVtb3ZhbChvd25lcjogc3RyaW5nIHwgbnVsbCk6IEV2ZW50RmlsdGVyO1xuXG4gICAgUmVxdWlyZW1lbnRDaGFuZ2UocmVxdWlyZWQ6IG51bGwpOiBFdmVudEZpbHRlcjtcblxuICAgIFJldm9jYXRpb24oXG4gICAgICBzZW5kZXI6IHN0cmluZyB8IG51bGwsXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2ggfCBudWxsXG4gICAgKTogRXZlbnRGaWx0ZXI7XG5cbiAgICBTdWJtaXNzaW9uKHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCB8IG51bGwpOiBFdmVudEZpbHRlcjtcblxuICAgIFdpdGhEcmF3YWwoXG4gICAgICBfdG9rZW46IHN0cmluZyB8IG51bGwsXG4gICAgICBfdG86IHN0cmluZyB8IG51bGwsXG4gICAgICBfYW1vdW50OiBudWxsXG4gICAgKTogRXZlbnRGaWx0ZXI7XG4gIH07XG5cbiAgZXN0aW1hdGVHYXM6IHtcbiAgICBNQVhfT1dORVJfQ09VTlQob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiTUFYX09XTkVSX0NPVU5UKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIGFkZCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG5ldyBvd25lciB0byBhZGQuXG4gICAgICovXG4gICAgYWRkT3duZXIob3duZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIGFkZCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG5ldyBvd25lciB0byBhZGQuXG4gICAgICovXG4gICAgXCJhZGRPd25lcihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBjaGFuZ2UgdGhlIG51bWJlciBvZiByZXF1aXJlZCBjb25maXJtYXRpb25zLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIF9yZXF1aXJlZCBOdW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy5cbiAgICAgKi9cbiAgICBjaGFuZ2VSZXF1aXJlbWVudChcbiAgICAgIF9yZXF1aXJlZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIGNoYW5nZSB0aGUgbnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gX3JlcXVpcmVkIE51bWJlciBvZiByZXF1aXJlZCBjb25maXJtYXRpb25zLlxuICAgICAqL1xuICAgIFwiY2hhbmdlUmVxdWlyZW1lbnQodWludDI1NilcIihcbiAgICAgIF9yZXF1aXJlZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFuIG93bmVyIHRvIGNvbmZpcm0gYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICBjb25maXJtVHJhbnNhY3Rpb24oXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIFwiY29uZmlybVRyYW5zYWN0aW9uKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBjb25maXJtYXRpb25zKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgYXJnMTogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiY29uZmlybWF0aW9ucyh1aW50MjU2LGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBhcmcxOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFueW9uZSB0byBleGVjdXRlIGEgY29uZmlybWVkIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIGV4ZWN1dGVUcmFuc2FjdGlvbihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbnlvbmUgdG8gZXhlY3V0ZSBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICBcImV4ZWN1dGVUcmFuc2FjdGlvbih1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBudW1iZXIgb2YgY29uZmlybWF0aW9ucyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gTnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMuXG4gICAgICovXG4gICAgZ2V0Q29uZmlybWF0aW9uQ291bnQoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBudW1iZXIgb2YgY29uZmlybWF0aW9ucyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gTnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMuXG4gICAgICovXG4gICAgXCJnZXRDb25maXJtYXRpb25Db3VudCh1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXJyYXkgd2l0aCBvd25lciBhZGRyZXNzZXMsIHdoaWNoIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIFJldHVybnMgYXJyYXkgb2Ygb3duZXIgYWRkcmVzc2VzLlxuICAgICAqL1xuICAgIGdldENvbmZpcm1hdGlvbnMoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcnJheSB3aXRoIG93bmVyIGFkZHJlc3Nlcywgd2hpY2ggY29uZmlybWVkIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gUmV0dXJucyBhcnJheSBvZiBvd25lciBhZGRyZXNzZXMuXG4gICAgICovXG4gICAgXCJnZXRDb25maXJtYXRpb25zKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgZ2V0T3duZXJzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImdldE93bmVycygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGdldFRyYW5zYWN0aW9uKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiZ2V0VHJhbnNhY3Rpb24odWludDI1NilcIihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsZXJzIGFyZSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gcmV0dXJuIFRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsdGVycyBhcmUgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxuICAgICAqL1xuICAgIGdldFRyYW5zYWN0aW9uQ291bnQoXG4gICAgICBwZW5kaW5nOiBib29sZWFuLFxuICAgICAgZXhlY3V0ZWQ6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0b3RhbCBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIGFmdGVyIGZpbGVycyBhcmUgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuIHJldHVybiBUb3RhbCBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIGFmdGVyIGZpbHRlcnMgYXJlIGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHBlbmRpbmcgSW5jbHVkZSBwZW5kaW5nIHRyYW5zYWN0aW9ucy5cbiAgICAgKi9cbiAgICBcImdldFRyYW5zYWN0aW9uQ291bnQoYm9vbCxib29sKVwiKFxuICAgICAgcGVuZGluZzogYm9vbGVhbixcbiAgICAgIGV4ZWN1dGVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbGlzdCBvZiB0cmFuc2FjdGlvbiBJRHMgaW4gZGVmaW5lZCByYW5nZS5cbiAgICAgKiBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuIHJldHVybiBSZXR1cm5zIGFycmF5IG9mIHRyYW5zYWN0aW9uIElEcy5cbiAgICAgKiBAcGFyYW0gZnJvbSBJbmRleCBzdGFydCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS5cbiAgICAgKiBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxuICAgICAqIEBwYXJhbSB0byBJbmRleCBlbmQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25JZHMoXG4gICAgICBmcm9tOiBCaWdOdW1iZXJpc2gsXG4gICAgICB0bzogQmlnTnVtYmVyaXNoLFxuICAgICAgcGVuZGluZzogYm9vbGVhbixcbiAgICAgIGV4ZWN1dGVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbGlzdCBvZiB0cmFuc2FjdGlvbiBJRHMgaW4gZGVmaW5lZCByYW5nZS5cbiAgICAgKiBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuIHJldHVybiBSZXR1cm5zIGFycmF5IG9mIHRyYW5zYWN0aW9uIElEcy5cbiAgICAgKiBAcGFyYW0gZnJvbSBJbmRleCBzdGFydCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS5cbiAgICAgKiBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxuICAgICAqIEBwYXJhbSB0byBJbmRleCBlbmQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuXG4gICAgICovXG4gICAgXCJnZXRUcmFuc2FjdGlvbklkcyh1aW50MjU2LHVpbnQyNTYsYm9vbCxib29sKVwiKFxuICAgICAgZnJvbTogQmlnTnVtYmVyaXNoLFxuICAgICAgdG86IEJpZ051bWJlcmlzaCxcbiAgICAgIHBlbmRpbmc6IGJvb2xlYW4sXG4gICAgICBleGVjdXRlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb25maXJtYXRpb24gc3RhdHVzIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuIHJldHVybiBDb25maXJtYXRpb24gc3RhdHVzLlxuICAgICAqL1xuICAgIGlzQ29uZmlybWVkKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbmZpcm1hdGlvbiBzdGF0dXMgb2YgYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIENvbmZpcm1hdGlvbiBzdGF0dXMuXG4gICAgICovXG4gICAgXCJpc0NvbmZpcm1lZCh1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGlzT3duZXIoYXJnMDogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJpc093bmVyKGFkZHJlc3MpXCIoXG4gICAgICBhcmcwOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgb3duZXJzKGFyZzA6IEJpZ051bWJlcmlzaCwgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwib3duZXJzKHVpbnQyNTYpXCIoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIHJlbW92ZSBhbiBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG93bmVyIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmVPd25lcihvd25lcjogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gcmVtb3ZlIGFuIG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gcmVtb3ZlLlxuICAgICAqL1xuICAgIFwicmVtb3ZlT3duZXIoYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gcmVwbGFjZSBhbiBvd25lciB3aXRoIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIG5ld093bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyLlxuICAgICAqIEBwYXJhbSBvd25lciBBZGRyZXNzIG9mIG93bmVyIHRvIGJlIHJlcGxhY2VkLlxuICAgICAqL1xuICAgIHJlcGxhY2VPd25lcihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIHJlcGxhY2UgYW4gb3duZXIgd2l0aCBhIG5ldyBvd25lci4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBuZXdPd25lciBBZGRyZXNzIG9mIG5ldyBvd25lci5cbiAgICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lciB0byBiZSByZXBsYWNlZC5cbiAgICAgKi9cbiAgICBcInJlcGxhY2VPd25lcihhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIHJlcXVpcmVkKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcInJlcXVpcmVkKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFuIG93bmVyIHRvIHJldm9rZSBhIGNvbmZpcm1hdGlvbiBmb3IgYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC5cbiAgICAgKi9cbiAgICByZXZva2VDb25maXJtYXRpb24oXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gcmV2b2tlIGEgY29uZmlybWF0aW9uIGZvciBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIFwicmV2b2tlQ29uZmlybWF0aW9uKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gc3VibWl0IGFuZCBjb25maXJtIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIGRhdGEgVHJhbnNhY3Rpb24gZGF0YSBwYXlsb2FkLiByZXR1cm4gUmV0dXJucyB0cmFuc2FjdGlvbiBJRC5cbiAgICAgKiBAcGFyYW0gZGVzdGluYXRpb24gVHJhbnNhY3Rpb24gdGFyZ2V0IGFkZHJlc3MuXG4gICAgICogQHBhcmFtIHZhbHVlIFRyYW5zYWN0aW9uIGV0aGVyIHZhbHVlLlxuICAgICAqL1xuICAgIHN1Ym1pdFRyYW5zYWN0aW9uKFxuICAgICAgZGVzdGluYXRpb246IHN0cmluZyxcbiAgICAgIHZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBkYXRhOiBCeXRlc0xpa2UsXG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFuIG93bmVyIHRvIHN1Ym1pdCBhbmQgY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSBkYXRhIFRyYW5zYWN0aW9uIGRhdGEgcGF5bG9hZC4gcmV0dXJuIFJldHVybnMgdHJhbnNhY3Rpb24gSUQuXG4gICAgICogQHBhcmFtIGRlc3RpbmF0aW9uIFRyYW5zYWN0aW9uIHRhcmdldCBhZGRyZXNzLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUcmFuc2FjdGlvbiBldGhlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBcInN1Ym1pdFRyYW5zYWN0aW9uKGFkZHJlc3MsdWludDI1NixieXRlcyxzdHJpbmcpXCIoXG4gICAgICBkZXN0aW5hdGlvbjogc3RyaW5nLFxuICAgICAgdmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIGRhdGE6IEJ5dGVzTGlrZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICB0cmFuc2FjdGlvbkNvdW50KG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcInRyYW5zYWN0aW9uQ291bnQoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICB0cmFuc2FjdGlvbnMoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJ0cmFuc2FjdGlvbnModWludDI1NilcIihcbiAgICAgIGFyZzA6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBnZXRGZWUob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiZ2V0RmVlKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgZ2V0RmVlQ29sbGVjdG9yKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImdldEZlZUNvbGxlY3RvcigpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGdldFdpdGhkcmF3V2l0aEZlZShcbiAgICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImdldFdpdGhkcmF3V2l0aEZlZSh1aW50MjU2KVwiKFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFdpdGhkcmF3cyB0b2tlbiBiYWxhbmNlIGZyb20gdGhlIHdhbGxldFxuICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byB3aXRoZHJhd1xuICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiByZWNlaXZlclxuICAgICAqIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMyMCB0b2tlbiB0byB3aXRoZHJhdy5cbiAgICAgKi9cbiAgICB3aXRoZHJhdyhcbiAgICAgIF90b2tlbjogc3RyaW5nLFxuICAgICAgX3RvOiBzdHJpbmcsXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBXaXRoZHJhd3MgdG9rZW4gYmFsYW5jZSBmcm9tIHRoZSB3YWxsZXRcbiAgICAgKiBAcGFyYW0gX2Ftb3VudCBBbW91bnQgdG8gd2l0aGRyYXdcbiAgICAgKiBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgcmVjZWl2ZXJcbiAgICAgKiBAcGFyYW0gX3Rva2VuIEFkZHJlc3Mgb2YgRVJDMjAgdG9rZW4gdG8gd2l0aGRyYXcuXG4gICAgICovXG4gICAgXCJ3aXRoZHJhdyhhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIF90b2tlbjogc3RyaW5nLFxuICAgICAgX3RvOiBzdHJpbmcsXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG4gIH07XG5cbiAgcG9wdWxhdGVUcmFuc2FjdGlvbjoge1xuICAgIE1BWF9PV05FUl9DT1VOVChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcIk1BWF9PV05FUl9DT1VOVCgpXCIoXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gYWRkIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyIHRvIGFkZC5cbiAgICAgKi9cbiAgICBhZGRPd25lcihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBhZGQgYSBuZXcgb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIgdG8gYWRkLlxuICAgICAqL1xuICAgIFwiYWRkT3duZXIoYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBjaGFuZ2UgdGhlIG51bWJlciBvZiByZXF1aXJlZCBjb25maXJtYXRpb25zLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIF9yZXF1aXJlZCBOdW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy5cbiAgICAgKi9cbiAgICBjaGFuZ2VSZXF1aXJlbWVudChcbiAgICAgIF9yZXF1aXJlZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBudW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LlxuICAgICAqIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuXG4gICAgICovXG4gICAgXCJjaGFuZ2VSZXF1aXJlbWVudCh1aW50MjU2KVwiKFxuICAgICAgX3JlcXVpcmVkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbiBvd25lciB0byBjb25maXJtIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuXG4gICAgICovXG4gICAgY29uZmlybVRyYW5zYWN0aW9uKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gY29uZmlybSBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIFwiY29uZmlybVRyYW5zYWN0aW9uKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIGNvbmZpcm1hdGlvbnMoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBhcmcxOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcImNvbmZpcm1hdGlvbnModWludDI1NixhZGRyZXNzKVwiKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgYXJnMTogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFueW9uZSB0byBleGVjdXRlIGEgY29uZmlybWVkIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIGV4ZWN1dGVUcmFuc2FjdGlvbihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIGFueW9uZSB0byBleGVjdXRlIGEgY29uZmlybWVkIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIFwiZXhlY3V0ZVRyYW5zYWN0aW9uKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMgb2YgYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIE51bWJlciBvZiBjb25maXJtYXRpb25zLlxuICAgICAqL1xuICAgIGdldENvbmZpcm1hdGlvbkNvdW50KFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBudW1iZXIgb2YgY29uZmlybWF0aW9ucyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gTnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMuXG4gICAgICovXG4gICAgXCJnZXRDb25maXJtYXRpb25Db3VudCh1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcnJheSB3aXRoIG93bmVyIGFkZHJlc3Nlcywgd2hpY2ggY29uZmlybWVkIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gUmV0dXJucyBhcnJheSBvZiBvd25lciBhZGRyZXNzZXMuXG4gICAgICovXG4gICAgZ2V0Q29uZmlybWF0aW9ucyhcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXJyYXkgd2l0aCBvd25lciBhZGRyZXNzZXMsIHdoaWNoIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIFJldHVybnMgYXJyYXkgb2Ygb3duZXIgYWRkcmVzc2VzLlxuICAgICAqL1xuICAgIFwiZ2V0Q29uZmlybWF0aW9ucyh1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgZ2V0T3duZXJzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiZ2V0T3duZXJzKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBnZXRUcmFuc2FjdGlvbihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiZ2V0VHJhbnNhY3Rpb24odWludDI1NilcIihcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWxlcnMgYXJlIGFwcGxpZWQuXG4gICAgICogQHBhcmFtIGV4ZWN1dGVkIEluY2x1ZGUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25zLiByZXR1cm4gVG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWx0ZXJzIGFyZSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25Db3VudChcbiAgICAgIHBlbmRpbmc6IGJvb2xlYW4sXG4gICAgICBleGVjdXRlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWxlcnMgYXJlIGFwcGxpZWQuXG4gICAgICogQHBhcmFtIGV4ZWN1dGVkIEluY2x1ZGUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25zLiByZXR1cm4gVG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWx0ZXJzIGFyZSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgXCJnZXRUcmFuc2FjdGlvbkNvdW50KGJvb2wsYm9vbClcIihcbiAgICAgIHBlbmRpbmc6IGJvb2xlYW4sXG4gICAgICBleGVjdXRlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbGlzdCBvZiB0cmFuc2FjdGlvbiBJRHMgaW4gZGVmaW5lZCByYW5nZS5cbiAgICAgKiBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuIHJldHVybiBSZXR1cm5zIGFycmF5IG9mIHRyYW5zYWN0aW9uIElEcy5cbiAgICAgKiBAcGFyYW0gZnJvbSBJbmRleCBzdGFydCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS5cbiAgICAgKiBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxuICAgICAqIEBwYXJhbSB0byBJbmRleCBlbmQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25JZHMoXG4gICAgICBmcm9tOiBCaWdOdW1iZXJpc2gsXG4gICAgICB0bzogQmlnTnVtYmVyaXNoLFxuICAgICAgcGVuZGluZzogYm9vbGVhbixcbiAgICAgIGV4ZWN1dGVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBsaXN0IG9mIHRyYW5zYWN0aW9uIElEcyBpbiBkZWZpbmVkIHJhbmdlLlxuICAgICAqIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gcmV0dXJuIFJldHVybnMgYXJyYXkgb2YgdHJhbnNhY3Rpb24gSURzLlxuICAgICAqIEBwYXJhbSBmcm9tIEluZGV4IHN0YXJ0IHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LlxuICAgICAqIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICogQHBhcmFtIHRvIEluZGV4IGVuZCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS5cbiAgICAgKi9cbiAgICBcImdldFRyYW5zYWN0aW9uSWRzKHVpbnQyNTYsdWludDI1Nixib29sLGJvb2wpXCIoXG4gICAgICBmcm9tOiBCaWdOdW1iZXJpc2gsXG4gICAgICB0bzogQmlnTnVtYmVyaXNoLFxuICAgICAgcGVuZGluZzogYm9vbGVhbixcbiAgICAgIGV4ZWN1dGVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29uZmlybWF0aW9uIHN0YXR1cyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELiByZXR1cm4gQ29uZmlybWF0aW9uIHN0YXR1cy5cbiAgICAgKi9cbiAgICBpc0NvbmZpcm1lZChcbiAgICAgIHRyYW5zYWN0aW9uSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbmZpcm1hdGlvbiBzdGF0dXMgb2YgYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4gcmV0dXJuIENvbmZpcm1hdGlvbiBzdGF0dXMuXG4gICAgICovXG4gICAgXCJpc0NvbmZpcm1lZCh1aW50MjU2KVwiKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgaXNPd25lcihcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiaXNPd25lcihhZGRyZXNzKVwiKFxuICAgICAgYXJnMDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgb3duZXJzKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJvd25lcnModWludDI1NilcIihcbiAgICAgIGFyZzA6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byByZW1vdmUgYW4gb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lciB0byByZW1vdmUuXG4gICAgICovXG4gICAgcmVtb3ZlT3duZXIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gcmVtb3ZlIGFuIG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gcmVtb3ZlLlxuICAgICAqL1xuICAgIFwicmVtb3ZlT3duZXIoYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byByZXBsYWNlIGFuIG93bmVyIHdpdGggYSBuZXcgb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gYmUgcmVwbGFjZWQuXG4gICAgICovXG4gICAgcmVwbGFjZU93bmVyKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byByZXBsYWNlIGFuIG93bmVyIHdpdGggYSBuZXcgb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC5cbiAgICAgKiBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiBuZXcgb3duZXIuXG4gICAgICogQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gYmUgcmVwbGFjZWQuXG4gICAgICovXG4gICAgXCJyZXBsYWNlT3duZXIoYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIHJlcXVpcmVkKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwicmVxdWlyZWQoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbiBvd25lciB0byByZXZva2UgYSBjb25maXJtYXRpb24gZm9yIGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuXG4gICAgICovXG4gICAgcmV2b2tlQ29uZmlybWF0aW9uKFxuICAgICAgdHJhbnNhY3Rpb25JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYW4gb3duZXIgdG8gcmV2b2tlIGEgY29uZmlybWF0aW9uIGZvciBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELlxuICAgICAqL1xuICAgIFwicmV2b2tlQ29uZmlybWF0aW9uKHVpbnQyNTYpXCIoXG4gICAgICB0cmFuc2FjdGlvbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbiBvd25lciB0byBzdWJtaXQgYW5kIGNvbmZpcm0gYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gZGF0YSBUcmFuc2FjdGlvbiBkYXRhIHBheWxvYWQuIHJldHVybiBSZXR1cm5zIHRyYW5zYWN0aW9uIElELlxuICAgICAqIEBwYXJhbSBkZXN0aW5hdGlvbiBUcmFuc2FjdGlvbiB0YXJnZXQgYWRkcmVzcy5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVHJhbnNhY3Rpb24gZXRoZXIgdmFsdWUuXG4gICAgICovXG4gICAgc3VibWl0VHJhbnNhY3Rpb24oXG4gICAgICBkZXN0aW5hdGlvbjogc3RyaW5nLFxuICAgICAgdmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIGRhdGE6IEJ5dGVzTGlrZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbiBvd25lciB0byBzdWJtaXQgYW5kIGNvbmZpcm0gYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0gZGF0YSBUcmFuc2FjdGlvbiBkYXRhIHBheWxvYWQuIHJldHVybiBSZXR1cm5zIHRyYW5zYWN0aW9uIElELlxuICAgICAqIEBwYXJhbSBkZXN0aW5hdGlvbiBUcmFuc2FjdGlvbiB0YXJnZXQgYWRkcmVzcy5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVHJhbnNhY3Rpb24gZXRoZXIgdmFsdWUuXG4gICAgICovXG4gICAgXCJzdWJtaXRUcmFuc2FjdGlvbihhZGRyZXNzLHVpbnQyNTYsYnl0ZXMsc3RyaW5nKVwiKFxuICAgICAgZGVzdGluYXRpb246IHN0cmluZyxcbiAgICAgIHZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBkYXRhOiBCeXRlc0xpa2UsXG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICB0cmFuc2FjdGlvbkNvdW50KG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwidHJhbnNhY3Rpb25Db3VudCgpXCIoXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICB0cmFuc2FjdGlvbnMoXG4gICAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcInRyYW5zYWN0aW9ucyh1aW50MjU2KVwiKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgZ2V0RmVlKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiZ2V0RmVlKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBnZXRGZWVDb2xsZWN0b3Iob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJnZXRGZWVDb2xsZWN0b3IoKVwiKFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgZ2V0V2l0aGRyYXdXaXRoRmVlKFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJnZXRXaXRoZHJhd1dpdGhGZWUodWludDI1NilcIihcbiAgICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFdpdGhkcmF3cyB0b2tlbiBiYWxhbmNlIGZyb20gdGhlIHdhbGxldFxuICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byB3aXRoZHJhd1xuICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiByZWNlaXZlclxuICAgICAqIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMyMCB0b2tlbiB0byB3aXRoZHJhdy5cbiAgICAgKi9cbiAgICB3aXRoZHJhdyhcbiAgICAgIF90b2tlbjogc3RyaW5nLFxuICAgICAgX3RvOiBzdHJpbmcsXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFdpdGhkcmF3cyB0b2tlbiBiYWxhbmNlIGZyb20gdGhlIHdhbGxldFxuICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byB3aXRoZHJhd1xuICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiByZWNlaXZlclxuICAgICAqIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMyMCB0b2tlbiB0byB3aXRoZHJhdy5cbiAgICAgKi9cbiAgICBcIndpdGhkcmF3KGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgX3Rva2VuOiBzdHJpbmcsXG4gICAgICBfdG86IHN0cmluZyxcbiAgICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuICB9O1xufVxuIl19