{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { LocalStorage } from '../services/local_storage';\nimport { initializeAppNoMetamaskOrLocked, initWallet, initWeb3 } from '../store/actions';\nimport { getWeb3State } from '../store/blockchain/selectors';\nimport { ToolbarContentContainer } from './common/toolbar_content';\nimport { GeneralLayout } from './general_layout';\n\nconst toolbar = /*#__PURE__*/_jsx(ToolbarContentContainer, {});\n\nlet localStorage = null;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      window.addEventListener(\"load\", async () => {\n        if (!localStorage) localStorage = new LocalStorage(window.localStorage);\n        await this.props.initWeb3(); //this.props.onConnectWallet();\n      });\n    });\n\n    _defineProperty(this, \"render\", () => {\n      return /*#__PURE__*/_jsx(GeneralLayout, {\n        toolbar: toolbar,\n        children: this.props.children\n      });\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    web3State: getWeb3State(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInitMetamaskState: () => dispatch(initializeAppNoMetamaskOrLocked()),\n    onConnectWallet: () => dispatch(initWallet()),\n    initWeb3: () => dispatch(initWeb3())\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\nexport { App, AppContainer };","map":null,"metadata":{},"sourceType":"module"}