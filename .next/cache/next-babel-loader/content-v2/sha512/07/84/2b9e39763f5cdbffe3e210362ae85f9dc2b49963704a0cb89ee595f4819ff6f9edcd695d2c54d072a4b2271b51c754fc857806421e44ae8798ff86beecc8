{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/account/uniswap_swap.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { ChainId, ETH } from 'uniswap-dapp-integration-shared';\nimport UniswapReact from 'uniswap-react';\n\nfunction App() {\n  _s();\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      uniswapDappSharedLogicContext = _React$useState2[0],\n      setUniswapDappSharedLogicContext = _React$useState2[1];\n\n  console.log(ETH.GORLI().contractAddress);\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var accounts, uniswapDappSharedLogicContext;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return window.ethereum.request({\n                method: 'eth_requestAccounts'\n              });\n\n            case 2:\n              accounts = _context.sent;\n              uniswapDappSharedLogicContext = {\n                supportedNetworkTokens: [{\n                  chainId: ChainId.MAINNET,\n                  defaultInputValue: '0.000001',\n                  defaultInputToken: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n                  defaultOutputToken: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',\n                  supportedTokens: [{\n                    contractAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'\n                  }]\n                }],\n                ethereumAddress: accounts[0],\n                ethereumProvider: window.ethereum // theming: {\n                //   backgroundColor: 'red',\n                //   button: { textColor: 'white', backgroundColor: 'blue' },\n                //   panel: { textColor: 'black', backgroundColor: 'yellow' },\n                //   textColor: 'orange',\n                // },\n\n              };\n              setUniswapDappSharedLogicContext(uniswapDappSharedLogicContext);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uniswap-container\",\n      children: uniswapDappSharedLogicContext !== undefined && /*#__PURE__*/_jsxDEV(UniswapReact, {\n        uniswapDappSharedLogicContext: uniswapDappSharedLogicContext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pWiUm0HiaP0OdV/dBB7fwCk4bHA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/account/uniswap_swap.tsx"],"names":["React","useEffect","ChainId","ETH","UniswapReact","App","useState","undefined","uniswapDappSharedLogicContext","setUniswapDappSharedLogicContext","console","log","GORLI","contractAddress","window","ethereum","request","method","accounts","supportedNetworkTokens","chainId","MAINNET","defaultInputValue","defaultInputToken","defaultOutputToken","supportedTokens","ethereumAddress","ethereumProvider"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,OADF,EAEEC,GAFF,QAIO,iCAJP;AAKA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAAA,wBAEXL,KAAK,CAACM,QAAN,CAA0DC,SAA1D,CAFW;AAAA;AAAA,MACNC,6BADM;AAAA,MACyBC,gCADzB;;AAGbC,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACS,KAAJ,GAAYC,eAAxB;AACAZ,EAAAA,SAAS,CAAC,YAAM;AACd,6DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEyBa,MAAD,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC;AACtDC,gBAAAA,MAAM,EAAE;AAD8C,eAAjC,CAFxB;;AAAA;AAEOC,cAAAA,QAFP;AAMOV,cAAAA,6BANP,GAMsE;AACnEW,gBAAAA,sBAAsB,EAAE,CACtB;AACEC,kBAAAA,OAAO,EAAElB,OAAO,CAACmB,OADnB;AAEEC,kBAAAA,iBAAiB,EAAE,UAFrB;AAGEC,kBAAAA,iBAAiB,EAAE,4CAHrB;AAIEC,kBAAAA,kBAAkB,EAAE,4CAJtB;AAKEC,kBAAAA,eAAe,EAAE,CACf;AACEZ,oBAAAA,eAAe,EAAE;AADnB,mBADe;AALnB,iBADsB,CAD2C;AAcnEa,gBAAAA,eAAe,EAAER,QAAQ,CAAC,CAAD,CAd0C;AAenES,gBAAAA,gBAAgB,EAAGb,MAAD,CAAgBC,QAfiC,CAgBnE;AACA;AACA;AACA;AACA;AACA;;AArBmE,eANtE;AA8BCN,cAAAA,gCAAgC,CAACD,6BAAD,CAAhC;;AA9BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAgCD,GAjCQ,EAiCN,EAjCM,CAAT;AAmCA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,gBACGA,6BAA6B,KAAKD,SAAlC,iBACC,QAAC,YAAD;AACE,QAAA,6BAA6B,EAAEC;AADjC;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAlDQH,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  ChainId,\n  ETH,\n  UniswapDappSharedLogicContext,\n} from 'uniswap-dapp-integration-shared';\nimport UniswapReact from 'uniswap-react';\n\nfunction App() {\n  const [uniswapDappSharedLogicContext, setUniswapDappSharedLogicContext] =\n    React.useState<undefined | UniswapDappSharedLogicContext>(undefined);\n  console.log(ETH.GORLI().contractAddress)\n  useEffect(() => {\n    (async () => {\n      // MetaMask\n      const accounts = await (window as any).ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      const uniswapDappSharedLogicContext: UniswapDappSharedLogicContext = {\n        supportedNetworkTokens: [\n          {\n            chainId: ChainId.MAINNET,\n            defaultInputValue: '0.000001',\n            defaultInputToken: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n            defaultOutputToken: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',\n            supportedTokens: [\n              {\n                contractAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',\n              },\n            ],\n          }\n        ],\n        ethereumAddress: accounts[0],\n        ethereumProvider: (window as any).ethereum,\n        // theming: {\n        //   backgroundColor: 'red',\n        //   button: { textColor: 'white', backgroundColor: 'blue' },\n        //   panel: { textColor: 'black', backgroundColor: 'yellow' },\n        //   textColor: 'orange',\n        // },\n      };\n\n      setUniswapDappSharedLogicContext(uniswapDappSharedLogicContext);\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"uniswap-container\">\n        {uniswapDappSharedLogicContext !== undefined && (\n          <UniswapReact\n            uniswapDappSharedLogicContext={uniswapDappSharedLogicContext}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}