{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ethers, utils } from \"ethers\";\nimport { PureComponent } from \"react\";\nimport { Alert, Button, Container, Form, InputGroup, Spinner } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addToken } from \"../../services/metamask\";\nimport { initBalances, reviewSwap, startAllowanceAndSwapSteps, startSwapStep } from \"../../store/actions\";\nimport { getBalances, getGasPrice, getGSNProvider, getPaymasterData, getTokenBalances, getWeb3State } from \"../../store/blockchain/selectors\";\nimport { Web3State } from \"../../types/blockchain\";\nconst maxGasUsage = 1600000;\nvar SwapState;\n\n(function (SwapState) {\n  SwapState[SwapState[\"Init\"] = 0] = \"Init\";\n  SwapState[SwapState[\"Loading\"] = 1] = \"Loading\";\n  SwapState[SwapState[\"Done\"] = 2] = \"Done\";\n})(SwapState || (SwapState = {}));\n\nclass SwapToken extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      amount: \"\",\n      swapState: SwapState.Init,\n      txHash: null,\n      gasUsed: \"\",\n      selectedToken: process.env.ZRO_TOKEN,\n      txPrice: \"\",\n      errorMessage: null,\n      reviewSwap: false,\n      swapReviewResponse: \"\",\n      deposited: \"\",\n      withdrawn: \"\"\n    });\n\n    _defineProperty(this, \"addToken\", async token => {\n      try {\n        await addToken(token);\n      } catch (e) {\n        console.log(e);\n      }\n    });\n\n    _defineProperty(this, \"onSwap\", res => {\n      if (res.error) {\n        return this.setState({\n          swapState: SwapState.Init,\n          errorMessage: res.message\n        });\n      }\n\n      this.setState({\n        txHash: res.data.txHash,\n        gasUsed: res.data.gasUsed,\n        swapState: SwapState.Done,\n        txPrice: res.data.txPrice,\n        deposited: res.data.deposited,\n        withdrawn: res.data.withdrawn\n      });\n    });\n\n    _defineProperty(this, \"reviewSwap\", async () => {\n      const {\n        selectedToken,\n        amount\n      } = this.state;\n      if (selectedToken === \"\") return null;\n      const {\n        tokensBalance\n      } = this.props;\n      const tokenBalance = tokensBalance.find(t => t.token.address === selectedToken);\n      const swapReviewResponse = await this.props.reviewSwap(amount, tokenBalance.token);\n      this.setState({\n        swapReviewResponse: ethers.utils.formatEther(swapReviewResponse)\n      });\n    });\n\n    _defineProperty(this, \"swap\", async address => {\n      const {\n        amount,\n        reviewSwap\n      } = this.state;\n\n      if (!reviewSwap) {\n        this.setState({\n          reviewSwap: true\n        });\n        return this.reviewSwap();\n      }\n\n      this.setState({\n        swapState: SwapState.Loading,\n        errorMessage: null\n      });\n      const {\n        tokensBalance,\n        paymasterData\n      } = this.props;\n      const tokenBalance = tokensBalance.find(t => t.token.address === address);\n      const amountBN = utils.parseUnits(amount, tokenBalance.token.decimals);\n      const feeBN = utils.parseUnits(paymasterData.paymentData.fee, tokenBalance.token.decimals);\n      const allowanceBN = utils.parseUnits(tokenBalance.tokenSwapAllowance, tokenBalance.token.decimals);\n\n      try {\n        let minAllowanceBN = amountBN.add(feeBN);\n\n        if (allowanceBN.lt(minAllowanceBN)) {\n          await this.props.startAllowanceAndSwapSteps(tokenBalance.token, process.env.GSN_TOKEN_SWAP, amount, this.onSwap);\n        } else {\n          this.props.startSwapStep(tokenBalance.token, amount, this.onSwap);\n        }\n      } catch (e) {\n        const {\n          message\n        } = e;\n\n        if (message.startsWith(\"user rejected transaction\")) {} else if (message.includes(\"Not enough to pay for tx\")) {\n          this.setState({\n            swapState: SwapState.Init,\n            errorMessage: \"Not enough to pay for tx, try swapping more tokens\"\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"renderTokenInfo\", () => {\n      const {\n        selectedToken\n      } = this.state;\n      if (selectedToken === \"\") return null;\n      const {\n        tokensBalance\n      } = this.props;\n      const tokenBalance = tokensBalance.find(t => t.token.address === selectedToken);\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsxs(\"strong\", {\n            children: [tokenBalance.token.symbol, \" Balance: \"]\n          }), /*#__PURE__*/_jsx(\"span\", {\n            children: Number(utils.formatUnits(tokenBalance.balance)).toLocaleString()\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"strong\", {}), /*#__PURE__*/_jsxs(\"span\", {\n            children: [\"1 ETH  = \", Number(utils.formatUnits(tokenBalance.uniswapValue)).toLocaleString(), \" \", tokenBalance.token.symbol]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"strong\", {\n            children: \"Total Supply: \"\n          }), /*#__PURE__*/_jsx(\"span\", {\n            children: Number(tokenBalance.totalSupply).toLocaleString()\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"strong\", {\n            children: \"Total Burned: \"\n          }), /*#__PURE__*/_jsx(\"span\", {\n            children: Number(tokenBalance.burned).toLocaleString()\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(Button, {\n            variant: \"link\",\n            onClick: () => this.addToken(tokenBalance.token),\n            children: \"Add token To Metamask\"\n          })\n        })]\n      });\n    });\n\n    _defineProperty(this, \"renderAmountToGet\", () => {\n      const {\n        amount,\n        selectedToken,\n        reviewSwap,\n        swapReviewResponse\n      } = this.state;\n      if (amount === \"\" || isNaN(parseFloat(amount))) return null;\n      const title = reviewSwap ? \"Swap\" : \"Review Swap\";\n      return /*#__PURE__*/_jsxs(\"div\", {\n        children: [swapReviewResponse === \"\" ? null : /*#__PURE__*/_jsxs(\"small\", {\n          children: [swapReviewResponse, \" ETH\"]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(Button, {\n            className: \"swap_button\",\n            onClick: () => this.swap(selectedToken),\n            children: title\n          })\n        })]\n      });\n    });\n\n    _defineProperty(this, \"renderSwapInfo\", () => {\n      const {\n        swapState,\n        txHash,\n        gasUsed,\n        selectedToken,\n        errorMessage,\n        deposited,\n        withdrawn\n      } = this.state;\n      if (selectedToken === \"\") return null;\n      const {\n        tokensBalance\n      } = this.props;\n\n      if (swapState === SwapState.Loading) {\n        return /*#__PURE__*/_jsx(Spinner, {\n          animation: \"border\",\n          role: \"status\",\n          children: /*#__PURE__*/_jsx(\"span\", {\n            className: \"visually-hidden\"\n          })\n        });\n      } else if (swapState === SwapState.Done) {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"div\", {\n            children: \"Transaction Mined\"\n          }), /*#__PURE__*/_jsx(\"a\", {\n            target: \"_blank\",\n            href: `https://goerli.etherscan.io/tx/${txHash}`,\n            children: \"View on Goerli\"\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"strong\", {\n              children: \"Gas Used: \"\n            }), gasUsed]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"strong\", {\n              children: \"Amount Swapped: \"\n            }), deposited, \" ETH\"]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"strong\", {\n              children: \"Amount Gotten: \"\n            }), withdrawn, \" ETH\"]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"strong\", {\n              children: \"Amount Charged: \"\n            }), parseFloat(deposited) - parseFloat(withdrawn), \" ETH\"]\n          })]\n        });\n      } else if (swapState === SwapState.Init && errorMessage) {\n        return /*#__PURE__*/_jsx(Alert, {\n          variant: \"danger\",\n          onClose: () => this.setState({\n            errorMessage: null\n          }),\n          dismissible: true,\n          children: errorMessage\n        });\n      }\n\n      return /*#__PURE__*/_jsx(Container, {\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(InputGroup, {\n            className: \"mb-3\",\n            style: {\n              width: \"200px\",\n              margin: \"5px auto 0px auto\"\n            },\n            children: /*#__PURE__*/_jsx(Form.Control, {\n              className: \"swap\",\n              placeholder: \"Amount to swap\",\n              \"aria-label\": \"Amount to swap\",\n              \"aria-describedby\": \"basic-addon1\",\n              type: \"number\",\n              value: this.state.amount,\n              onChange: ({\n                target\n              }) => this.setState({\n                amount: target.value,\n                errorMessage: null,\n                reviewSwap: false,\n                swapReviewResponse: \"\"\n              })\n            })\n          }), this.renderAmountToGet()]\n        })\n      });\n    });\n\n    _defineProperty(this, \"renderUserInfo\", () => {\n      const {\n        ethBalance\n      } = this.props;\n      return /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"strong\", {\n          children: \"ETH Balance: \"\n        }), /*#__PURE__*/_jsx(\"span\", {\n          children: Number(utils.formatUnits(ethBalance.balance)).toLocaleString()\n        })]\n      });\n    });\n  }\n\n  render() {\n    const {\n      ethBalance,\n      tokensBalance,\n      web3State\n    } = this.props;\n    if (web3State !== Web3State.Done || !ethBalance || tokensBalance.length === 0) return null;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"tokens_info\",\n      children: [this.renderUserInfo(), this.renderTokenInfo(), this.renderSwapInfo()]\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ethBalance: getBalances(state),\n    tokensBalance: getTokenBalances(state),\n    gsnProvider: getGSNProvider(state),\n    gasPrice: getGasPrice(state),\n    web3State: getWeb3State(state),\n    paymasterData: getPaymasterData(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchBalances: () => dispatch(initBalances()),\n    startAllowanceAndSwapSteps: (token, to, amount, callback) => dispatch(startAllowanceAndSwapSteps(token, to, amount, callback)),\n    startSwapStep: (token, amount, callback) => dispatch(startSwapStep(token, amount, callback)),\n    reviewSwap: (amount, token) => dispatch(reviewSwap(amount, token))\n  };\n};\n\nconst SwapTokenContainer = connect(mapStateToProps, mapDispatchToProps)(SwapToken);\nexport { SwapTokenContainer };","map":null,"metadata":{},"sourceType":"module"}