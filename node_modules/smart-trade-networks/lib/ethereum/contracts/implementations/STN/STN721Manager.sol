// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../../interfaces/ISTN721Manager.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./STN721.sol";

contract STN721Manager is ISTN721Manager, Ownable {

    address[] private _stns; 
    
    /** @dev in the form of  stn721Parent => (tokenId => stn721Child) */
    mapping (address => mapping(uint256 => address)) private _stnIndex;

    mapping (address => bool) private _isController;

    /**
     * @dev Throws if called by any account other than the controller.
     */
    modifier onlyController() {
        require(_isController[_msgSender()] , "Controller: caller is not the controller");
        _;
    }

    /** @dev owner is Produce.sol contract */
    constructor (address _produceContract, address[] memory _controllers) {
        require(_produceContract != address(0), "Produce contract address cannot be 0");
        transferOwnership(_produceContract);
        for(uint8 j = 0; j < _controllers.length; j++) {
            address controller = _controllers[j];
            require(controller != address(0), "Controller address cannot be 0");
            _isController[controller] = true;
        }
    }


    function addController(address _newController) external virtual override onlyController {
        require(_newController != address(0), "Controller address cannot be 0");
        require(!_isController[_newController], "Controller already added");
        _isController[_newController] = true;
        emit AddController(_newController);
    }

    function removeController(address _controller) external virtual override onlyController {
        require(_controller != address(0), "Controller address cannot be 0");
        require(_isController[_controller], "Address is not controller");
        _isController[_controller] = false;
        emit RemoveController(_controller);
    }


    function createParentSTN721(
        string memory name, 
        string memory symbol
    ) external virtual override onlyController returns(address) {
        STN721 child = new STN721(address(0), 0, name, symbol);
        _stns.push(address(child));
        emit CreateSTN721Parent(name, symbol);
        return address(child);
        
    }

    function createChildSTN721(
        address stn721Parent, 
        uint256 tokenId, 
        string memory name, 
        string memory symbol
    ) external virtual override onlyOwner returns(address) {
        require(stn721Parent != address(0), "STN721 Parent cannot be 0");
        require(tokenId > 0, "Token Id cannot be 0");
        require (_stnIndex[stn721Parent][tokenId] != address(0), "Child already created");
        STN721 parent = STN721(stn721Parent);
        STN721 child = new STN721(stn721Parent, tokenId, name, symbol);
        require (parent.attachChild(address(child), tokenId), "On attach failed");
        _stnIndex[stn721Parent][tokenId] = address(child);
        _stns.push(address(child));
        emit CreateSTN721Child(stn721Parent, tokenId, name, symbol); 
        return address(child);
    }


    /** @dev just for STN721 which doesnt have parent */
    function mint(address _stn721, bool divisible, uint256[] memory tokenIds, address receiver) external virtual override onlyOwner {
        STN721 stn721 = STN721(_stn721);
        require(stn721.getParentAddress() == address(0), "STN721 contract has a parent, use mintChild function instead");
        stn721.mint(divisible, tokenIds, receiver); 
    }

    /** @dev just for STN721 which has parent, tokens should go to the owner of the parent token */
    function mintChild(address stn721Child, bool divisible, uint256[] memory tokenIds) external virtual override onlyOwner {
        STN721 child = STN721(stn721Child); 
        address parentAddress = child.getParentAddress();
        require(parentAddress != address(0), "STN721 contract does not have a  parent, use mint function instead");
        uint256 parentTokenId = child.getParentId();
        STN721 parent = STN721(parentAddress); 
        address ownerOfParentToken = parent.ownerOf(parentTokenId);
        child.mint(divisible, tokenIds, ownerOfParentToken);
    }


    function getChild(address stn721Parent, uint256 tokenId) external virtual override view returns(address) {
        return _stnIndex[stn721Parent][tokenId];
    }

    function getAll() public virtual override view returns(address[] memory) {
        return _stns;
    } 
}