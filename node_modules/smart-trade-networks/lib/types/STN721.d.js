"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STN721 = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _contracts = require("@ethersproject/contracts");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var STN721 = /*#__PURE__*/function (_Contract) {
  (0, _inherits2["default"])(STN721, _Contract);

  var _super = _createSuper(STN721);

  function STN721() {
    var _this;

    (0, _classCallCheck2["default"])(this, STN721);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "interface", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functions", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "callStatic", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filters", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "estimateGas", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "populateTransaction", void 0);
    return _this;
  }

  return STN721;
}(_contracts.Contract);

exports.STN721 = STN721;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9TVE43MjEuZC50cyJdLCJuYW1lcyI6WyJTVE43MjEiLCJDb250cmFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7OztJQWlNYUEsTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQUFlQyxtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IHtcbiAgZXRoZXJzLFxuICBFdmVudEZpbHRlcixcbiAgU2lnbmVyLFxuICBCaWdOdW1iZXIsXG4gIEJpZ051bWJlcmlzaCxcbiAgUG9wdWxhdGVkVHJhbnNhY3Rpb24sXG59IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7XG4gIENvbnRyYWN0LFxuICBDb250cmFjdFRyYW5zYWN0aW9uLFxuICBPdmVycmlkZXMsXG4gIENhbGxPdmVycmlkZXMsXG59IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb250cmFjdHNcIjtcbmltcG9ydCB7IEJ5dGVzTGlrZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgTGlzdGVuZXIsIFByb3ZpZGVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3ZpZGVyc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25GcmFnbWVudCwgRXZlbnRGcmFnbWVudCwgUmVzdWx0IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FiaVwiO1xuXG5pbnRlcmZhY2UgU1RONzIxSW50ZXJmYWNlIGV4dGVuZHMgZXRoZXJzLnV0aWxzLkludGVyZmFjZSB7XG4gIGZ1bmN0aW9uczoge1xuICAgIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJiYWxhbmNlT2YoYWRkcmVzcylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImdldEFwcHJvdmVkKHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJpc0FwcHJvdmVkRm9yQWxsKGFkZHJlc3MsYWRkcmVzcylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcIm5hbWUoKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwib3duZXIoKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwib3duZXJPZih1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwicmVub3VuY2VPd25lcnNoaXAoKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInNldEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MsYm9vbClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInN1cHBvcnRzSW50ZXJmYWNlKGJ5dGVzNClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInN5bWJvbCgpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJ0b2tlblVSSSh1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwidHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImF0dGFjaENoaWxkKGFkZHJlc3MsdWludDI1NilcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcIm1pbnQoYm9vbCx1aW50MjU2W10sYWRkcmVzcylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImdldFBhcmVudEFkZHJlc3MoKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiZ2V0UGFyZW50SWQoKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiaXNEaXZpc2libGUodWludDI1NilcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImdldENoaWxkSW5kZXhCeUlkKHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJnZXRDaGlsZEluZGV4QnlBZGRyZXNzKGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gIH07XG5cbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiYXBwcm92ZVwiLFxuICAgIHZhbHVlczogW3N0cmluZywgQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcImJhbGFuY2VPZlwiLCB2YWx1ZXM6IFtzdHJpbmddKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRBcHByb3ZlZFwiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJpc0FwcHJvdmVkRm9yQWxsXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBzdHJpbmddXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQ6IFwibmFtZVwiLCB2YWx1ZXM/OiB1bmRlZmluZWQpOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcIm93bmVyXCIsIHZhbHVlcz86IHVuZGVmaW5lZCk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwib3duZXJPZlwiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJyZW5vdW5jZU93bmVyc2hpcFwiLFxuICAgIHZhbHVlcz86IHVuZGVmaW5lZFxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInNhZmVUcmFuc2ZlckZyb21cIixcbiAgICB2YWx1ZXM6IFtzdHJpbmcsIHN0cmluZywgQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInNldEFwcHJvdmFsRm9yQWxsXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBib29sZWFuXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInN1cHBvcnRzSW50ZXJmYWNlXCIsXG4gICAgdmFsdWVzOiBbQnl0ZXNMaWtlXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcInN5bWJvbFwiLCB2YWx1ZXM/OiB1bmRlZmluZWQpOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInRva2VuVVJJXCIsXG4gICAgdmFsdWVzOiBbQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInRyYW5zZmVyRnJvbVwiLFxuICAgIHZhbHVlczogW3N0cmluZywgc3RyaW5nLCBCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwidHJhbnNmZXJPd25lcnNoaXBcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmddXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiYXR0YWNoQ2hpbGRcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmcsIEJpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJtaW50XCIsXG4gICAgdmFsdWVzOiBbYm9vbGVhbiwgQmlnTnVtYmVyaXNoW10sIHN0cmluZ11cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRQYXJlbnRBZGRyZXNzXCIsXG4gICAgdmFsdWVzPzogdW5kZWZpbmVkXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0UGFyZW50SWRcIixcbiAgICB2YWx1ZXM/OiB1bmRlZmluZWRcbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJpc0RpdmlzaWJsZVwiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRDaGlsZEluZGV4QnlJZFwiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJnZXRDaGlsZEluZGV4QnlBZGRyZXNzXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nXVxuICApOiBzdHJpbmc7XG5cbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJhcHByb3ZlXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJiYWxhbmNlT2ZcIiwgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImdldEFwcHJvdmVkXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJpc0FwcHJvdmVkRm9yQWxsXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJuYW1lXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJvd25lclwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwib3duZXJPZlwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwicmVub3VuY2VPd25lcnNoaXBcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInNhZmVUcmFuc2ZlckZyb21cIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInNldEFwcHJvdmFsRm9yQWxsXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJzdXBwb3J0c0ludGVyZmFjZVwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwic3ltYm9sXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJ0b2tlblVSSVwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwidHJhbnNmZXJGcm9tXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0cmFuc2Zlck93bmVyc2hpcFwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiYXR0YWNoQ2hpbGRcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50OiBcIm1pbnRcIiwgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImdldFBhcmVudEFkZHJlc3NcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImdldFBhcmVudElkXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJpc0RpdmlzaWJsZVwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0Q2hpbGRJbmRleEJ5SWRcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImdldENoaWxkSW5kZXhCeUFkZHJlc3NcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuXG4gIGV2ZW50czoge1xuICAgIFwiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJBcHByb3ZhbEZvckFsbChhZGRyZXNzLGFkZHJlc3MsYm9vbClcIjogRXZlbnRGcmFnbWVudDtcbiAgICBcIkNoaWxkQXR0YWNoZWQoYWRkcmVzcyx1aW50MjU2KVwiOiBFdmVudEZyYWdtZW50O1xuICAgIFwiT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKVwiOiBFdmVudEZyYWdtZW50O1xuICAgIFwiVHJhbnNmZXIoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gIH07XG5cbiAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogXCJBcHByb3ZhbFwiKTogRXZlbnRGcmFnbWVudDtcbiAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogXCJBcHByb3ZhbEZvckFsbFwiKTogRXZlbnRGcmFnbWVudDtcbiAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogXCJDaGlsZEF0dGFjaGVkXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIk93bmVyc2hpcFRyYW5zZmVycmVkXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIlRyYW5zZmVyXCIpOiBFdmVudEZyYWdtZW50O1xufVxuXG5leHBvcnQgY2xhc3MgU1RONzIxIGV4dGVuZHMgQ29udHJhY3Qge1xuICBjb25uZWN0KHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyIHwgc3RyaW5nKTogdGhpcztcbiAgYXR0YWNoKGFkZHJlc3NPck5hbWU6IHN0cmluZyk6IHRoaXM7XG4gIGRlcGxveWVkKCk6IFByb21pc2U8dGhpcz47XG5cbiAgb24oZXZlbnQ6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuICBvbmNlKGV2ZW50OiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcbiAgYWRkTGlzdGVuZXIoZXZlbnROYW1lOiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZTogRXZlbnRGaWx0ZXIgfCBzdHJpbmcpOiB0aGlzO1xuICByZW1vdmVMaXN0ZW5lcihldmVudE5hbWU6IGFueSwgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcztcblxuICBpbnRlcmZhY2U6IFNUTjcyMUludGVyZmFjZTtcblxuICBmdW5jdGlvbnM6IHtcbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYXBwcm92ZX0uXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWFwcHJvdmV9LlxuICAgICAqL1xuICAgIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1iYWxhbmNlT2Z9LlxuICAgICAqL1xuICAgIGJhbGFuY2VPZihvd25lcjogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbQmlnTnVtYmVyXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtCaWdOdW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAgICovXG4gICAgZ2V0QXBwcm92ZWQoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtZ2V0QXBwcm92ZWR9LlxuICAgICAqL1xuICAgIFwiZ2V0QXBwcm92ZWQodWludDI1NilcIihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1pc0FwcHJvdmVkRm9yQWxsfS5cbiAgICAgKi9cbiAgICBpc0FwcHJvdmVkRm9yQWxsKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWlzQXBwcm92ZWRGb3JBbGx9LlxuICAgICAqL1xuICAgIFwiaXNBcHByb3ZlZEZvckFsbChhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtib29sZWFuXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS1uYW1lfS5cbiAgICAgKi9cbiAgICBuYW1lKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLW5hbWV9LlxuICAgICAqL1xuICAgIFwibmFtZSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBvd25lcihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIFwib3duZXIoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1vd25lck9mfS5cbiAgICAgKi9cbiAgICBvd25lck9mKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLW93bmVyT2Z9LlxuICAgICAqL1xuICAgIFwib3duZXJPZih1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgcmVub3VuY2VPd25lcnNoaXAob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgICAqL1xuICAgIFwicmVub3VuY2VPd25lcnNoaXAoKVwiKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2FmZVRyYW5zZmVyRnJvbX0uXG4gICAgICovXG4gICAgXCJzYWZlVHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2FmZVRyYW5zZmVyRnJvbX0uXG4gICAgICovXG4gICAgXCJzYWZlVHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGJ5dGVzKVwiKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIF9kYXRhOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBzZXRBcHByb3ZhbEZvckFsbChcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2V0QXBwcm92YWxGb3JBbGx9LlxuICAgICAqL1xuICAgIFwic2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyxib29sKVwiKFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIGFwcHJvdmVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzE2NS1zdXBwb3J0c0ludGVyZmFjZX0uXG4gICAgICovXG4gICAgc3VwcG9ydHNJbnRlcmZhY2UoXG4gICAgICBpbnRlcmZhY2VJZDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5dPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzE2NS1zdXBwb3J0c0ludGVyZmFjZX0uXG4gICAgICovXG4gICAgXCJzdXBwb3J0c0ludGVyZmFjZShieXRlczQpXCIoXG4gICAgICBpbnRlcmZhY2VJZDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5dPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgc3ltYm9sKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgXCJzeW1ib2woKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICB0b2tlblVSSShcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICBcInRva2VuVVJJKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICB0cmFuc2ZlckZyb20oXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS10cmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIHRyYW5zZmVyT3duZXJzaGlwKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcylcIihcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogYXR0YWNoZXMgYSBzdG43MjEgY29udHJhY3QgdG8gYW4gdG9rZW5JZFxuICAgICAqL1xuICAgIGF0dGFjaENoaWxkKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBhdHRhY2hlcyBhIHN0bjcyMSBjb250cmFjdCB0byBhbiB0b2tlbklkXG4gICAgICovXG4gICAgXCJhdHRhY2hDaGlsZChhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICBzdG43MjFDaGlsZDogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIG1pbnQoXG4gICAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIFwibWludChib29sLHVpbnQyNTZbXSxhZGRyZXNzKVwiKFxuICAgICAgZGl2aXNpYmxlOiBib29sZWFuLFxuICAgICAgdG9rZW5JZHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICBnZXRQYXJlbnRBZGRyZXNzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIFwiZ2V0UGFyZW50QWRkcmVzcygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgZ2V0UGFyZW50SWQob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W0JpZ051bWJlcl0+O1xuXG4gICAgXCJnZXRQYXJlbnRJZCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W0JpZ051bWJlcl0+O1xuXG4gICAgaXNEaXZpc2libGUoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgXCJpc0RpdmlzaWJsZSh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5dPjtcblxuICAgIGdldENoaWxkSW5kZXhCeUlkKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgXCJnZXRDaGlsZEluZGV4QnlJZCh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgZ2V0Q2hpbGRJbmRleEJ5QWRkcmVzcyhcbiAgICAgIHN0bjcyMTogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W0JpZ051bWJlcl0+O1xuXG4gICAgXCJnZXRDaGlsZEluZGV4QnlBZGRyZXNzKGFkZHJlc3MpXCIoXG4gICAgICBzdG43MjE6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtCaWdOdW1iZXJdPjtcbiAgfTtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxLWFwcHJvdmV9LlxuICAgKi9cbiAgYXBwcm92ZShcbiAgICB0bzogc3RyaW5nLFxuICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxLWFwcHJvdmV9LlxuICAgKi9cbiAgXCJhcHByb3ZlKGFkZHJlc3MsdWludDI1NilcIihcbiAgICB0bzogc3RyaW5nLFxuICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxLWJhbGFuY2VPZn0uXG4gICAqL1xuICBiYWxhbmNlT2Yob3duZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxLWJhbGFuY2VPZn0uXG4gICAqL1xuICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAqL1xuICBnZXRBcHByb3ZlZChcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAqL1xuICBcImdldEFwcHJvdmVkKHVpbnQyNTYpXCIoXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtaXNBcHByb3ZlZEZvckFsbH0uXG4gICAqL1xuICBpc0FwcHJvdmVkRm9yQWxsKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1pc0FwcHJvdmVkRm9yQWxsfS5cbiAgICovXG4gIFwiaXNBcHByb3ZlZEZvckFsbChhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgb3duZXI6IHN0cmluZyxcbiAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAqL1xuICBuYW1lKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLW5hbWV9LlxuICAgKi9cbiAgXCJuYW1lKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICAgKi9cbiAgb3duZXIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICovXG4gIFwib3duZXIoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1vd25lck9mfS5cbiAgICovXG4gIG93bmVyT2YodG9rZW5JZDogQmlnTnVtYmVyaXNoLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAqL1xuICBcIm93bmVyT2YodWludDI1NilcIihcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgKi9cbiAgcmVub3VuY2VPd25lcnNoaXAob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAqL1xuICBcInJlbm91bmNlT3duZXJzaGlwKClcIihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtc2FmZVRyYW5zZmVyRnJvbX0uXG4gICAqL1xuICBcInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgZnJvbTogc3RyaW5nLFxuICAgIHRvOiBzdHJpbmcsXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtc2FmZVRyYW5zZmVyRnJvbX0uXG4gICAqL1xuICBcInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpXCIoXG4gICAgZnJvbTogc3RyaW5nLFxuICAgIHRvOiBzdHJpbmcsXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIF9kYXRhOiBCeXRlc0xpa2UsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1zZXRBcHByb3ZhbEZvckFsbH0uXG4gICAqL1xuICBzZXRBcHByb3ZhbEZvckFsbChcbiAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgIGFwcHJvdmVkOiBib29sZWFuLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtc2V0QXBwcm92YWxGb3JBbGx9LlxuICAgKi9cbiAgXCJzZXRBcHByb3ZhbEZvckFsbChhZGRyZXNzLGJvb2wpXCIoXG4gICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDMTY1LXN1cHBvcnRzSW50ZXJmYWNlfS5cbiAgICovXG4gIHN1cHBvcnRzSW50ZXJmYWNlKFxuICAgIGludGVyZmFjZUlkOiBCeXRlc0xpa2UsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMxNjUtc3VwcG9ydHNJbnRlcmZhY2V9LlxuICAgKi9cbiAgXCJzdXBwb3J0c0ludGVyZmFjZShieXRlczQpXCIoXG4gICAgaW50ZXJmYWNlSWQ6IEJ5dGVzTGlrZSxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAqL1xuICBzeW1ib2wob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtc3ltYm9sfS5cbiAgICovXG4gIFwic3ltYm9sKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS10b2tlblVSSX0uXG4gICAqL1xuICB0b2tlblVSSSh0b2tlbklkOiBCaWdOdW1iZXJpc2gsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICovXG4gIFwidG9rZW5VUkkodWludDI1NilcIihcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS10cmFuc2ZlckZyb219LlxuICAgKi9cbiAgdHJhbnNmZXJGcm9tKFxuICAgIGZyb206IHN0cmluZyxcbiAgICB0bzogc3RyaW5nLFxuICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxLXRyYW5zZmVyRnJvbX0uXG4gICAqL1xuICBcInRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICBmcm9tOiBzdHJpbmcsXG4gICAgdG86IHN0cmluZyxcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAqL1xuICB0cmFuc2Zlck93bmVyc2hpcChcbiAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgKi9cbiAgXCJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiKFxuICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIGF0dGFjaGVzIGEgc3RuNzIxIGNvbnRyYWN0IHRvIGFuIHRva2VuSWRcbiAgICovXG4gIGF0dGFjaENoaWxkKFxuICAgIHN0bjcyMUNoaWxkOiBzdHJpbmcsXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBhdHRhY2hlcyBhIHN0bjcyMSBjb250cmFjdCB0byBhbiB0b2tlbklkXG4gICAqL1xuICBcImF0dGFjaENoaWxkKGFkZHJlc3MsdWludDI1NilcIihcbiAgICBzdG43MjFDaGlsZDogc3RyaW5nLFxuICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICBtaW50KFxuICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICBcIm1pbnQoYm9vbCx1aW50MjU2W10sYWRkcmVzcylcIihcbiAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgdG9rZW5JZHM6IEJpZ051bWJlcmlzaFtdLFxuICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgZ2V0UGFyZW50QWRkcmVzcyhvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIFwiZ2V0UGFyZW50QWRkcmVzcygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICBnZXRQYXJlbnRJZChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIFwiZ2V0UGFyZW50SWQoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgaXNEaXZpc2libGUoXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICBcImlzRGl2aXNpYmxlKHVpbnQyNTYpXCIoXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICBnZXRDaGlsZEluZGV4QnlJZChcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgXCJnZXRDaGlsZEluZGV4QnlJZCh1aW50MjU2KVwiKFxuICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8c3RyaW5nPjtcblxuICBnZXRDaGlsZEluZGV4QnlBZGRyZXNzKFxuICAgIHN0bjcyMTogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIFwiZ2V0Q2hpbGRJbmRleEJ5QWRkcmVzcyhhZGRyZXNzKVwiKFxuICAgIHN0bjcyMTogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIGNhbGxTdGF0aWM6IHtcbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYXBwcm92ZX0uXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1hcHByb3ZlfS5cbiAgICAgKi9cbiAgICBcImFwcHJvdmUoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgYmFsYW5jZU9mKG93bmVyOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtZ2V0QXBwcm92ZWR9LlxuICAgICAqL1xuICAgIGdldEFwcHJvdmVkKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAgICovXG4gICAgXCJnZXRBcHByb3ZlZCh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1pc0FwcHJvdmVkRm9yQWxsfS5cbiAgICAgKi9cbiAgICBpc0FwcHJvdmVkRm9yQWxsKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1pc0FwcHJvdmVkRm9yQWxsfS5cbiAgICAgKi9cbiAgICBcImlzQXBwcm92ZWRGb3JBbGwoYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLW5hbWV9LlxuICAgICAqL1xuICAgIG5hbWUob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLW5hbWV9LlxuICAgICAqL1xuICAgIFwibmFtZSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgb3duZXIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgXCJvd25lcigpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1vd25lck9mfS5cbiAgICAgKi9cbiAgICBvd25lck9mKHRva2VuSWQ6IEJpZ051bWJlcmlzaCwgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1vd25lck9mfS5cbiAgICAgKi9cbiAgICBcIm93bmVyT2YodWludDI1NilcIihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgb3duZXIuIEl0IHdpbGwgbm90IGJlIHBvc3NpYmxlIHRvIGNhbGwgYG9ubHlPd25lcmAgZnVuY3Rpb25zIGFueW1vcmUuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4gTk9URTogUmVub3VuY2luZyBvd25lcnNoaXAgd2lsbCBsZWF2ZSB0aGUgY29udHJhY3Qgd2l0aG91dCBhbiBvd25lciwgdGhlcmVieSByZW1vdmluZyBhbnkgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIHRvIHRoZSBvd25lci5cbiAgICAgKi9cbiAgICByZW5vdW5jZU93bmVyc2hpcChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgICAqL1xuICAgIFwicmVub3VuY2VPd25lcnNoaXAoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNhZmVUcmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1zYWZlVHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpXCIoXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgX2RhdGE6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBzZXRBcHByb3ZhbEZvckFsbChcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBcInNldEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MsYm9vbClcIihcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMTY1LXN1cHBvcnRzSW50ZXJmYWNlfS5cbiAgICAgKi9cbiAgICBzdXBwb3J0c0ludGVyZmFjZShcbiAgICAgIGludGVyZmFjZUlkOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzE2NS1zdXBwb3J0c0ludGVyZmFjZX0uXG4gICAgICovXG4gICAgXCJzdXBwb3J0c0ludGVyZmFjZShieXRlczQpXCIoXG4gICAgICBpbnRlcmZhY2VJZDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS1zeW1ib2x9LlxuICAgICAqL1xuICAgIHN5bWJvbChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtc3ltYm9sfS5cbiAgICAgKi9cbiAgICBcInN5bWJvbCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICB0b2tlblVSSSh0b2tlbklkOiBCaWdOdW1iZXJpc2gsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS10b2tlblVSSX0uXG4gICAgICovXG4gICAgXCJ0b2tlblVSSSh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS10cmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS10cmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICB0cmFuc2Zlck93bmVyc2hpcChcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgXCJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogYXR0YWNoZXMgYSBzdG43MjEgY29udHJhY3QgdG8gYW4gdG9rZW5JZFxuICAgICAqL1xuICAgIGF0dGFjaENoaWxkKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgLyoqXG4gICAgICogYXR0YWNoZXMgYSBzdG43MjEgY29udHJhY3QgdG8gYW4gdG9rZW5JZFxuICAgICAqL1xuICAgIFwiYXR0YWNoQ2hpbGQoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgbWludChcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIFwibWludChib29sLHVpbnQyNTZbXSxhZGRyZXNzKVwiKFxuICAgICAgZGl2aXNpYmxlOiBib29sZWFuLFxuICAgICAgdG9rZW5JZHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgZ2V0UGFyZW50QWRkcmVzcyhvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgXCJnZXRQYXJlbnRBZGRyZXNzKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgZ2V0UGFyZW50SWQob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiZ2V0UGFyZW50SWQoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBpc0RpdmlzaWJsZShcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgXCJpc0RpdmlzaWJsZSh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICBnZXRDaGlsZEluZGV4QnlJZChcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICBcImdldENoaWxkSW5kZXhCeUlkKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgZ2V0Q2hpbGRJbmRleEJ5QWRkcmVzcyhcbiAgICAgIHN0bjcyMTogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiZ2V0Q2hpbGRJbmRleEJ5QWRkcmVzcyhhZGRyZXNzKVwiKFxuICAgICAgc3RuNzIxOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuICB9O1xuXG4gIGZpbHRlcnM6IHtcbiAgICBBcHByb3ZhbChcbiAgICAgIG93bmVyOiBzdHJpbmcgfCBudWxsLFxuICAgICAgYXBwcm92ZWQ6IHN0cmluZyB8IG51bGwsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2ggfCBudWxsXG4gICAgKTogRXZlbnRGaWx0ZXI7XG5cbiAgICBBcHByb3ZhbEZvckFsbChcbiAgICAgIG93bmVyOiBzdHJpbmcgfCBudWxsLFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyB8IG51bGwsXG4gICAgICBhcHByb3ZlZDogbnVsbFxuICAgICk6IEV2ZW50RmlsdGVyO1xuXG4gICAgQ2hpbGRBdHRhY2hlZChzdG43MjFDaGlsZDogc3RyaW5nIHwgbnVsbCwgdG9rZW5JZDogbnVsbCk6IEV2ZW50RmlsdGVyO1xuXG4gICAgT3duZXJzaGlwVHJhbnNmZXJyZWQoXG4gICAgICBwcmV2aW91c093bmVyOiBzdHJpbmcgfCBudWxsLFxuICAgICAgbmV3T3duZXI6IHN0cmluZyB8IG51bGxcbiAgICApOiBFdmVudEZpbHRlcjtcblxuICAgIFRyYW5zZmVyKFxuICAgICAgZnJvbTogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHRvOiBzdHJpbmcgfCBudWxsLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoIHwgbnVsbFxuICAgICk6IEV2ZW50RmlsdGVyO1xuICB9O1xuXG4gIGVzdGltYXRlR2FzOiB7XG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWFwcHJvdmV9LlxuICAgICAqL1xuICAgIGFwcHJvdmUoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWFwcHJvdmV9LlxuICAgICAqL1xuICAgIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgYmFsYW5jZU9mKG93bmVyOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtZ2V0QXBwcm92ZWR9LlxuICAgICAqL1xuICAgIGdldEFwcHJvdmVkKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAgICovXG4gICAgXCJnZXRBcHByb3ZlZCh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1pc0FwcHJvdmVkRm9yQWxsfS5cbiAgICAgKi9cbiAgICBpc0FwcHJvdmVkRm9yQWxsKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWlzQXBwcm92ZWRGb3JBbGx9LlxuICAgICAqL1xuICAgIFwiaXNBcHByb3ZlZEZvckFsbChhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS1uYW1lfS5cbiAgICAgKi9cbiAgICBuYW1lKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS1uYW1lfS5cbiAgICAgKi9cbiAgICBcIm5hbWUoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIG93bmVyKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIFwib3duZXIoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAgICovXG4gICAgb3duZXJPZihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAgICovXG4gICAgXCJvd25lck9mKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgcmVub3VuY2VPd25lcnNoaXAob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgXCJyZW5vdW5jZU93bmVyc2hpcCgpXCIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNhZmVUcmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2FmZVRyYW5zZmVyRnJvbX0uXG4gICAgICovXG4gICAgXCJzYWZlVHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGJ5dGVzKVwiKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIF9kYXRhOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2V0QXBwcm92YWxGb3JBbGx9LlxuICAgICAqL1xuICAgIHNldEFwcHJvdmFsRm9yQWxsKFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIGFwcHJvdmVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBcInNldEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MsYm9vbClcIihcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzE2NS1zdXBwb3J0c0ludGVyZmFjZX0uXG4gICAgICovXG4gICAgc3VwcG9ydHNJbnRlcmZhY2UoXG4gICAgICBpbnRlcmZhY2VJZDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzE2NS1zdXBwb3J0c0ludGVyZmFjZX0uXG4gICAgICovXG4gICAgXCJzdXBwb3J0c0ludGVyZmFjZShieXRlczQpXCIoXG4gICAgICBpbnRlcmZhY2VJZDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgc3ltYm9sKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS1zeW1ib2x9LlxuICAgICAqL1xuICAgIFwic3ltYm9sKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtdG9rZW5VUkl9LlxuICAgICAqL1xuICAgIHRva2VuVVJJKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICBcInRva2VuVVJJKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXRyYW5zZmVyRnJvbX0uXG4gICAgICovXG4gICAgdHJhbnNmZXJGcm9tKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS10cmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgdHJhbnNmZXJPd25lcnNoaXAoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MpXCIoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogYXR0YWNoZXMgYSBzdG43MjEgY29udHJhY3QgdG8gYW4gdG9rZW5JZFxuICAgICAqL1xuICAgIGF0dGFjaENoaWxkKFxuICAgICAgc3RuNzIxQ2hpbGQ6IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIGF0dGFjaGVzIGEgc3RuNzIxIGNvbnRyYWN0IHRvIGFuIHRva2VuSWRcbiAgICAgKi9cbiAgICBcImF0dGFjaENoaWxkKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHN0bjcyMUNoaWxkOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBtaW50KFxuICAgICAgZGl2aXNpYmxlOiBib29sZWFuLFxuICAgICAgdG9rZW5JZHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwibWludChib29sLHVpbnQyNTZbXSxhZGRyZXNzKVwiKFxuICAgICAgZGl2aXNpYmxlOiBib29sZWFuLFxuICAgICAgdG9rZW5JZHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGdldFBhcmVudEFkZHJlc3Mob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiZ2V0UGFyZW50QWRkcmVzcygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGdldFBhcmVudElkKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBcImdldFBhcmVudElkKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgaXNEaXZpc2libGUoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJpc0RpdmlzaWJsZSh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIGdldENoaWxkSW5kZXhCeUlkKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIFwiZ2V0Q2hpbGRJbmRleEJ5SWQodWludDI1NilcIihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICBnZXRDaGlsZEluZGV4QnlBZGRyZXNzKFxuICAgICAgc3RuNzIxOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgXCJnZXRDaGlsZEluZGV4QnlBZGRyZXNzKGFkZHJlc3MpXCIoXG4gICAgICBzdG43MjE6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG4gIH07XG5cbiAgcG9wdWxhdGVUcmFuc2FjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1hcHByb3ZlfS5cbiAgICAgKi9cbiAgICBhcHByb3ZlKFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWFwcHJvdmV9LlxuICAgICAqL1xuICAgIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBiYWxhbmNlT2YoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgXCJiYWxhbmNlT2YoYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtZ2V0QXBwcm92ZWR9LlxuICAgICAqL1xuICAgIGdldEFwcHJvdmVkKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWdldEFwcHJvdmVkfS5cbiAgICAgKi9cbiAgICBcImdldEFwcHJvdmVkKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtaXNBcHByb3ZlZEZvckFsbH0uXG4gICAgICovXG4gICAgaXNBcHByb3ZlZEZvckFsbChcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWlzQXBwcm92ZWRGb3JBbGx9LlxuICAgICAqL1xuICAgIFwiaXNBcHByb3ZlZEZvckFsbChhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLW5hbWV9LlxuICAgICAqL1xuICAgIG5hbWUob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAgICovXG4gICAgXCJuYW1lKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIG93bmVyKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgXCJvd25lcigpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLW93bmVyT2Z9LlxuICAgICAqL1xuICAgIG93bmVyT2YoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAgICovXG4gICAgXCJvd25lck9mKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgb3duZXIuIEl0IHdpbGwgbm90IGJlIHBvc3NpYmxlIHRvIGNhbGwgYG9ubHlPd25lcmAgZnVuY3Rpb25zIGFueW1vcmUuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4gTk9URTogUmVub3VuY2luZyBvd25lcnNoaXAgd2lsbCBsZWF2ZSB0aGUgY29udHJhY3Qgd2l0aG91dCBhbiBvd25lciwgdGhlcmVieSByZW1vdmluZyBhbnkgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIHRvIHRoZSBvd25lci5cbiAgICAgKi9cbiAgICByZW5vdW5jZU93bmVyc2hpcChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgICAqL1xuICAgIFwicmVub3VuY2VPd25lcnNoaXAoKVwiKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNhZmVUcmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1zYWZlVHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpXCIoXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgX2RhdGE6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBzZXRBcHByb3ZhbEZvckFsbChcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBcInNldEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MsYm9vbClcIihcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMTY1LXN1cHBvcnRzSW50ZXJmYWNlfS5cbiAgICAgKi9cbiAgICBzdXBwb3J0c0ludGVyZmFjZShcbiAgICAgIGludGVyZmFjZUlkOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMxNjUtc3VwcG9ydHNJbnRlcmZhY2V9LlxuICAgICAqL1xuICAgIFwic3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0KVwiKFxuICAgICAgaW50ZXJmYWNlSWQ6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgc3ltYm9sKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgXCJzeW1ib2woKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICB0b2tlblVSSShcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICBcInRva2VuVVJJKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICB0cmFuc2ZlckZyb20oXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgdHJhbnNmZXJPd25lcnNoaXAoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcylcIihcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIGF0dGFjaGVzIGEgc3RuNzIxIGNvbnRyYWN0IHRvIGFuIHRva2VuSWRcbiAgICAgKi9cbiAgICBhdHRhY2hDaGlsZChcbiAgICAgIHN0bjcyMUNoaWxkOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIGF0dGFjaGVzIGEgc3RuNzIxIGNvbnRyYWN0IHRvIGFuIHRva2VuSWRcbiAgICAgKi9cbiAgICBcImF0dGFjaENoaWxkKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHN0bjcyMUNoaWxkOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIG1pbnQoXG4gICAgICBkaXZpc2libGU6IGJvb2xlYW4sXG4gICAgICB0b2tlbklkczogQmlnTnVtYmVyaXNoW10sXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcIm1pbnQoYm9vbCx1aW50MjU2W10sYWRkcmVzcylcIihcbiAgICAgIGRpdmlzaWJsZTogYm9vbGVhbixcbiAgICAgIHRva2VuSWRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIGdldFBhcmVudEFkZHJlc3Mob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJnZXRQYXJlbnRBZGRyZXNzKClcIihcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIGdldFBhcmVudElkKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIFwiZ2V0UGFyZW50SWQoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIGlzRGl2aXNpYmxlKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgXCJpc0RpdmlzaWJsZSh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgZ2V0Q2hpbGRJbmRleEJ5SWQoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcImdldENoaWxkSW5kZXhCeUlkKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBnZXRDaGlsZEluZGV4QnlBZGRyZXNzKFxuICAgICAgc3RuNzIxOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICBcImdldENoaWxkSW5kZXhCeUFkZHJlc3MoYWRkcmVzcylcIihcbiAgICAgIHN0bjcyMTogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuICB9O1xufVxuIl19