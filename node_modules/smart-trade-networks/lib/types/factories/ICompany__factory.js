"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ICompany__factory = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ethers = require("ethers");

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
var ICompany__factory = /*#__PURE__*/function () {
  function ICompany__factory() {
    (0, _classCallCheck2["default"])(this, ICompany__factory);
  }

  (0, _createClass2["default"])(ICompany__factory, null, [{
    key: "connect",
    value: function connect(address, signerOrProvider) {
      return new _ethers.Contract(address, _abi, signerOrProvider);
    }
  }]);
  return ICompany__factory;
}();

exports.ICompany__factory = ICompany__factory;
var _abi = [{
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: "bytes32",
    name: "oldIpfsLink",
    type: "bytes32"
  }, {
    indexed: false,
    internalType: "bytes32",
    name: "newIpfsLink",
    type: "bytes32"
  }],
  name: "ChangeIpfsLink",
  type: "event"
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: "string",
    name: "oldName",
    type: "string"
  }, {
    indexed: false,
    internalType: "string",
    name: "newName",
    type: "string"
  }],
  name: "ChangeName",
  type: "event"
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "newSignatorie",
    type: "address"
  }],
  name: "NewSignatorie",
  type: "event"
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "signatorie",
    type: "address"
  }],
  name: "RemovedSignatorie",
  type: "event"
}, {
  inputs: [{
    internalType: "string",
    name: "_name",
    type: "string"
  }],
  name: "changeName",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "bytes32",
    name: "_ipfsLink",
    type: "bytes32"
  }],
  name: "changeIpfsLink",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [],
  name: "getData",
  outputs: [{
    components: [{
      internalType: "string",
      name: "name",
      type: "string"
    }, {
      internalType: "bytes32",
      name: "ipfsLink",
      type: "bytes32"
    }, {
      internalType: "uint256",
      name: "createdAt",
      type: "uint256"
    }, {
      internalType: "address",
      name: "owner",
      type: "address"
    }],
    internalType: "struct ICompany.CompanyData",
    name: "",
    type: "tuple"
  }],
  stateMutability: "view",
  type: "function"
}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBlcy9mYWN0b3JpZXMvSUNvbXBhbnlfX2ZhY3RvcnkudHMiXSwibmFtZXMiOlsiSUNvbXBhbnlfX2ZhY3RvcnkiLCJhZGRyZXNzIiwic2lnbmVyT3JQcm92aWRlciIsIkNvbnRyYWN0IiwiX2FiaSIsImFub255bW91cyIsImlucHV0cyIsImluZGV4ZWQiLCJpbnRlcm5hbFR5cGUiLCJuYW1lIiwidHlwZSIsIm91dHB1dHMiLCJzdGF0ZU11dGFiaWxpdHkiLCJjb21wb25lbnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBSUE7O0FBSkE7O0FBQ0E7O0FBQ0E7SUFPYUEsaUI7Ozs7Ozs7V0FDWCxpQkFDRUMsT0FERixFQUVFQyxnQkFGRixFQUdZO0FBQ1YsYUFBTyxJQUFJQyxnQkFBSixDQUFhRixPQUFiLEVBQXNCRyxJQUF0QixFQUE0QkYsZ0JBQTVCLENBQVA7QUFDRDs7Ozs7O0FBR0gsSUFBTUUsSUFBSSxHQUFHLENBQ1g7QUFDRUMsRUFBQUEsU0FBUyxFQUFFLEtBRGI7QUFFRUMsRUFBQUEsTUFBTSxFQUFFLENBQ047QUFDRUMsSUFBQUEsT0FBTyxFQUFFLEtBRFg7QUFFRUMsSUFBQUEsWUFBWSxFQUFFLFNBRmhCO0FBR0VDLElBQUFBLElBQUksRUFBRSxhQUhSO0FBSUVDLElBQUFBLElBQUksRUFBRTtBQUpSLEdBRE0sRUFPTjtBQUNFSCxJQUFBQSxPQUFPLEVBQUUsS0FEWDtBQUVFQyxJQUFBQSxZQUFZLEVBQUUsU0FGaEI7QUFHRUMsSUFBQUEsSUFBSSxFQUFFLGFBSFI7QUFJRUMsSUFBQUEsSUFBSSxFQUFFO0FBSlIsR0FQTSxDQUZWO0FBZ0JFRCxFQUFBQSxJQUFJLEVBQUUsZ0JBaEJSO0FBaUJFQyxFQUFBQSxJQUFJLEVBQUU7QUFqQlIsQ0FEVyxFQW9CWDtBQUNFTCxFQUFBQSxTQUFTLEVBQUUsS0FEYjtBQUVFQyxFQUFBQSxNQUFNLEVBQUUsQ0FDTjtBQUNFQyxJQUFBQSxPQUFPLEVBQUUsS0FEWDtBQUVF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ekJSLEdBRE8sQ0FIWDtBQWdDRUUsRUFBQUEsZUFBZSxFQUFFLE1BaENuQjtBQWlDRUYsRUFBQUEsSUFBSSxFQUFFO0FBakNSLENBM0ZXLENBQWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcnNcIjtcblxuaW1wb3J0IHR5cGUgeyBJQ29tcGFueSB9IGZyb20gXCIuLi9JQ29tcGFueVwiO1xuXG5leHBvcnQgY2xhc3MgSUNvbXBhbnlfX2ZhY3Rvcnkge1xuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXJcbiAgKTogSUNvbXBhbnkge1xuICAgIHJldHVybiBuZXcgQ29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcikgYXMgSUNvbXBhbnk7XG4gIH1cbn1cblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcIm9sZElwZnNMaW5rXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwibmV3SXBmc0xpbmtcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJDaGFuZ2VJcGZzTGlua1wiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG5hbWU6IFwib2xkTmFtZVwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgbmFtZTogXCJuZXdOYW1lXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJDaGFuZ2VOYW1lXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdTaWduYXRvcmllXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTmV3U2lnbmF0b3JpZVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwic2lnbmF0b3JpZVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJlbW92ZWRTaWduYXRvcmllXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgbmFtZTogXCJfbmFtZVwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiY2hhbmdlTmFtZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiX2lwZnNMaW5rXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiY2hhbmdlSXBmc0xpbmtcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXREYXRhXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgbmFtZTogXCJuYW1lXCIsXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgICAgIG5hbWU6IFwiaXBmc0xpbmtcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiY3JlYXRlZEF0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElDb21wYW55LkNvbXBhbnlEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbl07XG4iXX0=