import { BigNumberish, BytesLike, ContractTransaction } from "ethers";
import { MultisigDeployer } from "../../types";
import { DecodedCall } from "../helpers/abiDecoderController";
import { ProviderOrSigner } from "../../localTypes";
export declare class MultisigDeployerController {
    private _signer;
    private _multisigDeployerAddress;
    private _multisigDeployerContract?;
    constructor(multisigDeployerAddress: string, signerOrProvider: ProviderOrSigner);
    private _getContract;
    /**Getters */
    getContract(): Promise<MultisigDeployer>;
    getAll(): Promise<Array<string>>;
    isMultisigAdded(multisigAddress: string): Promise<boolean>;
    getFeeCollector(): Promise<string>;
    getPrecomputedAddress(bytecode: BytesLike, salt: BigNumberish): Promise<string>;
    getBytecode(owners: Array<string>, requried: BigNumberish): Promise<string>;
    getContractSalt(address: string): Promise<BigNumberish>;
    /**Setters */
    setFeeCollector(feeCollector: string): Promise<ContractTransaction>;
    deployMultisigPrecomputed(bytecode: BytesLike, salt: BigNumberish): Promise<ContractTransaction>;
    transferOwnership(newOwner: string): Promise<ContractTransaction>;
    /** Helpers */
    static encodeCall(functionName: string, args?: any[]): string;
    static decodeCall(data: string): DecodedCall | null;
}
