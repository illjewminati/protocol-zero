/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FeeCollectorInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeByMultisig(address,uint256)": FunctionFragment;
    "whitelistMultisig(address,bool)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "getFeeByMultisig(address)": FunctionFragment;
    "getFee()": FunctionFragment;
    "getFeeCollector()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeByMultisig",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMultisig",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getFeeByMultisig",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeByMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeByMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetFee(uint256)": EventFragment;
    "SetFeeByMultisig(address,uint256)": EventFragment;
    "SetFeeCollector(address)": EventFragment;
    "Whitelist(address,bool)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeByMultisig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeCollector"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class FeeCollector extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FeeCollectorInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    initialize(
      feeCollector: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    "initialize(address,uint256)"(
      feeCollector: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param feeCollector Address that will receive tokens when withdraw function is called
     */
    setFeeCollector(
      feeCollector: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param feeCollector Address that will receive tokens when withdraw function is called
     */
    "setFeeCollector(address)"(
      feeCollector: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    setFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
     */
    setFeeByMultisig(
      multisigAddress: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
     */
    "setFeeByMultisig(address,uint256)"(
      multisigAddress: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param allow True to add to whitelist and false to remove from whitelist
     */
    whitelistMultisig(
      multisigAddress: string,
      allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param allow True to add to whitelist and false to remove from whitelist
     */
    "whitelistMultisig(address,bool)"(
      multisigAddress: string,
      allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param _token Token Address to withdraw
     */
    withdraw(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param _token Token Address to withdraw
     */
    "withdraw(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Getters
     */
    getFeeByMultisig(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Getters
     */
    "getFeeByMultisig(address)"(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    "getFeeCollector()"(overrides?: CallOverrides): Promise<[string]>;

    isWhitelisted(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWhitelisted(address)"(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
   */
  initialize(
    feeCollector: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
   */
  "initialize(address,uint256)"(
    feeCollector: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param feeCollector Address that will receive tokens when withdraw function is called
   */
  setFeeCollector(
    feeCollector: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param feeCollector Address that will receive tokens when withdraw function is called
   */
  "setFeeCollector(address)"(
    feeCollector: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
   */
  setFee(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
   */
  "setFee(uint256)"(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
   */
  setFeeByMultisig(
    multisigAddress: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
   */
  "setFeeByMultisig(address,uint256)"(
    multisigAddress: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param allow True to add to whitelist and false to remove from whitelist
   */
  whitelistMultisig(
    multisigAddress: string,
    allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param allow True to add to whitelist and false to remove from whitelist
   */
  "whitelistMultisig(address,bool)"(
    multisigAddress: string,
    allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param _token Token Address to withdraw
   */
  withdraw(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * @param _token Token Address to withdraw
   */
  "withdraw(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Getters
   */
  getFeeByMultisig(
    multisigAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Getters
   */
  "getFeeByMultisig(address)"(
    multisigAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeCollector(overrides?: CallOverrides): Promise<string>;

  "getFeeCollector()"(overrides?: CallOverrides): Promise<string>;

  isWhitelisted(
    multisigAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelisted(address)"(
    multisigAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    initialize(
      feeCollector: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    "initialize(address,uint256)"(
      feeCollector: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param feeCollector Address that will receive tokens when withdraw function is called
     */
    setFeeCollector(
      feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param feeCollector Address that will receive tokens when withdraw function is called
     */
    "setFeeCollector(address)"(
      feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    setFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
     */
    setFeeByMultisig(
      multisigAddress: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
     */
    "setFeeByMultisig(address,uint256)"(
      multisigAddress: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param allow True to add to whitelist and false to remove from whitelist
     */
    whitelistMultisig(
      multisigAddress: string,
      allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param allow True to add to whitelist and false to remove from whitelist
     */
    "whitelistMultisig(address,bool)"(
      multisigAddress: string,
      allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _token Token Address to withdraw
     */
    withdraw(_token: string, overrides?: CallOverrides): Promise<void>;

    /**
     * @param _token Token Address to withdraw
     */
    "withdraw(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getters
     */
    getFeeByMultisig(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Getters
     */
    "getFeeByMultisig(address)"(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<string>;

    "getFeeCollector()"(overrides?: CallOverrides): Promise<string>;

    isWhitelisted(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelisted(address)"(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetFee(fee: null): EventFilter;

    SetFeeByMultisig(multisigAddress: string | null, fee: null): EventFilter;

    SetFeeCollector(feeCollector: string | null): EventFilter;

    Whitelist(multisigAddress: string | null, isWhitelisted: null): EventFilter;

    Withdraw(
      token: string | null,
      receiver: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    initialize(
      feeCollector: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    "initialize(address,uint256)"(
      feeCollector: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param feeCollector Address that will receive tokens when withdraw function is called
     */
    setFeeCollector(
      feeCollector: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param feeCollector Address that will receive tokens when withdraw function is called
     */
    "setFeeCollector(address)"(
      feeCollector: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    setFee(fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
     */
    setFeeByMultisig(
      multisigAddress: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
     */
    "setFeeByMultisig(address,uint256)"(
      multisigAddress: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param allow True to add to whitelist and false to remove from whitelist
     */
    whitelistMultisig(
      multisigAddress: string,
      allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param allow True to add to whitelist and false to remove from whitelist
     */
    "whitelistMultisig(address,bool)"(
      multisigAddress: string,
      allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param _token Token Address to withdraw
     */
    withdraw(_token: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * @param _token Token Address to withdraw
     */
    "withdraw(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Getters
     */
    getFeeByMultisig(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Getters
     */
    "getFeeByMultisig(address)"(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeCollector()"(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelisted(address)"(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    initialize(
      feeCollector: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    "initialize(address,uint256)"(
      feeCollector: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param feeCollector Address that will receive tokens when withdraw function is called
     */
    setFeeCollector(
      feeCollector: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param feeCollector Address that will receive tokens when withdraw function is called
     */
    "setFeeCollector(address)"(
      feeCollector: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    setFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param fee Global fee charged, i.e. 300 means 30%, 30 means 3%, 3 means 0.3%
     */
    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
     */
    setFeeByMultisig(
      multisigAddress: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param fee Custom fee charged, i.e. 3*10^18 (3000000000000000000) means 3%, 0.3*10^18 (300000000000000000) means 0.3%
     */
    "setFeeByMultisig(address,uint256)"(
      multisigAddress: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param allow True to add to whitelist and false to remove from whitelist
     */
    whitelistMultisig(
      multisigAddress: string,
      allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param allow True to add to whitelist and false to remove from whitelist
     */
    "whitelistMultisig(address,bool)"(
      multisigAddress: string,
      allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _token Token Address to withdraw
     */
    withdraw(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _token Token Address to withdraw
     */
    "withdraw(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getters
     */
    getFeeByMultisig(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getters
     */
    "getFeeByMultisig(address)"(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFeeCollector()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelisted(address)"(
      multisigAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
