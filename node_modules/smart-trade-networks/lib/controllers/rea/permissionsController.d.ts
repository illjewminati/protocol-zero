import { BigNumberish, ContractTransaction, Signer } from "ethers";
import { Permissions } from "../../types";
import { ProviderOrSigner } from "../../localTypes";
import { DecodedCall } from "../helpers/abiDecoderController";
export declare type PermissionsBoolArray = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
];
export declare class PermissionsController {
    private _signer;
    private _permissionsAddress;
    private _permissionsContract?;
    constructor(_permissionsAddress: string, signerOrProvider: ProviderOrSigner);
    private _getPermissionsContract;
    static deployPermissionsContract(signer: Signer, owner: string, companiesAddress: string): Promise<Permissions>;
    /**Getters */
    getContract(): Promise<Permissions>;
    getPermission(action: BigNumberish, companyAddress: string, nftAddress: string, signatorie: string): Promise<boolean>;
    isSignerApproved(companyAddress: string, signatorie: string): Promise<boolean>;
    getCompaniesContract(): Promise<string>;
    /**Setters */
    setCompaniesContract(newAddress: string): Promise<ContractTransaction>;
    setPermission(action: BigNumberish, companyAddress: string, nftAddress: string, allow: boolean): Promise<ContractTransaction>;
    setPermissions(actions: Array<BigNumberish>, companyAddress: string, nftAddress: string, allow: boolean): Promise<ContractTransaction>;
    setBoolPermissions(permissions: PermissionsBoolArray, companyAddress: string, nftAddress: string): Promise<ContractTransaction>;
    /** Helpers */
    static encodeCall(functionName: string, args?: any[]): string;
    static decodeCall(data: string): DecodedCall | null;
}
