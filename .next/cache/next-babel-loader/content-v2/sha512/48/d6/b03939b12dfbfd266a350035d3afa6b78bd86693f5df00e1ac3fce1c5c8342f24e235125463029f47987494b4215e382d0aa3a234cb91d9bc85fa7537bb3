{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/common/steps_modal/swap_step.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getStepsModalCurrentStep } from '../../../store/ui/selectors';\nimport { BaseStepModal } from './base_step_modal';\nimport { ethers, utils } from 'ethers';\nimport { initBalances, stepsModalAdvanceStep, swapTokens } from '../../../store/actions';\nimport { getWeb3Wrapper } from '../../../services/web3_wrapper';\nimport { retrieveError } from '../../../util/gsn_error_handler';\nimport { getRelayHubContract } from '../../../services/relay_hub_service';\n\nclass SwapTokensStep extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      error: \"\"\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        error\n      } = this.state;\n      const {\n        buildStepsProgress,\n        step\n      } = this.props;\n      const {\n        amount,\n        token\n      } = step;\n      const title = `Swap ${amount} ${token.symbol}`;\n      const confirmCaption = `Confirm on Metamask to swap tokens`;\n      const loadingCaption = \"Swapping Tokens\";\n      const doneCaption = \"Tokens Swapped\";\n      const errorCaption = `Failed to swap tokens: ${error}`;\n      const loadingFooterCaption = `Waiting for confirmation...`;\n      const doneFooterCaption = `Tokens Swapped`;\n      return /*#__PURE__*/_jsxDEV(BaseStepModal, {\n        step: step,\n        title: title,\n        confirmCaption: confirmCaption,\n        loadingCaption: loadingCaption,\n        doneCaption: doneCaption,\n        errorCaption: errorCaption,\n        loadingFooterCaption: loadingFooterCaption,\n        doneFooterCaption: doneFooterCaption,\n        buildStepsProgress: buildStepsProgress,\n        estimatedTxTimeMs: 30000,\n        runAction: this._approveTokens,\n        showPartialProgress: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this);\n    });\n\n    _defineProperty(this, \"_approveTokens\", async ({\n      onLoading,\n      onDone,\n      onError\n    }) => {\n      const {\n        step,\n        onTokensSwap\n      } = this.props;\n      const web3Wrapper = await getWeb3Wrapper();\n\n      try {\n        const contractTransaction = await onTokensSwap(step.token, step.amount);\n        onLoading();\n        const contractReceipt = await contractTransaction.wait();\n        const txHash = contractReceipt.logs[0].transactionHash;\n        const tx = await web3Wrapper.waitForTransaction(txHash);\n        const relayHub = await getRelayHubContract(web3Wrapper.getSigner());\n        let deposited;\n        let withdrawn;\n        tx.logs.map(log => {\n          try {\n            const parsedLog = relayHub.interface.parseLog(log);\n\n            if (parsedLog.name === \"Deposited\") {\n              deposited = utils.formatEther(parsedLog.args.amount);\n            } else if (parsedLog.name === \"Withdrawn\") {\n              withdrawn = utils.formatEther(parsedLog.args.amount);\n            }\n          } catch (e) {}\n        });\n        step.callback({\n          data: {\n            gasUsed: tx.gasUsed.toString(),\n            txHash,\n            txPrice: ethers.utils.formatEther(tx.gasUsed.mul(tx.effectiveGasPrice)),\n            deposited,\n            withdrawn\n          },\n          error: false\n        });\n        initBalances();\n        onDone();\n      } catch (e) {\n        const error = retrieveError(e.message);\n        step.callback({\n          error: true,\n          data: null,\n          message: error\n        });\n        initBalances();\n        this.setState({\n          error\n        });\n        onError(error);\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    step: getStepsModalCurrentStep(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTokensSwap: (token, amount) => dispatch(swapTokens(token, amount)),\n    advanceStep: () => dispatch(stepsModalAdvanceStep()),\n    initBalances: () => dispatch(initBalances())\n  };\n};\n\nconst SwapTokensStepContainer = connect(mapStateToProps, mapDispatchToProps)(SwapTokensStep);\nexport { SwapTokensStep, SwapTokensStepContainer };","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/common/steps_modal/swap_step.tsx"],"names":["React","connect","getStepsModalCurrentStep","BaseStepModal","ethers","utils","initBalances","stepsModalAdvanceStep","swapTokens","getWeb3Wrapper","retrieveError","getRelayHubContract","SwapTokensStep","Component","error","state","buildStepsProgress","step","props","amount","token","title","symbol","confirmCaption","loadingCaption","doneCaption","errorCaption","loadingFooterCaption","doneFooterCaption","_approveTokens","onLoading","onDone","onError","onTokensSwap","web3Wrapper","contractTransaction","contractReceipt","wait","txHash","logs","transactionHash","tx","waitForTransaction","relayHub","getSigner","deposited","withdrawn","map","log","parsedLog","interface","parseLog","name","formatEther","args","e","callback","data","gasUsed","toString","txPrice","mul","effectiveGasPrice","message","setState","mapStateToProps","mapDispatchToProps","dispatch","advanceStep","SwapTokensStepContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { getStepsModalCurrentStep } from '../../../store/ui/selectors';\nimport { StoreState } from '../../../types/store';\nimport { BaseStepModal } from './base_step_modal';\nimport { StepItem } from './steps_progress';\nimport { BigNumber, ContractReceipt, ContractTransaction, ethers, utils } from 'ethers';\nimport { initBalances, stepsModalAdvanceStep, swapTokens } from '../../../store/actions';\nimport { StepSwapToken } from '../../../types/steps-modal';\nimport { getWeb3Wrapper } from '../../../services/web3_wrapper';\nimport { Token } from '../../../types/blockchain';\nimport { retrieveError } from '../../../util/gsn_error_handler';\nimport { getRelayHubContract } from '../../../services/relay_hub_service';\n\ninterface LocalProps {\n    error: string\n}\n\ninterface OwnProps {\n    buildStepsProgress: (currentStepItem: StepItem) => StepItem[];\n}\n\ninterface StateProps {\n    step: StepSwapToken;\n}\n\ninterface DispatchProps {\n    onTokensSwap: (\n        address: Token, \n        amount: string\n    ) => Promise<any>;\n    advanceStep: () => void;\n    initBalances: () => any\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\n\n\nclass SwapTokensStep extends React.Component<Props, LocalProps> {\n\n\n    state = {\n        error: \"\"\n    }\n\n    public render = () => {\n        const { error } = this.state;\n        const { buildStepsProgress, step } = this.props;\n        const { amount, token } = step;\n\n        const title = `Swap ${amount} ${token.symbol}`;\n        const confirmCaption = `Confirm on Metamask to swap tokens`;\n        const loadingCaption = \"Swapping Tokens\";\n        const doneCaption = \"Tokens Swapped\";\n        const errorCaption = `Failed to swap tokens: ${error}`;\n        const loadingFooterCaption = `Waiting for confirmation...`;\n        const doneFooterCaption = `Tokens Swapped`;\n\n        return (\n            <BaseStepModal\n                step={step}\n                title={title}\n                confirmCaption={confirmCaption}\n                loadingCaption={loadingCaption}\n                doneCaption={doneCaption}\n                errorCaption={errorCaption}\n                loadingFooterCaption={loadingFooterCaption}\n                doneFooterCaption={doneFooterCaption}\n                buildStepsProgress={buildStepsProgress}\n                estimatedTxTimeMs={30000}\n                runAction={this._approveTokens}\n                showPartialProgress={true}\n            />\n        );\n    };\n\n    private readonly _approveTokens = async ({ onLoading, onDone, onError }: any) => {\n        const { step, onTokensSwap } = this.props;\n\n        const web3Wrapper = await getWeb3Wrapper();\n\n        try {\n            const contractTransaction: ContractTransaction = await onTokensSwap(step.token, step.amount);\n            onLoading();\n    \n            const contractReceipt: ContractReceipt = await contractTransaction.wait();\n            const txHash = contractReceipt.logs[0].transactionHash;\n            const tx = await web3Wrapper.waitForTransaction(txHash);\n\n            const relayHub = await getRelayHubContract(web3Wrapper.getSigner())\n            let deposited: string;\n            let withdrawn: string;\n\n            tx.logs.map((log: any) => {\n                try {\n                  const parsedLog = relayHub.interface.parseLog(log);\n                  if(parsedLog.name === \"Deposited\") {\n                    deposited = utils.formatEther(parsedLog.args.amount);\n                  } else if(parsedLog.name === \"Withdrawn\") {\n                    withdrawn = utils.formatEther(parsedLog.args.amount)\n                  } \n                } catch(e) {\n          \n                }\n              })\n            step.callback({\n                data: {\n                    gasUsed: tx.gasUsed.toString(),\n                    txHash,\n                    txPrice: ethers.utils.formatEther(tx.gasUsed.mul(tx.effectiveGasPrice)),\n                    deposited,\n                    withdrawn\n                },\n                error: false,\n            })\n            initBalances()\n            onDone();\n        } catch(e) {\n            const error = retrieveError(e.message)\n            step.callback({\n                error: true,\n                data: null,\n                message: error\n            })\n            initBalances()\n            \n            this.setState({error})\n            onError(error)\n        }\n\n    };\n}\n\nconst mapStateToProps = (state: StoreState): StateProps => {\n    return {\n        step: getStepsModalCurrentStep(state) as StepSwapToken,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any): DispatchProps => {\n    return {\n        onTokensSwap: (token: Token, amount: string) => \n            dispatch(swapTokens(token, amount)),\n        advanceStep: () => dispatch(stepsModalAdvanceStep()),\n        initBalances: () => dispatch(initBalances())\n    }\n}\n\nconst SwapTokensStepContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SwapTokensStep);\n\nexport { SwapTokensStep, SwapTokensStepContainer };\n"]},"metadata":{},"sourceType":"module"}