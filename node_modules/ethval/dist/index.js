'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _decimal = require('decimal.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PreciseDecimal = _decimal.Decimal.clone({ defaults: true, toExpPos: 33 });

var toDecimal = function toDecimal(a) {
  if (a) {
    if (a._hex) {
      a = a._hex;
    } else if (a._isBigNumber) {
      a = a.toString(10);
    }
  }

  return new PreciseDecimal('' + a);
};

var input2Dec = function input2Dec(original, input) {
  return input._n ? input.to(original._unit)._n : toDecimal(input);
};

var EthVal = function () {
  function EthVal(src) {
    var _this = this;

    var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'wei';

    _classCallCheck(this, EthVal);

    if (src instanceof EthVal) {
      this._n = toDecimal(src._n);
      this._unit = src._unit;
    } else {
      this._n = toDecimal(src);
      this._unit = unit;
    }
    ['mul', 'sub', 'div', 'add'].forEach(function (method) {
      _this[method] = function (v) {
        return new EthVal(_this._n[method].call(_this._n, input2Dec(_this, v)), _this._unit);
      };
    });['gt', 'gte', 'lt', 'lte', 'eq'].forEach(function (method) {
      _this[method] = function (v) {
        return _this._n[method].call(_this._n, input2Dec(_this, v));
      };
    });
  }

  _createClass(EthVal, [{
    key: 'scaleDown',
    value: function scaleDown(v) {
      return this.mul(toDecimal(10).pow(toDecimal(v)));
    }
  }, {
    key: 'scaleUp',
    value: function scaleUp(v) {
      return this.div(toDecimal(10).pow(toDecimal(v)));
    }
  }, {
    key: 'round',
    value: function round() {
      return new EthVal(this._n.toDecimalPlaces(0));
    }
  }, {
    key: 'toWei',
    value: function toWei() {
      if (this.isWei) {
        return new EthVal(this);
      }
      if (this.isGwei) {
        var v = this.scaleDown(9);
        v._unit = 'wei';
        return v;
      }
      if (this.isEth) {
        var _v = this.scaleDown(18);
        _v._unit = 'wei';
        return _v;
      }

      throw new Error('Unit of measurement uncertain');
    }
  }, {
    key: 'toGwei',
    value: function toGwei() {
      if (this.isWei) {
        var v = this.scaleUp(9);
        v._unit = 'gwei';
        return v;
      }
      if (this.isGwei) {
        return new EthVal(this);
      }
      if (this.isEth) {
        var _v2 = this.scaleDown(9);
        _v2._unit = 'gwei';
        return _v2;
      }

      throw new Error('Unit of measurement uncertain');
    }
  }, {
    key: 'toEth',
    value: function toEth() {
      if (this.isWei) {
        var v = this.scaleUp(18);
        v._unit = 'eth';
        return v;
      }
      if (this.isGwei) {
        var _v3 = this.scaleUp(9);
        _v3._unit = 'eth';
        return _v3;
      }
      if (this.isEth) {
        return new EthVal(this);
      }

      throw new Error('Unit of measurement uncertain');
    }
  }, {
    key: 'to',
    value: function to(unit) {
      switch (unit) {
        case 'wei':
          return this.toWei();
        case 'gwei':
          return this.toGwei();
        case 'eth':
          return this.toEth();
        default:
          throw new Error('Unrecognized unit: ' + unit);
      }
    }
  }, {
    key: 'toString',
    value: function toString(v) {
      switch (v) {
        case 2:
          {
            var str = this._n.toBinary();
            str = str.substr(str.indexOf('b') + 1);
            return str;
          }
        case 16:
          return this._n.toHexadecimal();
        default:
          return this._n.toString();
      }
    }
  }, {
    key: 'toFixed',
    value: function toFixed(v) {
      return this._n.toFixed(v);
    }
  }, {
    key: 'toNumber',
    value: function toNumber() {
      return this._n.toNumber();
    }
  }, {
    key: 'isWei',
    get: function get() {
      return 'wei' === this._unit;
    }
  }, {
    key: 'isGwei',
    get: function get() {
      return 'gwei' === this._unit;
    }
  }, {
    key: 'isEth',
    get: function get() {
      return 'eth' === this._unit;
    }
  }, {
    key: 'unit',
    get: function get() {
      return this._unit;
    }
  }]);

  return EthVal;
}();

exports.default = EthVal;
module.exports = exports.default;