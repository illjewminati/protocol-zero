/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StakeManagerContract
  extends Truffle.Contract<StakeManagerInstance> {
  "new"(
    _maxUnstakeDelay: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<StakeManagerInstance>;
}

export interface HubAuthorized {
  name: "HubAuthorized";
  args: {
    relayManager: string;
    relayHub: string;
    0: string;
    1: string;
  };
}

export interface HubUnauthorized {
  name: "HubUnauthorized";
  args: {
    relayManager: string;
    relayHub: string;
    removalBlock: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface OwnerSet {
  name: "OwnerSet";
  args: {
    relayManager: string;
    owner: string;
    0: string;
    1: string;
  };
}

export interface StakeAdded {
  name: "StakeAdded";
  args: {
    relayManager: string;
    owner: string;
    stake: BN;
    unstakeDelay: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface StakePenalized {
  name: "StakePenalized";
  args: {
    relayManager: string;
    beneficiary: string;
    reward: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface StakeUnlocked {
  name: "StakeUnlocked";
  args: {
    relayManager: string;
    owner: string;
    withdrawBlock: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface StakeWithdrawn {
  name: "StakeWithdrawn";
  args: {
    relayManager: string;
    owner: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | HubAuthorized
  | HubUnauthorized
  | OwnerSet
  | StakeAdded
  | StakePenalized
  | StakeUnlocked
  | StakeWithdrawn;

export interface StakeManagerInstance extends Truffle.ContractInstance {
  /**
   * maps relay managers to a map of addressed of their authorized hubs to the information on that hub
   */
  authorizedHubs(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  maxUnstakeDelay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * maps relay managers to their stakes
   */
  stakes(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string }>;

  versionSM(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getStakeInfo(
    relayManager: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ stake: BN; unstakeDelay: BN; withdrawBlock: BN; owner: string }>;

  /**
   * Set the owner of a Relay Manager. Called only by the RelayManager itself. Note that owners cannot transfer ownership - if the entry already exists, reverts.
   * @param owner - owner of the relay (as configured off-chain)
   */
  setRelayManagerOwner: {
    (owner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(owner: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Put a stake for a relayManager and set its unstake delay. Only the owner can call this function.
   * @param relayManager - address that represents a stake entry and controls relay registrations on relay hubs
   * @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'
   */
  stakeForRelayManager: {
    (
      relayManager: string,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      relayManager: string,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unlockStake: {
    (relayManager: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake: {
    (relayManager: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authorizeHubByOwner: {
    (
      relayManager: string,
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      relayManager: string,
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string,
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string,
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authorizeHubByManager: {
    (relayHub: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unauthorizeHubByOwner: {
    (
      relayManager: string,
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      relayManager: string,
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string,
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string,
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unauthorizeHubByManager: {
    (relayHub: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayHub: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isRelayManagerStaked(
    relayManager: string,
    relayHub: string,
    minAmount: number | BN | string,
    minUnstakeDelay: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns half of stake on the way.
   * @param amount - amount to withdraw from stake
   * @param beneficiary - address that receives half of the penalty amount
   * @param relayManager - entry to penalize
   */
  penalizeRelayManager: {
    (
      relayManager: string,
      beneficiary: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      relayManager: string,
      beneficiary: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string,
      beneficiary: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string,
      beneficiary: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * maps relay managers to a map of addressed of their authorized hubs to the information on that hub
     */
    authorizedHubs(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    maxUnstakeDelay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * maps relay managers to their stakes
     */
    stakes(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string }>;

    versionSM(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getStakeInfo(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      stake: BN;
      unstakeDelay: BN;
      withdrawBlock: BN;
      owner: string;
    }>;

    /**
     * Set the owner of a Relay Manager. Called only by the RelayManager itself. Note that owners cannot transfer ownership - if the entry already exists, reverts.
     * @param owner - owner of the relay (as configured off-chain)
     */
    setRelayManagerOwner: {
      (owner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Put a stake for a relayManager and set its unstake delay. Only the owner can call this function.
     * @param relayManager - address that represents a stake entry and controls relay registrations on relay hubs
     * @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'
     */
    stakeForRelayManager: {
      (
        relayManager: string,
        unstakeDelay: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        relayManager: string,
        unstakeDelay: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayManager: string,
        unstakeDelay: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayManager: string,
        unstakeDelay: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unlockStake: {
      (relayManager: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        relayManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawStake: {
      (relayManager: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        relayManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    authorizeHubByOwner: {
      (
        relayManager: string,
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        relayManager: string,
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayManager: string,
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayManager: string,
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    authorizeHubByManager: {
      (relayHub: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unauthorizeHubByOwner: {
      (
        relayManager: string,
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        relayManager: string,
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayManager: string,
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayManager: string,
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unauthorizeHubByManager: {
      (relayHub: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayHub: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isRelayManagerStaked(
      relayManager: string,
      relayHub: string,
      minAmount: number | BN | string,
      minUnstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns half of stake on the way.
     * @param amount - amount to withdraw from stake
     * @param beneficiary - address that receives half of the penalty amount
     * @param relayManager - entry to penalize
     */
    penalizeRelayManager: {
      (
        relayManager: string,
        beneficiary: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        relayManager: string,
        beneficiary: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayManager: string,
        beneficiary: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayManager: string,
        beneficiary: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
