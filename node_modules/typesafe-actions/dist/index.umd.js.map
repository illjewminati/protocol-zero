{"version":3,"file":"index.umd.js","sources":["../src/utils/validation.ts","../src/action.ts","../src/create-custom-action.ts","../src/create-action.ts","../src/create-standard-action.ts","../src/create-async-action.ts","../src/get-type.ts","../src/is-of-type.ts","../src/is-action-of.ts","../src/create-action-deprecated.ts"],"sourcesContent":["import { ActionCreator, TypeMeta, StringType } from '../type-helpers';\n\nexport function checkIsEmpty(arg: unknown, argPosition: number = 1) {\n  return arg == null;\n}\n\nexport function throwIsEmpty(argPosition: number = 1): never {\n  throw new Error(`Argument ${argPosition} is empty.`);\n}\n\nexport function checkInvalidActionCreator(arg: ActionCreator<StringType>) {\n  return typeof arg !== 'function' || !('getType' in arg);\n}\n\nexport function throwInvalidActionCreator(argPosition: number = 1): never {\n  throw new Error(\n    `Argument ${argPosition} is invalid, it should be an action-creator instance from \"typesafe-actions\"`\n  );\n}\n\nexport function checkInvalidActionType(arg: StringType) {\n  return typeof arg !== 'string' && typeof arg !== 'symbol';\n}\n\nexport function throwInvalidActionType(argPosition: number = 1): never {\n  throw new Error(\n    `Argument ${argPosition} is invalid, it should be an action type of type: string | symbol`\n  );\n}\n\nexport function checkInvalidActionTypeInArray(\n  arg: StringType,\n  idx: number\n): void | never {\n  if (arg == null) {\n    throw new Error(\n      `Argument contains array with empty element at index ${idx}`\n    );\n  } else if (typeof arg !== 'string' && typeof arg !== 'symbol') {\n    throw new Error(\n      `Argument contains array with invalid element at index ${idx}, it should be of type: string | symbol`\n    );\n  }\n}\n\nexport function checkInvalidActionCreatorInArray(\n  arg: ActionCreator<StringType> & TypeMeta<StringType>,\n  idx: number\n): void | never {\n  if (arg == null) {\n    throw new Error(\n      `Argument contains array with empty element at index ${idx}`\n    );\n  } else if (arg.getType == null) {\n    throw new Error(\n      // tslint:disable-next-line:max-line-length\n      `Argument contains array with invalid element at index ${idx}, it should be an action-creator instance from \"typesafe-actions\"`\n    );\n  }\n}\n","import { StringType } from './type-helpers';\nimport {\n  checkIsEmpty,\n  throwIsEmpty,\n  checkInvalidActionType,\n  throwInvalidActionCreator,\n} from './utils/validation';\n\nexport function action<T extends StringType, E>(\n  type: T,\n  payload: undefined,\n  meta: undefined,\n  error: E\n): { type: T; error: E };\n\nexport function action<T extends StringType, M, E>(\n  type: T,\n  payload: undefined,\n  meta: M,\n  error: E\n): { type: T; meta: M; error: E };\n\nexport function action<T extends StringType, P, E>(\n  type: T,\n  payload: P,\n  meta: undefined,\n  error: E\n): { type: T; payload: P; error: E };\n\nexport function action<T extends StringType, P, M, E>(\n  type: T,\n  payload: P,\n  meta: M,\n  error: E\n): { type: T; payload: P; meta: M; error: E };\n\nexport function action<T extends StringType, M>(\n  type: T,\n  payload: undefined,\n  meta: M\n): { type: T; meta: M };\n\nexport function action<T extends StringType, P, M>(\n  type: T,\n  payload: P,\n  meta: M\n): { type: T; payload: P; meta: M };\n\nexport function action<T extends StringType, P>(\n  type: T,\n  payload: P\n): { type: T; payload: P };\n\nexport function action<T extends StringType>(type: T): { type: T };\n\n/**\n * @description flux standard action factory\n * @example\n * ```\n * const add = (amount: number, meta?: MetaShape) => action('INCREMENT', amount, meta);\n * ```\n */\nexport function action<\n  T extends StringType,\n  P = undefined,\n  M = undefined,\n  E = undefined\n>(type: T, payload?: P, meta?: M, error?: E) {\n  if (checkIsEmpty(type)) {\n    throwIsEmpty(1);\n  }\n\n  if (checkInvalidActionType(type)) {\n    throwInvalidActionCreator(1);\n  }\n\n  return { type, payload, meta, error } as any;\n}\n","import { ActionCreator, StringType } from './type-helpers';\nimport {\n  checkIsEmpty,\n  throwIsEmpty,\n  checkInvalidActionType,\n  throwInvalidActionType,\n} from './utils/validation';\n\n/**\n * @description create custom action-creator using constructor function with injected type argument\n */\nexport function createCustomAction<\n  T extends StringType,\n  AC extends ActionCreator<T> = () => { type: T }\n>(type: T, createHandler?: (type: T) => AC): AC {\n  if (checkIsEmpty(type)) {\n    throwIsEmpty(1);\n  }\n\n  if (checkInvalidActionType(type)) {\n    throwInvalidActionType(1);\n  }\n\n  const actionCreator: AC =\n    createHandler != null ? createHandler(type) : ((() => ({ type })) as AC);\n\n  return Object.assign(actionCreator, {\n    getType: () => type,\n    // redux-actions compatibility\n    toString: () => type,\n  });\n}\n","import { StringType, ActionCreator } from './type-helpers';\nimport { action } from './action';\n\nexport type PayloadMetaAction<T extends StringType, P, M> = P extends undefined\n  ? M extends undefined\n    ? { type: T }\n    : { type: T; meta: M }\n  : M extends undefined\n  ? { type: T; payload: P }\n  : { type: T; payload: P; meta: M };\n\n/**\n * @description typesafe action-creator factory\n */\nexport function createAction<\n  T extends StringType,\n  AC extends ActionCreator<T> = () => { type: T }\n>(\n  type: T,\n  createHandler?: (\n    actionCallback: <P = undefined, M = undefined>(\n      payload?: P,\n      meta?: M\n    ) => PayloadMetaAction<T, P, M>\n  ) => AC\n): AC {\n  // validation is already done in action function\n\n  const actionCreator: AC =\n    createHandler == null\n      ? ((() => action(type)) as AC)\n      : createHandler(action.bind(null, type) as Parameters<\n          typeof createHandler\n        >[0]);\n\n  return Object.assign(actionCreator, {\n    getType: () => type,\n    // redux-actions compatibility\n    toString: () => type,\n  });\n}\n","import {\n  StringType,\n  ActionBuilderConstructor,\n  ActionBuilderMap,\n} from './type-helpers';\nimport { createCustomAction } from './create-custom-action';\nimport {\n  checkIsEmpty,\n  throwIsEmpty,\n  checkInvalidActionType,\n  throwInvalidActionType,\n} from './utils/validation';\n\nexport interface ActionBuilder<T extends StringType> {\n  <P = undefined, M = undefined>(): ActionBuilderConstructor<T, P, M>;\n  map<R, P = undefined, M = undefined>(\n    fn: (payload: P, meta: M) => R\n  ): ActionBuilderMap<T, R, P, M>;\n}\n\n/**\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createStandardAction<T extends StringType>(\n  type: T\n): ActionBuilder<T> {\n  if (checkIsEmpty(type)) {\n    throwIsEmpty(1);\n  }\n\n  if (checkInvalidActionType(type)) {\n    throwInvalidActionType(1);\n  }\n\n  function constructor<P, M = undefined>(): ActionBuilderConstructor<T, P, M> {\n    return createCustomAction(type, _type => (payload: P, meta: M) => ({\n      type: _type,\n      payload,\n      meta,\n    })) as ActionBuilderConstructor<T, P, M>;\n  }\n\n  function map<R, P, M>(\n    fn: (payload: P, meta: M) => R\n  ): ActionBuilderMap<T, R, P, M> {\n    return createCustomAction(type, _type => (payload: P, meta: M) =>\n      Object.assign(fn(payload, meta), { type: _type })\n    ) as ActionBuilderMap<T, R, P, M>;\n  }\n\n  return Object.assign(constructor, { map });\n}\n","import {\n  StringType,\n  ActionBuilderConstructor,\n  // ActionBuilderMap,\n} from './type-helpers';\nimport { createCustomAction } from './create-custom-action';\nimport { checkInvalidActionTypeInArray } from './utils/validation';\n\nexport interface AsyncActionBuilder<\n  T1 extends StringType,\n  T2 extends StringType,\n  T3 extends StringType\n> {\n  // tslint:disable-next-line:callable-types\n  <P1, P2, P3>(): AsyncActionBuilderConstructor<T1, T2, T3, P1, P2, P3>;\n  // withMappers<A1 = undefined, P1 = undefined, A2 = undefined, P2 = undefined, A3 = undefined, P3 = undefined>(\n  //   requestMapper: (a?: A1) => P1,\n  //   successMapper: (a?: A2) => P2,\n  //   failureMapper: (a?: A3) => P3\n  // ): AsyncActionBuilderWithMappers<T1, T2, T3, A1, P1, A2, P2, A3, P3>;\n}\n\nexport type AsyncActionBuilderConstructor<\n  T1 extends StringType,\n  T2 extends StringType,\n  T3 extends StringType,\n  P1,\n  P2,\n  P3\n> = {\n  request: ActionBuilderConstructor<T1, P1>;\n  success: ActionBuilderConstructor<T2, P2>;\n  failure: ActionBuilderConstructor<T3, P3>;\n};\n\n/**\n * implementation\n */\nexport function createAsyncAction<\n  T1 extends StringType,\n  T2 extends StringType,\n  T3 extends StringType\n>(\n  requestType: T1,\n  successType: T2,\n  failureType: T3\n): AsyncActionBuilder<T1, T2, T3> {\n  [requestType, successType, failureType].forEach(\n    checkInvalidActionTypeInArray\n  );\n\n  function constructor<P1, P2, P3>(): AsyncActionBuilderConstructor<\n    T1,\n    T2,\n    T3,\n    P1,\n    P2,\n    P3\n  > {\n    return {\n      request: createCustomAction(requestType, type => (payload?: P1) => ({\n        type,\n        payload,\n      })) as ActionBuilderConstructor<T1, P1>,\n      success: createCustomAction(successType, type => (payload?: P2) => ({\n        type,\n        payload,\n      })) as ActionBuilderConstructor<T2, P2>,\n      failure: createCustomAction(failureType, type => (payload?: P3) => ({\n        type,\n        payload,\n      })) as ActionBuilderConstructor<T3, P3>,\n    };\n  }\n\n  return Object.assign(constructor);\n}\n\n// export type AsyncActionBuilderWithMappers<\n//   T1 extends StringType,\n//   T2 extends StringType,\n//   T3 extends StringType,\n//   A1 = undefined,\n//   P1 = undefined,\n//   A2 = undefined,\n//   P2 = undefined,\n//   A3 = undefined,\n//   P3 = undefined\n//   > = {\n//     request: ActionBuilderMap<T1, A1, P1>;\n//     success: ActionBuilderMap<T2, A2, P2>;\n//     failure: ActionBuilderMap<T3, A3, P3>;\n//   };\n\n// function withMappers<A1, P1, A2, P2, A3, P3>(\n//   requestMapper: (a?: A1) => P1,\n//   successMapper: (a?: A2) => P2,\n//   failureMapper: (a?: A3) => P3\n// ): AsyncActionBuilderWithMappers<T1, T2, T3, A1, P1, A2, P2, A3, P3> {\n//   return {\n//     request: createCustomAction(requestType, type => (payload?: A1) => ({\n//       type,\n//       payload: requestMapper != null ? requestMapper(payload) : undefined,\n//     })) as MapBuilder<T1, A1, P1>,\n//     success: createCustomAction(successType, type => (payload?: A2) => ({\n//       type,\n//       payload: successMapper != null ? successMapper(payload) : undefined,\n//     })) as MapBuilder<T2, A2, P2>,\n//     failure: createCustomAction(failureType, type => (payload?: A3) => ({\n//       type,\n//       payload: failureMapper != null ? failureMapper(payload) : undefined,\n//     })) as MapBuilder<T3, A3, P3>,\n//   };\n// }\n","import { StringType, ActionCreator, TypeMeta } from './type-helpers';\nimport {\n  checkIsEmpty,\n  throwIsEmpty,\n  checkInvalidActionCreator,\n  throwInvalidActionCreator,\n} from './utils/validation';\n\n/**\n * @description get the \"type literal\" of a given action-creator\n */\nexport function getType<T extends StringType>(\n  actionCreator: ActionCreator<T> & TypeMeta<T>\n): T {\n  if (checkIsEmpty(actionCreator)) {\n    throwIsEmpty(1);\n  }\n\n  if (checkInvalidActionCreator(actionCreator)) {\n    throwInvalidActionCreator(1);\n  }\n\n  return actionCreator.getType!();\n}\n","import {\n  checkInvalidActionTypeInArray,\n  checkIsEmpty,\n  throwIsEmpty,\n} from './utils/validation';\n/**\n * @description (curried assert function) check if action type is equal given type-constant\n * @description it works with discriminated union types\n */\nexport function isOfType<T extends string, A extends { type: string }>(\n  type: T | T[],\n  action: A\n): action is A extends { type: T } ? A : never;\n\n/**\n * @description (curried assert function) check if action type is equal given type-constant\n * @description it works with discriminated union types\n */\nexport function isOfType<T extends string>(\n  type: T | T[]\n): <A extends { type: string }>(\n  action: A\n) => action is A extends { type: T } ? A : never;\n\n/**\n * implementation\n */\nexport function isOfType<T extends string, A extends { type: T }>(\n  actionTypeOrTypes: T | T[],\n  action?: A\n) {\n  if (checkIsEmpty(actionTypeOrTypes)) {\n    throwIsEmpty(1);\n  }\n\n  const actionTypes = Array.isArray(actionTypeOrTypes)\n    ? actionTypeOrTypes\n    : [actionTypeOrTypes];\n\n  actionTypes.forEach(checkInvalidActionTypeInArray);\n\n  const assertFn = (_action: A) => actionTypes.includes(_action.type);\n\n  // 1 arg case => return curried version\n  if (action === undefined) {\n    return assertFn;\n  }\n  // 2 args case => invoke assertFn and return the result\n  return assertFn(action);\n}\n","import { TypeMeta } from './type-helpers';\nimport {\n  checkInvalidActionCreatorInArray,\n  checkIsEmpty,\n  throwIsEmpty,\n} from './utils/validation';\n\nexport type ActionCreator<T extends { type: string }> = ((\n  ...args: any[]\n) => T) &\n  TypeMeta<T['type']>;\n\n/**\n * @description (curried assert function) check if an action is the instance of given action-creator(s)\n * @description it works with discriminated union types\n */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  actionCreator: AC | AC[],\n  action: { type: string }\n): action is ReturnType<AC>;\n\n/**\n * @description (curried assert function) check if an action is the instance of given action-creator(s)\n * @description it works with discriminated union types\n */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  actionCreator: AC | AC[]\n): (action: { type: string }) => action is ReturnType<AC>;\n\n/**\n * implementation\n */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  actionCreatorOrCreators: AC | AC[],\n  action?: { type: string }\n) {\n  if (checkIsEmpty(actionCreatorOrCreators)) {\n    throwIsEmpty(1);\n  }\n\n  const actionCreators = Array.isArray(actionCreatorOrCreators)\n    ? actionCreatorOrCreators\n    : [actionCreatorOrCreators];\n\n  actionCreators.forEach(checkInvalidActionCreatorInArray);\n\n  const assertFn = (_action: { type: string }) =>\n    actionCreators.some(\n      actionCreator => _action.type === actionCreator.getType!()\n    );\n\n  // 1 arg case => return curried version\n  if (action === undefined) {\n    return assertFn;\n  }\n  // 2 args case => invoke assertFn and return the result\n  return assertFn(action);\n}\n","/**\n * DEPRECATED\n */\n\nimport { StringType } from './type-helpers';\n\ninterface FSA<T extends StringType, P = {}, M = {}, E = boolean> {\n  type: T;\n  payload?: P;\n  meta?: M;\n  error?: E;\n}\n\n/**\n * @deprecated\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createActionDeprecated<\n  T extends StringType,\n  AC extends (...args: any[]) => FSA<T>\n>(actionType: T, creatorFunction: AC): AC;\n\n/**\n * @deprecated\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createActionDeprecated<\n  T extends StringType,\n  AC extends () => { type: T }\n>(actionType: T): AC;\n\n/**\n *  implementation\n */\nexport function createActionDeprecated<\n  T extends StringType,\n  AC extends (...args: any[]) => FSA<T>\n>(actionType: T, creatorFunction?: AC): AC {\n  let actionCreator: AC;\n\n  if (creatorFunction != null) {\n    if (typeof creatorFunction !== 'function') {\n      throw new Error('second argument is not a function');\n    }\n\n    actionCreator = creatorFunction as AC;\n  } else {\n    actionCreator = (() => ({ type: actionType })) as AC;\n  }\n\n  if (actionType != null) {\n    if (typeof actionType !== 'string' && typeof actionType !== 'symbol') {\n      throw new Error('first argument should be type of: string | symbol');\n    }\n  } else {\n    throw new Error('first argument is missing');\n  }\n\n  return actionCreator;\n}\n"],"names":["checkIsEmpty","arg","argPosition","throwIsEmpty","Error","throwInvalidActionCreator","checkInvalidActionType","throwInvalidActionType","checkInvalidActionTypeInArray","idx","checkInvalidActionCreatorInArray","getType","action","type","payload","meta","error","createCustomAction","createHandler","actionCreator","Object","assign","toString","bind","_type","map","fn","requestType","successType","failureType","forEach","request","success","failure","actionTypeOrTypes","actionTypes","Array","isArray","assertFn","_action","includes","undefined","actionCreatorOrCreators","actionCreators","some","actionType","creatorFunction"],"mappings":"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"}