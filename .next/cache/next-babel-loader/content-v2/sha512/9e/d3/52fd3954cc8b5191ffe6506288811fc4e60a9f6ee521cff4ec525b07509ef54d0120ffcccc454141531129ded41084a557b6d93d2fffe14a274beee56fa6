{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getType } from 'typesafe-actions';\nimport { Web3State } from '../../types/blockchain';\nimport * as actions from '../actions';\nconst initialBlockchainState = {\n  ethAccount: '',\n  web3State: Web3State.Loading,\n  message: null,\n  tokenBalances: [],\n  balance: null,\n  paymaster: null,\n  networkID: 0,\n  gsnProvider: null,\n  web3Provider: null,\n  gasPrice: null\n};\nexport default function blockchain(state = initialBlockchainState, action) {\n  switch (action.type) {\n    case getType(actions.setEthAccount):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        ethAccount: action.payload\n      });\n\n    case getType(actions.setWeb3State):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        web3State: action.payload\n      });\n\n    case getType(actions.setTokenBalance):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenBalances: [...state.tokenBalances.filter(t => t.token.address !== action.payload.token.address), action.payload]\n      });\n\n    case getType(actions.setNetworkID):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        networkID: action.payload\n      });\n\n    case getType(actions.initializeBlockchainData):\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case getType(actions.setNetworkBalance):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balance: action.payload\n      });\n\n    case getType(actions.setPaymasterData):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        paymaster: action.payload\n      });\n\n    case getType(actions.setGSNProvider):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gsnProvider: action.payload\n      });\n\n    case getType(actions.setGasPrice):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gasPrice: action.payload\n      });\n\n    case getType(actions.setWeb3Provider):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        web3Provider: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/store/blockchain/reducers.ts"],"names":["getType","Web3State","actions","initialBlockchainState","ethAccount","web3State","Loading","message","tokenBalances","balance","paymaster","networkID","gsnProvider","web3Provider","gasPrice","blockchain","state","action","type","setEthAccount","payload","setWeb3State","setTokenBalance","filter","t","token","address","setNetworkID","initializeBlockchainData","setNetworkBalance","setPaymasterData","setGSNProvider","setGasPrice","setWeb3Provider"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,kBAAxB;AAEA,SAAqBC,SAArB,QAAsC,wBAAtC;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AAGA,MAAMC,sBAAkC,GAAG;AACvCC,EAAAA,UAAU,EAAE,EAD2B;AAEvCC,EAAAA,SAAS,EAAEJ,SAAS,CAACK,OAFkB;AAGvCC,EAAAA,OAAO,EAAE,IAH8B;AAIvCC,EAAAA,aAAa,EAAE,EAJwB;AAKvCC,EAAAA,OAAO,EAAE,IAL8B;AAMvCC,EAAAA,SAAS,EAAE,IAN4B;AAOvCC,EAAAA,SAAS,EAAE,CAP4B;AAQvCC,EAAAA,WAAW,EAAE,IAR0B;AASvCC,EAAAA,YAAY,EAAE,IATyB;AAUvCC,EAAAA,QAAQ,EAAE;AAV6B,CAA3C;AAcA,eAAe,SAASC,UAAT,CAAoBC,KAAiB,GAAGb,sBAAxC,EAAgEc,MAAhE,EAAgG;AAC3G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKlB,OAAO,CAACE,OAAO,CAACiB,aAAT,CAAZ;AACI,6CAAYH,KAAZ;AAAmBZ,QAAAA,UAAU,EAAEa,MAAM,CAACG;AAAtC;;AACJ,SAAKpB,OAAO,CAACE,OAAO,CAACmB,YAAT,CAAZ;AACI,6CAAYL,KAAZ;AAAmBX,QAAAA,SAAS,EAAEY,MAAM,CAACG;AAArC;;AACJ,SAAKpB,OAAO,CAACE,OAAO,CAACoB,eAAT,CAAZ;AACI,6CACON,KADP;AAEIR,QAAAA,aAAa,EAAE,CAAC,GAAGQ,KAAK,CAACR,aAAN,CAAoBe,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQC,OAAR,KAAoBT,MAAM,CAACG,OAAP,CAAeK,KAAf,CAAqBC,OAAzE,CAAJ,EAAuFT,MAAM,CAACG,OAA9F;AAFnB;;AAIJ,SAAKpB,OAAO,CAACE,OAAO,CAACyB,YAAT,CAAZ;AACI,6CAAYX,KAAZ;AAAmBL,QAAAA,SAAS,EAAEM,MAAM,CAACG;AAArC;;AACJ,SAAKpB,OAAO,CAACE,OAAO,CAAC0B,wBAAT,CAAZ;AACQ,6CAAYZ,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AAER,SAAKpB,OAAO,CAACE,OAAO,CAAC2B,iBAAT,CAAZ;AACI,6CACOb,KADP;AAEIP,QAAAA,OAAO,EAAEQ,MAAM,CAACG;AAFpB;;AAIJ,SAAKpB,OAAO,CAACE,OAAO,CAAC4B,gBAAT,CAAZ;AACI,6CACOd,KADP;AAEIN,QAAAA,SAAS,EAAEO,MAAM,CAACG;AAFtB;;AAIJ,SAAKpB,OAAO,CAACE,OAAO,CAAC6B,cAAT,CAAZ;AACI,6CAAYf,KAAZ;AAAmBJ,QAAAA,WAAW,EAAEK,MAAM,CAACG;AAAvC;;AACJ,SAAKpB,OAAO,CAACE,OAAO,CAAC8B,WAAT,CAAZ;AACI,6CAAYhB,KAAZ;AAAmBF,QAAAA,QAAQ,EAAEG,MAAM,CAACG;AAApC;;AACJ,SAAKpB,OAAO,CAACE,OAAO,CAAC+B,eAAT,CAAZ;AACI,6CAAYjB,KAAZ;AAAmBH,QAAAA,YAAY,EAAEI,MAAM,CAACG;AAAxC;;AAEJ;AACI,aAAOJ,KAAP;AAjCR;AAmCH","sourcesContent":["import { getType } from 'typesafe-actions';\n\nimport { Blockchain, Web3State } from '../../types/blockchain'\nimport * as actions from '../actions';\nimport { RootAction } from '../reducers';\n\nconst initialBlockchainState: Blockchain = {\n    ethAccount: '',\n    web3State: Web3State.Loading,\n    message: null, \n    tokenBalances: [],\n    balance: null,\n    paymaster: null,\n    networkID: 0,\n    gsnProvider: null,\n    web3Provider: null,\n    gasPrice: null,\n};\n\n\nexport default function blockchain(state: Blockchain = initialBlockchainState, action: RootAction): Blockchain {\n    switch (action.type) {\n        case getType(actions.setEthAccount):\n            return { ...state, ethAccount: action.payload };\n        case getType(actions.setWeb3State):\n            return { ...state, web3State: action.payload };\n        case getType(actions.setTokenBalance):\n            return { \n                ...state, \n                tokenBalances: [...state.tokenBalances.filter(t => t.token.address !== action.payload.token.address), action.payload]\n             };\n        case getType(actions.setNetworkID):\n            return { ...state, networkID: action.payload}\n        case getType(actions.initializeBlockchainData):\n                return { ...state, ...action.payload };\n        \n        case getType(actions.setNetworkBalance):\n            return { \n                ...state, \n                balance: action.payload\n            }\n        case getType(actions.setPaymasterData):\n            return { \n                ...state, \n                paymaster: action.payload\n            }\n        case getType(actions.setGSNProvider):\n            return { ...state, gsnProvider: action.payload}\n        case getType(actions.setGasPrice):\n            return { ...state, gasPrice: action.payload}\n        case getType(actions.setWeb3Provider):\n            return { ...state, web3Provider: action.payload}\n        \n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}