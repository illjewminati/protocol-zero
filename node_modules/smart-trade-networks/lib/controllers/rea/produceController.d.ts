import { BigNumberish, BytesLike, ContractTransaction, Signer } from "ethers";
import { Produce } from "../../types";
import { ProviderOrSigner } from "../../localTypes";
export declare type EntryData = [string, string, string, BigNumberish[], BigNumberish, string[], string] & {
    company: string;
    signatorie: string;
    stn721Address: string;
    tokenIds: BigNumberish[];
    timestamp: BigNumberish;
    involvedCompanies: string[];
    dbId: string;
};
export declare type ValidationData = [string, string, BigNumberish] & {
    company: string;
    signatorie: string;
    timestamp: BigNumberish;
};
export declare class ProduceController {
    private _signer;
    private _produceAddress;
    private _produceContract?;
    constructor(_produceAddress: string, signerOrProvider: ProviderOrSigner);
    private _getProduceContract;
    static deployProduceContract(signer: Signer, owner: string, permissionsAddress: string): Promise<Produce>;
    /**Getters */
    getContract(): Promise<Produce>;
    getEntriesByCompany(companyAddress: string): Promise<Array<BigNumberish>>;
    getEntriesByUser(userAddress: string): Promise<Array<BigNumberish>>;
    getEntryData(entryNumber: BigNumberish): Promise<EntryData>;
    getNumOfValidations(entryNumber: BigNumberish): Promise<BigNumberish>;
    getValidation(entryNumber: BigNumberish, index: BigNumberish): Promise<ValidationData>;
    /** Setters */
    setPermissionsContract(newAddress: string): Promise<ContractTransaction>;
    setSTN721ManagerContract(newAddress: string): Promise<ContractTransaction>;
    produce(tokenIds: Array<BigNumberish>, stn721Address: string, companyAddress: string, divisible: boolean, involvedCompanies: Array<string>, dbId: BytesLike): Promise<ContractTransaction>;
    produceChild(tokenIds: Array<BigNumberish>, stn721Address: string, companyAddress: string, divisible: boolean, involvedCompanies: Array<string>, dbId: BytesLike): Promise<ContractTransaction>;
    createSTN721Child(companyAddress: string, stn721Parent: string, tokenId: BigNumberish, name: string, symbol: string): Promise<ContractTransaction>;
    validateEntry(entryNumber: BigNumberish, companyAddress: string): Promise<ContractTransaction>;
}
