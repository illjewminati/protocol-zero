/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MultisigENSInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setMultisigName(string)": FunctionFragment;
    "setUserName(string)": FunctionFragment;
    "setMultisigDeployerAddress(address)": FunctionFragment;
    "getMultisigDeployerAddress()": FunctionFragment;
    "getMultisigName(address)": FunctionFragment;
    "getUserName(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultisigName",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setUserName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMultisigDeployerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultisigDeployerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultisigName",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getUserName", values: [string]): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultisigName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultisigDeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultisigDeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultisigName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserName",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetContractName(address,string)": EventFragment;
    "SetMultisigDeployerAddress(address)": EventFragment;
    "SetUserName(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetContractName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMultisigDeployerAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUserName"): EventFragment;
}

export class MultisigENS extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultisigENSInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultisigName(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultisigName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUserName(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUserName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultisigDeployerAddress(
      _msigDeployerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultisigDeployerAddress(address)"(
      _msigDeployerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMultisigDeployerAddress(overrides?: CallOverrides): Promise<[string]>;

    "getMultisigDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMultisigName(
      _msig: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getMultisigName(address)"(
      _msig: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserName(_user: string, overrides?: CallOverrides): Promise<[string]>;

    "getUserName(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultisigName(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultisigName(string)"(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUserName(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUserName(string)"(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultisigDeployerAddress(
    _msigDeployerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultisigDeployerAddress(address)"(
    _msigDeployerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMultisigDeployerAddress(overrides?: CallOverrides): Promise<string>;

  "getMultisigDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

  getMultisigName(_msig: string, overrides?: CallOverrides): Promise<string>;

  "getMultisigName(address)"(
    _msig: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserName(_user: string, overrides?: CallOverrides): Promise<string>;

  "getUserName(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultisigName(_name: string, overrides?: CallOverrides): Promise<void>;

    "setMultisigName(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserName(_name: string, overrides?: CallOverrides): Promise<void>;

    "setUserName(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultisigDeployerAddress(
      _msigDeployerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMultisigDeployerAddress(address)"(
      _msigDeployerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getMultisigDeployerAddress(overrides?: CallOverrides): Promise<string>;

    "getMultisigDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

    getMultisigName(_msig: string, overrides?: CallOverrides): Promise<string>;

    "getMultisigName(address)"(
      _msig: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserName(_user: string, overrides?: CallOverrides): Promise<string>;

    "getUserName(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetContractName(msigAddress: string | null, name: null): EventFilter;

    SetMultisigDeployerAddress(msigDeployerAddress: string | null): EventFilter;

    SetUserName(userAddress: string | null, name: null): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultisigName(_name: string, overrides?: Overrides): Promise<BigNumber>;

    "setMultisigName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUserName(_name: string, overrides?: Overrides): Promise<BigNumber>;

    "setUserName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultisigDeployerAddress(
      _msigDeployerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMultisigDeployerAddress(address)"(
      _msigDeployerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMultisigDeployerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getMultisigDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultisigName(
      _msig: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultisigName(address)"(
      _msig: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserName(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserName(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultisigName(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultisigName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUserName(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUserName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultisigDeployerAddress(
      _msigDeployerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultisigDeployerAddress(address)"(
      _msigDeployerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMultisigDeployerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultisigDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultisigName(
      _msig: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultisigName(address)"(
      _msig: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserName(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserName(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
