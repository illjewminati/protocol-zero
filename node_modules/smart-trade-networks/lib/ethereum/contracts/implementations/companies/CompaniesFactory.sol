// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../../interfaces/ICompaniesFactory.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./Company.sol"; 

contract CompaniesFactory is ICompaniesFactory, Ownable { 

    /** @dev in the form of (companyAddress => isApproved) */
    mapping (address => bool) private _isApproved;

    mapping (address => bool) private _isCreated;

    /** @dev in the form of 
     (companyAddress =>   (ownerAddress => bool)) */
    mapping (address => mapping(address => bool)) private _owners;
 
    /** @dev in the form of 
     (companyAddress =>        (signer => bool)) */
    mapping (address => mapping(address => bool)) private _signers;

    mapping (address => address[]) private _companiesBySigner;

    mapping (address => address[]) private _signersByCompany;

    address[] companies;

    modifier onlyCompanyOwner(address _companyAddress) {
        require(_owners[_companyAddress][_msgSender()], "Sender is not company owner");
        _;
    }

    /** @param _owner is multisigwallet */
    constructor(address _owner) {
        require(_owner != address(0), "Owner cannot be 0");
        transferOwnership(_owner);
    }

    function createCompany(address _companyOwner, string calldata _name, bytes32 _ipfsLink) external virtual override onlyOwner {
        require(_companyOwner != address(0), "Company owner cannot be 0");
        Company newCompany = new Company(_companyOwner, _name, _ipfsLink);
        address companyAddress = address(newCompany);
        _isApproved[companyAddress] = true;
        _isCreated[companyAddress] = true;
        companies.push(companyAddress);

        _owners[companyAddress][_companyOwner] = true;
        _companiesBySigner[_companyOwner].push(companyAddress);
        _signers[companyAddress][_companyOwner] = true;
        _signersByCompany[companyAddress].push(_companyOwner);

        emit NewCompany(companyAddress, _companyOwner);
    }

    function removeCompany(address _company) external virtual override onlyOwner {
        require(_company != address(0), "Company cannot be 0");
        require(_isCreated[_company], "Company does not exist");
        require(_isApproved[_company], "Company already removed");
        _isApproved[_company] = false;
        emit RemoveCompany(_company);
    }

    function approveCompany(address _company) external virtual override onlyOwner {
        require(_company != address(0), "Company cannot be 0");
        require(_isCreated[_company], "Company does not exist");
        require(!_isApproved[_company], "Company already approved");
        _isApproved[_company] = true;
        emit ApproveCompany(_company);
    }

    function addCompanySignatorie(address _company, address _newSignatorie) external virtual override onlyCompanyOwner(_company) {
        require(_company != address(0), "Company cannot be 0");
        require(_isCreated[_company], "Company does not exist");
        require(_isApproved[_company], "Company not approved");
        require(!_signers[_company][_newSignatorie], "Signer already added");
        _signers[_company][_newSignatorie] = true;
        _companiesBySigner[_newSignatorie].push(_company);
        _signersByCompany[_company].push(_newSignatorie);
        emit NewSignatorie(_company, _newSignatorie);
    }

    function removeCompanySignatorie(address _company, address _signer) external virtual override onlyCompanyOwner(_company) {
        require(_company != address(0), "Company cannot be 0");
        require(_isCreated[_company], "Company does not exist");
        require(_isApproved[_company], "Company not approved");
        require(_signers[_company][_signer], "Signer already removed or doesnt exist");
        require(!_owners[_company][_signer], "Cannot remove owner from signatories");
        _signers[_company][_signer] = false; 

        address[] memory companiesBySigner = _companiesBySigner[_signer];
        int256 companyIndex = _indexOf(companiesBySigner, _company);
        require(companyIndex >= 0, "Unable to find company by signatorie");
        _companiesBySigner[_signer][uint256(companyIndex)] = _companiesBySigner[_signer][_companiesBySigner[_signer].length - 1];
        _companiesBySigner[_signer].pop();

        address[] memory signersByCompany = _signersByCompany[_company];
        int256 signerIndex = _indexOf(signersByCompany, _signer);
        require(signerIndex >= 0, "Unable to find signatorie by company");
        _signersByCompany[_company][uint256(signerIndex)] = _signersByCompany[_company][_signersByCompany[_company].length - 1];
        _signersByCompany[_company].pop();

        emit RemoveSignatorie(_company, _signer);
    }

    function getCompanies() external virtual override view returns(address[] memory) {
        return companies; 
    }

    function isCompanyOwner(address _company, address _owner) external virtual override view returns (bool) {
        return _owners[_company][_owner];
    }

    function getCompaniesBySignatorie(address _signer) external virtual override view returns (address[] memory) {
        return _companiesBySigner[_signer];
    }

    function getSignersByCompany(address _company) external virtual override view returns (address[] memory) {
        return _signersByCompany[_company];
    }

    function isCompanyApproved(address _company) external virtual override view returns(bool) {
        return _isApproved[_company];
    }

    function isSignerApproved(address _company, address _signer) external virtual override view returns(bool) {
        address[] memory signersByCompany = _signersByCompany[_company];
        int256 signerIndex = _indexOf(signersByCompany, _signer);
        return signerIndex >= 0;
    }
    
    function _indexOf(address[] memory array, address _address) private pure returns (int256) {
        for(uint256 i = 0; i < array.length; i++) {
            if(array[i] == _address) return int256(i);
        }
        return int8(-1);
    } 
}