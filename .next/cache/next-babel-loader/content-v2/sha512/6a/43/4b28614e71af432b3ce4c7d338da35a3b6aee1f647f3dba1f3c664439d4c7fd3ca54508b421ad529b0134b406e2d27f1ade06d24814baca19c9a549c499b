{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Validator } from 'jsonschema';\nimport configFile from '../config.json';\nimport { configSchema, schemas } from './configSchema';\nexport class Config {\n  static getInstance() {\n    if (!Config._instance) {\n      Config._instance = new Config();\n    }\n\n    return Config._instance;\n  }\n\n  static getConfig() {\n    return this.getInstance()._config;\n  }\n\n  constructor() {\n    _defineProperty(this, \"_validator\", void 0);\n\n    _defineProperty(this, \"_config\", void 0);\n\n    this._validator = new Validator();\n\n    for (const schema of schemas) {\n      this._validator.addSchema(schema, schema.id);\n    }\n\n    this._validator.validate(configFile, configSchema, {\n      throwError: true\n    });\n\n    this._config = configFile;\n  }\n\n}\n\n_defineProperty(Config, \"_instance\", void 0);","map":null,"metadata":{},"sourceType":"module"}