/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FeeCollectorDeployerInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getFeeCollectorBytecode()": FunctionFragment;
    "getProxyBytecode()": FunctionFragment;
    "getAddress(bytes,uint256)": FunctionFragment;
    "getContractSalt(address)": FunctionFragment;
    "deployPrecomputed(bytes,uint256)": FunctionFragment;
    "setProxyOwner(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeCollectorBytecode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyBytecode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractSalt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPrecomputed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyOwner",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollectorBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployPrecomputed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyOwner",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class FeeCollectorDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FeeCollectorDeployerInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Step 3: Call upgradeToAndCall from Proxy, with initialize function
     */
    getFeeCollectorBytecode(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Step 3: Call upgradeToAndCall from Proxy, with initialize function
     */
    "getFeeCollectorBytecode()"(overrides?: CallOverrides): Promise<[string]>;

    getProxyBytecode(overrides?: CallOverrides): Promise<[string]>;

    "getProxyBytecode()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @param _salt is a random number used to create an address
     */
    getAddress(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * @param _salt is a random number used to create an address
     */
    "getAddress(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContractSalt(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getContractSalt(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * @param _salt is a random number used to create an address
     */
    deployPrecomputed(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param _salt is a random number used to create an address
     */
    "deployPrecomputed(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param _proxy address
     */
    setProxyOwner(
      _newOwner: string,
      _proxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param _proxy address
     */
    "setProxyOwner(address,address)"(
      _newOwner: string,
      _proxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Step 3: Call upgradeToAndCall from Proxy, with initialize function
   */
  getFeeCollectorBytecode(overrides?: CallOverrides): Promise<string>;

  /**
   * Step 3: Call upgradeToAndCall from Proxy, with initialize function
   */
  "getFeeCollectorBytecode()"(overrides?: CallOverrides): Promise<string>;

  getProxyBytecode(overrides?: CallOverrides): Promise<string>;

  "getProxyBytecode()"(overrides?: CallOverrides): Promise<string>;

  /**
   * @param _salt is a random number used to create an address
   */
  getAddress(
    bytecode: BytesLike,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * @param _salt is a random number used to create an address
   */
  "getAddress(bytes,uint256)"(
    bytecode: BytesLike,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractSalt(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getContractSalt(address)"(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * @param _salt is a random number used to create an address
   */
  deployPrecomputed(
    bytecode: BytesLike,
    _salt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param _salt is a random number used to create an address
   */
  "deployPrecomputed(bytes,uint256)"(
    bytecode: BytesLike,
    _salt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param _proxy address
   */
  setProxyOwner(
    _newOwner: string,
    _proxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param _proxy address
   */
  "setProxyOwner(address,address)"(
    _newOwner: string,
    _proxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Step 3: Call upgradeToAndCall from Proxy, with initialize function
     */
    getFeeCollectorBytecode(overrides?: CallOverrides): Promise<string>;

    /**
     * Step 3: Call upgradeToAndCall from Proxy, with initialize function
     */
    "getFeeCollectorBytecode()"(overrides?: CallOverrides): Promise<string>;

    getProxyBytecode(overrides?: CallOverrides): Promise<string>;

    "getProxyBytecode()"(overrides?: CallOverrides): Promise<string>;

    /**
     * @param _salt is a random number used to create an address
     */
    getAddress(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * @param _salt is a random number used to create an address
     */
    "getAddress(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractSalt(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContractSalt(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * @param _salt is a random number used to create an address
     */
    deployPrecomputed(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _salt is a random number used to create an address
     */
    "deployPrecomputed(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _proxy address
     */
    setProxyOwner(
      _newOwner: string,
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _proxy address
     */
    "setProxyOwner(address,address)"(
      _newOwner: string,
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Step 3: Call upgradeToAndCall from Proxy, with initialize function
     */
    getFeeCollectorBytecode(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Step 3: Call upgradeToAndCall from Proxy, with initialize function
     */
    "getFeeCollectorBytecode()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyBytecode(overrides?: CallOverrides): Promise<BigNumber>;

    "getProxyBytecode()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @param _salt is a random number used to create an address
     */
    getAddress(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * @param _salt is a random number used to create an address
     */
    "getAddress(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractSalt(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContractSalt(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * @param _salt is a random number used to create an address
     */
    deployPrecomputed(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param _salt is a random number used to create an address
     */
    "deployPrecomputed(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param _proxy address
     */
    setProxyOwner(
      _newOwner: string,
      _proxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param _proxy address
     */
    "setProxyOwner(address,address)"(
      _newOwner: string,
      _proxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Step 3: Call upgradeToAndCall from Proxy, with initialize function
     */
    getFeeCollectorBytecode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Step 3: Call upgradeToAndCall from Proxy, with initialize function
     */
    "getFeeCollectorBytecode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyBytecode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getProxyBytecode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _salt is a random number used to create an address
     */
    getAddress(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _salt is a random number used to create an address
     */
    "getAddress(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractSalt(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContractSalt(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _salt is a random number used to create an address
     */
    deployPrecomputed(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _salt is a random number used to create an address
     */
    "deployPrecomputed(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _proxy address
     */
    setProxyOwner(
      _newOwner: string,
      _proxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _proxy address
     */
    "setProxyOwner(address,address)"(
      _newOwner: string,
      _proxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
