{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport { getEthAccount, getSelectedNetworkID, getWeb3State } from '../../store/blockchain/selectors';\nimport { Logo } from './logo';\nimport { WalletConnectionContentContainer } from './wallet_connection_content';\nimport { Web3State } from '../../types/blockchain';\nimport { ErrorIcons, FontSize, ErrorCard } from './error_card';\nimport { errorsWallet } from '../../util/error_messages';\nimport { getNetworkName } from '../../util/web3_utils';\nimport { NETWORK_ID } from '../../common/constants';\nvar NavActive;\n\n(function (NavActive) {\n  NavActive[NavActive[\"INDEX\"] = 0] = \"INDEX\";\n  NavActive[NavActive[\"MULTISIG\"] = 1] = \"MULTISIG\";\n})(NavActive || (NavActive = {}));\n\nclass ToolbarContent extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      active: NavActive.INDEX\n    });\n\n    _defineProperty(this, \"componentDidUpdate\", () => {\n      const activePath = this.getActivePath();\n\n      if (this.state.active !== activePath) {\n        this.setState({\n          active: activePath\n        });\n      }\n    });\n\n    _defineProperty(this, \"getActivePath\", () => {\n      const {\n        router\n      } = this.props;\n\n      switch (router.pathname) {\n        case \"/multisig\":\n          return NavActive.MULTISIG;\n\n        default:\n          return NavActive.INDEX;\n      }\n    });\n\n    _defineProperty(this, \"handleClick\", position => {\n      const {\n        router\n      } = this.props;\n      this.setState({\n        active: NavActive.INDEX\n      });\n\n      switch (position) {\n        case NavActive.MULTISIG:\n          return router.push('/multisig/new');\n      }\n    });\n\n    _defineProperty(this, \"getContentFromWeb3State\", web3State => {\n      console.log(web3State);\n\n      switch (web3State) {\n        case Web3State.Locked:\n          return /*#__PURE__*/_jsx(ErrorCard, {\n            fontSize: FontSize.Large,\n            text: errorsWallet.mmLocked,\n            icon: ErrorIcons.Lock\n          });\n\n        case Web3State.NotInstalled:\n          return /*#__PURE__*/_jsx(ErrorCard, {\n            fontSize: FontSize.Large,\n            text: errorsWallet.mmNotInstalled,\n            icon: ErrorIcons.Metamask\n          });\n\n        case Web3State.Loading:\n          return /*#__PURE__*/_jsx(ErrorCard, {\n            fontSize: FontSize.Large,\n            text: errorsWallet.mmLoading,\n            icon: ErrorIcons.Metamask\n          });\n\n        case Web3State.Error:\n          console.log(\"aca\");\n          return /*#__PURE__*/_jsx(ErrorCard, {\n            fontSize: FontSize.Large,\n            text: errorsWallet.mmWrongNetwork(NETWORK_ID),\n            icon: ErrorIcons.Warning\n          });\n\n        case Web3State.Done:\n          return /*#__PURE__*/_jsx(\"div\", {\n            className: \"wallet-dropdown separator\",\n            children: /*#__PURE__*/_jsx(WalletConnectionContentContainer, {})\n          });\n\n        default:\n          const _exhaustiveCheck = web3State;\n          return _exhaustiveCheck;\n      }\n    });\n\n    _defineProperty(this, \"renderNetworkName\", () => {\n      const {\n        selectedNetwork\n      } = this.props;\n\n      if (selectedNetwork === 0) {\n        return /*#__PURE__*/_jsx(\"div\", {\n          className: \"network-name\",\n          children: \"Loading...\"\n        });\n      }\n\n      const netValue = selectedNetwork === 1 ? \"Ethereum Mainnet\" : getNetworkName(selectedNetwork) + \"Network Selected\";\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: \"network-name\",\n        children: netValue\n      });\n    });\n  }\n\n  render() {\n    const logo = /*#__PURE__*/_jsx(\"img\", {\n      className: \"logo-styled\",\n      src: \"/static/img/logo.png\"\n    });\n\n    const {\n      active\n    } = this.state;\n    const {\n      web3State\n    } = this.props;\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"header_area\",\n      children: /*#__PURE__*/_jsxs(Navbar, {\n        bg: \"light\",\n        expand: \"lg\",\n        children: [/*#__PURE__*/_jsx(Navbar.Brand, {\n          children: /*#__PURE__*/_jsx(Logo, {\n            image: logo,\n            text: \"\"\n          })\n        }), /*#__PURE__*/_jsx(Navbar.Toggle, {\n          \"aria-controls\": \"basic-navbar-nav\"\n        }), /*#__PURE__*/_jsx(Navbar.Collapse, {\n          id: \"basic-navbar-nav\",\n          children: /*#__PURE__*/_jsxs(Nav, {\n            className: \"\",\n            children: [/*#__PURE__*/_jsx(Nav, {\n              className: \"spacer\"\n            }), /*#__PURE__*/_jsx(Nav.Item, {\n              children: this.renderNetworkName()\n            }), /*#__PURE__*/_jsx(Nav.Item, {\n              children: this.getContentFromWeb3State(web3State)\n            })]\n          })\n        })]\n      })\n    });\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    ethAccount: getEthAccount(state),\n    web3State: getWeb3State(state),\n    selectedNetwork: getSelectedNetworkID(state)\n  };\n};\n\nconst ToolbarContentContainer = connect(mapStateToProps)(withRouter(ToolbarContent));\nexport { ToolbarContentContainer };","map":null,"metadata":{},"sourceType":"module"}