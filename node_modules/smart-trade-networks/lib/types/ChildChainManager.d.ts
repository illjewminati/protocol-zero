/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ChildChainManagerInterface extends ethers.utils.Interface {
  functions: {
    "childToRootToken(address)": FunctionFragment;
    "rootToChildToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "childToRootToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rootToChildToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "childToRootToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootToChildToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class ChildChainManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ChildChainManagerInterface;

  functions: {
    childToRootToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "childToRootToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rootToChildToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rootToChildToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  childToRootToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  "childToRootToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  rootToChildToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  "rootToChildToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    childToRootToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    "childToRootToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rootToChildToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    "rootToChildToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    childToRootToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "childToRootToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootToChildToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rootToChildToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    childToRootToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "childToRootToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootToChildToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rootToChildToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
