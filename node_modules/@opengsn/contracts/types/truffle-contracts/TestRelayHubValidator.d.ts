/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TestRelayHubValidatorContract
  extends Truffle.Contract<TestRelayHubValidatorInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestRelayHubValidatorInstance>;
}

type AllEvents = never;

export interface TestRelayHubValidatorInstance
  extends Truffle.ContractInstance {
  dummyRelayCall(
    arg0: number | BN | string,
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
        validUntil: number | BN | string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string;
        paymaster: string;
        forwarder: string;
        paymasterData: string;
        clientId: number | BN | string;
      };
    },
    signature: string,
    approvalData: string,
    arg4: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  dynamicParamSize(
    buf: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    dummyRelayCall(
      arg0: number | BN | string,
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    dynamicParamSize(
      buf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
