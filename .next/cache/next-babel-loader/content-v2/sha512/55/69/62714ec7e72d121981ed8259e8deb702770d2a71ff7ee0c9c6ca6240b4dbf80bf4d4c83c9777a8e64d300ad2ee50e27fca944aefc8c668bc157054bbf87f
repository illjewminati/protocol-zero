{"ast":null,"code":"import _classCallCheck from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Validator } from 'jsonschema';\nimport configFile from '../config.json';\nimport { configSchema, schemas } from './configSchema';\nexport var Config = /*#__PURE__*/function () {\n  _createClass(Config, null, [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!Config._instance) {\n        Config._instance = new Config();\n      }\n\n      return Config._instance;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.getInstance()._config;\n    }\n  }]);\n\n  function Config() {\n    _classCallCheck(this, Config);\n\n    _defineProperty(this, \"_validator\", void 0);\n\n    _defineProperty(this, \"_config\", void 0);\n\n    this._validator = new Validator();\n\n    var _iterator = _createForOfIteratorHelper(schemas),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var schema = _step.value;\n\n        this._validator.addSchema(schema, schema.id);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this._validator.validate(configFile, configSchema, {\n      throwError: true\n    });\n\n    this._config = configFile;\n  }\n\n  return Config;\n}();\n\n_defineProperty(Config, \"_instance\", void 0);","map":null,"metadata":{},"sourceType":"module"}