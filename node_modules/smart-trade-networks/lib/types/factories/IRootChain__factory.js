"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IRootChain__factory = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ethers = require("ethers");

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
var IRootChain__factory = /*#__PURE__*/function () {
  function IRootChain__factory() {
    (0, _classCallCheck2["default"])(this, IRootChain__factory);
  }

  (0, _createClass2["default"])(IRootChain__factory, null, [{
    key: "connect",
    value: function connect(address, signerOrProvider) {
      return new _ethers.Contract(address, _abi, signerOrProvider);
    }
  }]);
  return IRootChain__factory;
}();

exports.IRootChain__factory = IRootChain__factory;
var _abi = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "proposer",
    type: "address"
  }, {
    indexed: true,
    internalType: "uint256",
    name: "headerBlockId",
    type: "uint256"
  }, {
    indexed: true,
    internalType: "uint256",
    name: "reward",
    type: "uint256"
  }, {
    indexed: false,
    internalType: "uint256",
    name: "start",
    type: "uint256"
  }, {
    indexed: false,
    internalType: "uint256",
    name: "end",
    type: "uint256"
  }, {
    indexed: false,
    internalType: "bytes32",
    name: "root",
    type: "bytes32"
  }],
  name: "NewHeaderBlock",
  type: "event"
}, {
  inputs: [],
  name: "slash",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "bytes",
    name: "data",
    type: "bytes"
  }, {
    internalType: "bytes",
    name: "sigs",
    type: "bytes"
  }],
  name: "submitHeaderBlock",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [],
  name: "getLastChildBlock",
  outputs: [{
    internalType: "uint256",
    name: "",
    type: "uint256"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [],
  name: "currentHeaderBlock",
  outputs: [{
    internalType: "uint256",
    name: "",
    type: "uint256"
  }],
  stateMutability: "view",
  type: "function"
}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBlcy9mYWN0b3JpZXMvSVJvb3RDaGFpbl9fZmFjdG9yeS50cyJdLCJuYW1lcyI6WyJJUm9vdENoYWluX19mYWN0b3J5IiwiYWRkcmVzcyIsInNpZ25lck9yUHJvdmlkZXIiLCJDb250cmFjdCIsIl9hYmkiLCJhbm9ueW1vdXMiLCJpbnB1dHMiLCJpbmRleGVkIiwiaW50ZXJuYWxUeXBlIiwibmFtZSIsInR5cGUiLCJvdXRwdXRzIiwic3RhdGVNdXRhYmlsaXR5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBSUE7O0FBSkE7O0FBQ0E7O0FBQ0E7SUFPYUEsbUI7Ozs7Ozs7V0FDWCxpQkFDRUMsT0FERixFQUVFQyxnQkFGRixFQUdjO0FBQ1osYUFBTyxJQUFJQyxnQkFBSixDQUFhRixPQUFiLEVBQXNCRyxJQUF0QixFQUE0QkYsZ0JBQTVCLENBQVA7QUFDRDs7Ozs7O0FBR0gsSUFBTUUsSUFBSSxHQUFHLENBQ1g7QUFDRUMsRUFBQUEsU0FBUyxFQUFFLEtBRGI7QUFFRUMsRUFBQUEsTUFBTSxFQUFFLENBQ047QUFDRUMsSUFBQUEsT0FBTyxFQUFFLElBRFg7QUFFRUMsSUFBQUEsWUFBWSxFQUFFLFNBRmhCO0FBR0VDLElBQUFBLElBQUksRUFBRSxVQUhSO0FBSUVDLElBQUFBLElBQUksRUFBRTtBQUpSLEdBRE0sRUFPTjtBQUNFSCxJQUFBQSxPQUFPLEVBQUUsSUFEWDtBQUVFQyxJQUFBQSxZQUFZLEVBQUUsU0FGaEI7QUFHRUMsSUFBQUEsSUFBSSxFQUFFLGVBSFI7QUFJRUMsSUFBQUEsSUFBSSxFQUFFO0FBSlIsR0FQTSxFQWFOO0FBQ0VILElBQUFBLE9BQU8sRUFBRSxJQURYO0FBRUVDLElBQUFBLFlBQVksRUFBRSxTQUZoQjtBQUdFQyxJQUFBQSxJQUFJLEVBQUUsUUFIUjtBQUlFQyxJQUFBQSxJQUFJLEVBQUU7QUFKUixHQWJNLEVBbUJOO0FBQ0VILElBQUFBLE9BQU8sRUFBRSxLQURYO0FBRUVDLElBQUFBLFlBQVksRUFBRSxTQUZoQjtBQUdFQyxJQUFBQSxJQUFJLEVBQUUsT0FIUjtBQUlFQyxJQUFBQSxJQUFJLEVBQUU7QUFKUixHQW5CTSxFQXlCTjtBQUNFSCxJQUFBQSxPQUFPLEVBQUUsS0FEWDtBQUVFQyxJQUFBQSxZQUFZLEVBQUUsU0FGaEI7QUFHRUMsSUFBQUEsSUFBSSxFQUFFLEtBSFI7QUFJRUMsSUFBQUEsSUFBSSxFQUFFO0FBSlIsR0F6Qk0sRUErQk47QUFDRUgsSUFBQUEsT0FBTyxFQUFFLEtBRFg7QUFFRUMsSUFBQUEsWUFBWSxFQUFFLFNBRmhCO0FBR0VDLElBQUFBLElBQUksRUFBRSxNQUhSO0FBSUVDLElBQUFBLElBQUksRUFBRTtBQUpSLEdBL0JNLENBRlY7QUF3Q0VELEVBQUFBLElBQUksRUFBRSxnQkF4Q1I7QUF5Q0VDLEVBQUFBLElBQUksRUFBRTtBQXpDUixDQURXLEVBNENYO0FBQ0VKLEVBQUFBLE1BQU0sRUFBRSxFQURWO0FBRUVHLEVBQUFBLElBQUksRUFBRSxPQUZSO0FBR0VFLEVBQUFBLE9BQU8sRUFBRSxFQUhYO0FBSUVDLEVBQUFBLGVBQWUsRUFBRSxZQUpuQjtBQUtFRixFQUFBQSxJQUFJLEVBQUU7QUFMUixDQTVDVyxFQW1EWDtBQUNFSixFQUFBQSxNQUFNLEVBQUUsQ0FDTjtBQUNFRSxJQUFBQSxZQUFZLEVBQUUsT0FEaEI7QUFFRUMsSUFBQUEsSUFBSSxFQUFFLE1BRlI7QUFHRUMsSUFBQUEsSUFBSSxFQUFFO0FBSFIsR0FETSxFQU1OO0FBQ0VGLElBQUFBLFlBQVksRUFBRSxPQURoQjtBQUVFQyxJQUFBQSxJQUFJLEVBQUUsTUFGUjtBQUdFQyxJQUFBQSxJQUFJLEVBQUU7QUFIUixHQU5NLENBRFY7QUFhRUQsRUFBQUEsSUFBSSxFQUFFLG1CQWJSO0FBY0VFLEVBQUFBLE9BQU8sRUFBRSxFQWRYO0FBZUVDLEVBQUFBLGVBQWUsRUFBRSxZQWZuQjtBQWdCRUYsRUFBQUEsSUFBSSxFQUFFO0FBaEJSLENBbkRXLEVBcUVYO0FBQ0VKLEVBQUFBLE1BQU0sRUFBRSxFQURWO0FBRUVHLEVBQUFBLElBQUksRUFBRSxtQkFGUjtBQUdFRSxFQUFBQSxPQUFPLEVBQUUsQ0FDUDtBQUNFSCxJQUFBQSxZQUFZLEVBQUUsU0FEaEI7QUFFRUMsSUFBQUEsSUFBSSxFQUFFLEVBRlI7QUFHRUMsSUFBQUEsSUFBSSxFQUFFO0FBSFIsR0FETyxDQUhYO0FBVUVFLEVBQUFBLGVBQWUsRUFBRSxNQVZuQjtBQVdFRixFQUFBQSxJQUFJLEVBQUU7QUFYUixDQXJFVyxFQWtGWDtBQUNFSixFQUFBQSxNQUFNLEVBQUUsRUFEVjtBQUVFRyxFQUFBQSxJQUFJLEVBQUUsb0JBRlI7QUFHRUUsRUFBQUEsT0FBTyxFQUFFLENBQ1A7QUFDRUgsSUFBQUEsWUFBWSxFQUFFLFNBRGhCO0FBRUVDLElBQUFBLElBQUksRUFBRSxFQUZSO0FBR0VDLElBQUFBLElBQUksRUFBRTtBQUhSLEdBRE8sQ0FIWDtBQVVFRSxFQUFBQSxlQUFlLEVBQUUsTUFWbkI7QUFXRUYsRUFBQUEsSUFBSSxFQUFFO0FBWFIsQ0FsRlcsQ0FBYiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3ZpZGVyc1wiO1xuXG5pbXBvcnQgdHlwZSB7IElSb290Q2hhaW4gfSBmcm9tIFwiLi4vSVJvb3RDaGFpblwiO1xuXG5leHBvcnQgY2xhc3MgSVJvb3RDaGFpbl9fZmFjdG9yeSB7XG4gIHN0YXRpYyBjb25uZWN0KFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBzaWduZXJPclByb3ZpZGVyOiBTaWduZXIgfCBQcm92aWRlclxuICApOiBJUm9vdENoYWluIHtcbiAgICByZXR1cm4gbmV3IENvbnRyYWN0KGFkZHJlc3MsIF9hYmksIHNpZ25lck9yUHJvdmlkZXIpIGFzIElSb290Q2hhaW47XG4gIH1cbn1cblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicHJvcG9zZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImhlYWRlckJsb2NrSWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInJld2FyZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInN0YXJ0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZW5kXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwicm9vdFwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk5ld0hlYWRlckJsb2NrXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInNsYXNoXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgbmFtZTogXCJzaWdzXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN1Ym1pdEhlYWRlckJsb2NrXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZ2V0TGFzdENoaWxkQmxvY2tcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImN1cnJlbnRIZWFkZXJCbG9ja1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dO1xuIl19