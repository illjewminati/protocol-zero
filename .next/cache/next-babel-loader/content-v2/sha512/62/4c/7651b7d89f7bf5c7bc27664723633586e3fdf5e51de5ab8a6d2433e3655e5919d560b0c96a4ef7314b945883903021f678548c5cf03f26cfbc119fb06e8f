{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/account/swap_token.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ethers, utils } from \"ethers\";\nimport { PureComponent } from \"react\";\nimport { Alert, Button, Container, Form, InputGroup, Spinner } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addToken } from \"../../services/metamask\";\nimport { initBalances, reviewSwap, startAllowanceAndSwapSteps, startSwapStep } from \"../../store/actions\";\nimport { getBalances, getGasPrice, getGSNProvider, getPaymasterData, getTokenBalances, getWeb3State } from \"../../store/blockchain/selectors\";\nimport { Web3State } from \"../../types/blockchain\";\nconst maxGasUsage = 1600000;\nvar SwapState;\n\n(function (SwapState) {\n  SwapState[SwapState[\"Init\"] = 0] = \"Init\";\n  SwapState[SwapState[\"Loading\"] = 1] = \"Loading\";\n  SwapState[SwapState[\"Done\"] = 2] = \"Done\";\n})(SwapState || (SwapState = {}));\n\nclass SwapToken extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      amount: \"\",\n      swapState: SwapState.Init,\n      txHash: null,\n      gasUsed: \"\",\n      selectedToken: process.env.ZRO_TOKEN,\n      txPrice: \"\",\n      errorMessage: null,\n      reviewSwap: false,\n      swapReviewResponse: \"\",\n      deposited: \"\",\n      withdrawn: \"\"\n    });\n\n    _defineProperty(this, \"addToken\", async token => {\n      try {\n        await addToken(token);\n      } catch (e) {\n        console.log(e);\n      }\n    });\n\n    _defineProperty(this, \"onSwap\", res => {\n      if (res.error) {\n        return this.setState({\n          swapState: SwapState.Init,\n          errorMessage: res.message\n        });\n      }\n\n      this.setState({\n        txHash: res.data.txHash,\n        gasUsed: res.data.gasUsed,\n        swapState: SwapState.Done,\n        txPrice: res.data.txPrice,\n        deposited: res.data.deposited,\n        withdrawn: res.data.withdrawn\n      });\n    });\n\n    _defineProperty(this, \"reviewSwap\", async () => {\n      const {\n        selectedToken,\n        amount\n      } = this.state;\n      if (selectedToken === \"\") return null;\n      const {\n        tokensBalance\n      } = this.props;\n      const tokenBalance = tokensBalance.find(t => t.token.address === selectedToken);\n      const swapReviewResponse = await this.props.reviewSwap(amount, tokenBalance.token);\n      this.setState({\n        swapReviewResponse: ethers.utils.formatEther(swapReviewResponse)\n      });\n    });\n\n    _defineProperty(this, \"swap\", async address => {\n      const {\n        amount,\n        reviewSwap\n      } = this.state;\n\n      if (!reviewSwap) {\n        this.setState({\n          reviewSwap: true\n        });\n        return this.reviewSwap();\n      }\n\n      this.setState({\n        swapState: SwapState.Loading,\n        errorMessage: null\n      });\n      const {\n        tokensBalance,\n        paymasterData\n      } = this.props;\n      const tokenBalance = tokensBalance.find(t => t.token.address === address);\n      const amountBN = utils.parseUnits(amount, tokenBalance.token.decimals);\n      const feeBN = utils.parseUnits(paymasterData.paymentData.fee, tokenBalance.token.decimals);\n      const allowanceBN = utils.parseUnits(tokenBalance.tokenSwapAllowance, tokenBalance.token.decimals);\n\n      try {\n        let minAllowanceBN = amountBN.add(feeBN);\n\n        if (allowanceBN.lt(minAllowanceBN)) {\n          await this.props.startAllowanceAndSwapSteps(tokenBalance.token, process.env.GSN_TOKEN_SWAP, amount, this.onSwap);\n        } else {\n          this.props.startSwapStep(tokenBalance.token, amount, this.onSwap);\n        }\n      } catch (e) {\n        const {\n          message\n        } = e;\n\n        if (message.startsWith(\"user rejected transaction\")) {} else if (message.includes(\"Not enough to pay for tx\")) {\n          this.setState({\n            swapState: SwapState.Init,\n            errorMessage: \"Not enough to pay for tx, try swapping more tokens\"\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"renderTokenInfo\", () => {\n      const {\n        selectedToken\n      } = this.state;\n      if (selectedToken === \"\") return null;\n      const {\n        tokensBalance\n      } = this.props;\n      const tokenBalance = tokensBalance.find(t => t.token.address === selectedToken);\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [tokenBalance.token.symbol, \" Balance: \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: Number(utils.formatUnits(tokenBalance.balance)).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"1 ETH  = \", Number(utils.formatUnits(tokenBalance.uniswapValue)).toLocaleString(), \" \", tokenBalance.token.symbol]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total Supply: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: Number(tokenBalance.totalSupply).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total Burned: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: Number(tokenBalance.burned).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"link\",\n            onClick: () => this.addToken(tokenBalance.token),\n            children: \"Add token To Metamask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    });\n\n    _defineProperty(this, \"renderAmountToGet\", () => {\n      const {\n        amount,\n        selectedToken,\n        reviewSwap,\n        swapReviewResponse\n      } = this.state;\n      if (amount === \"\" || isNaN(parseFloat(amount))) return null;\n      const title = reviewSwap ? \"Swap\" : \"Review Swap\";\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [swapReviewResponse === \"\" ? null : /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [swapReviewResponse, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 54\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"swap_button\",\n            onClick: () => this.swap(selectedToken),\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this);\n    });\n\n    _defineProperty(this, \"renderSwapInfo\", () => {\n      const {\n        swapState,\n        txHash,\n        gasUsed,\n        selectedToken,\n        errorMessage,\n        deposited,\n        withdrawn\n      } = this.state;\n      if (selectedToken === \"\") return null;\n      const {\n        tokensBalance\n      } = this.props;\n\n      if (swapState === SwapState.Loading) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          role: \"status\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"visually-hidden\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this);\n      } else if (swapState === SwapState.Done) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Transaction Mined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://goerli.etherscan.io/tx/${txHash}`,\n            children: \"View on Goerli\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Gas Used: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 26\n            }, this), gasUsed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Amount Swapped: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 26\n            }, this), deposited, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Amount Gotten: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 26\n            }, this), withdrawn, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Amount Charged: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 26\n            }, this), parseFloat(deposited) - parseFloat(withdrawn), \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }, this);\n      } else if (swapState === SwapState.Init && errorMessage) {\n        return /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          onClose: () => this.setState({\n            errorMessage: null\n          }),\n          dismissible: true,\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n            className: \"mb-3\",\n            style: {\n              width: \"200px\",\n              margin: \"5px auto 0px auto\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              className: \"swap\",\n              placeholder: \"Amount to swap\",\n              \"aria-label\": \"Amount to swap\",\n              \"aria-describedby\": \"basic-addon1\",\n              type: \"number\",\n              value: this.state.amount,\n              onChange: ({\n                target\n              }) => this.setState({\n                amount: target.value,\n                errorMessage: null,\n                reviewSwap: false,\n                swapReviewResponse: \"\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this), this.renderAmountToGet()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this);\n    });\n\n    _defineProperty(this, \"renderUserInfo\", () => {\n      const {\n        ethBalance\n      } = this.props;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"ETH Balance: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: Number(utils.formatUnits(ethBalance.balance)).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }, this);\n    });\n  }\n\n  render() {\n    const {\n      ethBalance,\n      tokensBalance,\n      web3State\n    } = this.props;\n    if (web3State !== Web3State.Done || !ethBalance || tokensBalance.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tokens_info\",\n      children: [this.renderUserInfo(), this.renderTokenInfo(), this.renderSwapInfo()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ethBalance: getBalances(state),\n    tokensBalance: getTokenBalances(state),\n    gsnProvider: getGSNProvider(state),\n    gasPrice: getGasPrice(state),\n    web3State: getWeb3State(state),\n    paymasterData: getPaymasterData(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchBalances: () => dispatch(initBalances()),\n    startAllowanceAndSwapSteps: (token, to, amount, callback) => dispatch(startAllowanceAndSwapSteps(token, to, amount, callback)),\n    startSwapStep: (token, amount, callback) => dispatch(startSwapStep(token, amount, callback)),\n    reviewSwap: (amount, token) => dispatch(reviewSwap(amount, token))\n  };\n};\n\nconst SwapTokenContainer = connect(mapStateToProps, mapDispatchToProps)(SwapToken);\nexport { SwapTokenContainer };","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/account/swap_token.tsx"],"names":["ethers","utils","PureComponent","Alert","Button","Container","Form","InputGroup","Spinner","connect","addToken","initBalances","reviewSwap","startAllowanceAndSwapSteps","startSwapStep","getBalances","getGasPrice","getGSNProvider","getPaymasterData","getTokenBalances","getWeb3State","Web3State","maxGasUsage","SwapState","SwapToken","amount","swapState","Init","txHash","gasUsed","selectedToken","process","env","ZRO_TOKEN","txPrice","errorMessage","swapReviewResponse","deposited","withdrawn","token","e","console","log","res","error","setState","message","data","Done","state","tokensBalance","props","tokenBalance","find","t","address","formatEther","Loading","paymasterData","amountBN","parseUnits","decimals","feeBN","paymentData","fee","allowanceBN","tokenSwapAllowance","minAllowanceBN","add","lt","GSN_TOKEN_SWAP","onSwap","startsWith","includes","symbol","Number","formatUnits","balance","toLocaleString","uniswapValue","totalSupply","burned","isNaN","parseFloat","title","swap","width","margin","target","value","renderAmountToGet","ethBalance","render","web3State","length","renderUserInfo","renderTokenInfo","renderSwapInfo","mapStateToProps","gsnProvider","gasPrice","mapDispatchToProps","dispatch","fetchBalances","to","callback","SwapTokenContainer"],"mappings":"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","sourcesContent":["import { BigNumber, ethers, utils } from \"ethers\";\nimport { PureComponent } from \"react\";\nimport { Alert, Button, Container, Form, InputGroup, Spinner } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addToken } from \"../../services/metamask\";\nimport { initBalances, reviewSwap, startAllowanceAndSwapSteps, startSwapStep } from \"../../store/actions\";\nimport { getBalances, getGasPrice, getGSNProvider, getPaymasterData, getTokenBalances, getWeb3State } from \"../../store/blockchain/selectors\";\nimport { Balance, Paymaster, SwapResponse, Token, TokenBalance, Web3State } from \"../../types/blockchain\";\nimport { StoreState } from \"../../types/store\";\n\nconst maxGasUsage = 1600000;\n\n\nenum SwapState {\n    Init,\n    Loading,\n    Done\n}\n\ninterface StateProps {\n    ethBalance: Balance,\n    tokensBalance: Array<TokenBalance>,\n    gsnProvider: ethers.providers.Web3Provider,\n    gasPrice: string,\n    web3State: Web3State,\n    paymasterData: Paymaster\n}\n\ninterface DispatchProps {\n    fetchBalances: () => any; //\n    startAllowanceAndSwapSteps: (\n        token: Token, \n        to: string, \n        amount: string,\n        callback: (res: SwapResponse) => void\n    ) => any;\n    startSwapStep: (\n        token: Token,\n        amount: string,\n        callback: (res: SwapResponse) => void\n    ) => any;\n    reviewSwap: (amount: string, token: Token) => Promise<string>\n}\n\ninterface OwnProps {\n    amount: string,\n    swapState: SwapState,\n    txHash: string,\n    gasUsed: string,\n    selectedToken: string,\n    txPrice: string,\n    errorMessage: string,\n    reviewSwap: boolean,\n    swapReviewResponse: string,\n    deposited: string,\n    withdrawn: string\n}\n\ntype Props = StateProps & DispatchProps;\n\n\nclass SwapToken extends PureComponent<Props, OwnProps> {\n\n    state = {\n        amount: \"\",\n        swapState: SwapState.Init,\n        txHash: null,\n        gasUsed: \"\",\n        selectedToken: process.env.ZRO_TOKEN,\n        txPrice: \"\",\n        errorMessage: null,\n        reviewSwap: false,\n        swapReviewResponse: \"\",\n        deposited: \"\",\n        withdrawn: \"\"\n    }\n\n    addToken = async (token: Token) => {\n        try {\n            await addToken(token);\n        } catch(e) {\n            console.log(e)\n        }\n    }\n\n    onSwap = (res: SwapResponse) => {\n        if(res.error) {\n            return this.setState({swapState: SwapState.Init, errorMessage: res.message})\n        }\n        this.setState({\n            txHash: res.data.txHash, \n            gasUsed: res.data.gasUsed, \n            swapState: SwapState.Done,\n            txPrice: res.data.txPrice,\n            deposited: res.data.deposited,\n            withdrawn: res.data.withdrawn\n        })\n\n    }\n\n    reviewSwap = async () => {\n        const { selectedToken, amount } = this.state\n        if(selectedToken === \"\") return null;\n        const { tokensBalance } = this.props;\n        const tokenBalance = tokensBalance.find(t => t.token.address === selectedToken)\n        const swapReviewResponse = await this.props.reviewSwap(amount, tokenBalance.token)\n        this.setState({swapReviewResponse: ethers.utils.formatEther(swapReviewResponse)})\n    }\n\n    swap = async (address: string) => {\n        const { amount, reviewSwap } = this.state;\n        if(!reviewSwap) {\n            this.setState({reviewSwap: true});\n            return this.reviewSwap()\n        }\n\n        this.setState({swapState: SwapState.Loading, errorMessage: null})\n        const { tokensBalance, paymasterData } = this.props\n        const tokenBalance = tokensBalance.find(t => t.token.address === address);\n\n        const amountBN = utils.parseUnits(amount, tokenBalance.token.decimals);\n        const feeBN = utils.parseUnits(paymasterData.paymentData.fee, tokenBalance.token.decimals)\n        const allowanceBN = utils.parseUnits(tokenBalance.tokenSwapAllowance, tokenBalance.token.decimals)\n\n        try {\n            let minAllowanceBN = amountBN.add(feeBN)\n\n            if(allowanceBN.lt(minAllowanceBN)) {\n                await this.props.startAllowanceAndSwapSteps(tokenBalance.token, process.env.GSN_TOKEN_SWAP, amount, this.onSwap);\n            } else {\n                this.props.startSwapStep(tokenBalance.token, amount, this.onSwap)\n            }\n            \n        } catch(e) {\n            const {message} = e;\n            if(message.startsWith(\"user rejected transaction\")){\n               \n            } else if(message.includes(\"Not enough to pay for tx\")) {\n                this.setState({swapState: SwapState.Init, errorMessage: \"Not enough to pay for tx, try swapping more tokens\"})\n            }\n            \n        }\n    }\n\n    renderTokenInfo = () => {\n        const { selectedToken } = this.state\n        if(selectedToken === \"\") return null;\n        const { tokensBalance } = this.props;\n        const tokenBalance = tokensBalance.find(t => t.token.address === selectedToken)\n        return (\n            <>\n                <div>\n                    <strong>{tokenBalance.token.symbol} Balance: </strong>\n                    <span>{Number(utils.formatUnits(tokenBalance.balance)).toLocaleString()}</span>\n                </div>\n                <div>\n                    <strong></strong>\n                    <span>1 ETH  = {Number(utils.formatUnits(tokenBalance.uniswapValue)).toLocaleString()} {tokenBalance.token.symbol}</span>\n                </div>\n                <div>\n                    <strong>Total Supply: </strong>\n                    <span>{Number(tokenBalance.totalSupply).toLocaleString()}</span>\n                </div>\n                <div>\n                    <strong>Total Burned: </strong>\n                    <span>{Number(tokenBalance.burned).toLocaleString()}</span>\n                </div>\n                \n                <div>\n                    <Button variant=\"link\" onClick={() => this.addToken(tokenBalance.token)}>Add token To Metamask</Button>\n\n                </div>\n            </>\n        )\n    }\n\n    renderAmountToGet = () => {\n        const { amount, selectedToken, reviewSwap, swapReviewResponse } = this.state;\n        if(amount === \"\" || isNaN(parseFloat(amount))) return null\n\n        const title = reviewSwap ? \"Swap\" : \"Review Swap\"\n\n        return (\n            <div>\n                 {swapReviewResponse === \"\" ? null : <small>{swapReviewResponse} ETH</small>}\n                 \n                 <div>\n                    <Button className=\"swap_button\" onClick={() => this.swap(selectedToken)}>{title}</Button>\n                 </div>\n            </div>\n        )\n    }\n\n    renderSwapInfo = () => {\n        const { swapState, txHash, gasUsed, selectedToken, errorMessage, deposited, withdrawn} = this.state;\n        if(selectedToken === \"\") return null;\n        const { tokensBalance } = this.props\n\n        if(swapState === SwapState.Loading) {\n            return (\n                <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"visually-hidden\"></span>\n                </Spinner>\n            )\n        } else if(swapState === SwapState.Done) {\n            return (\n                <div>\n                    <br/>\n                    <div>Transaction Mined</div>\n                    <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>View on Goerli</a>\n                    <div><strong>Gas Used: </strong>{gasUsed}</div>\n                    <div><strong>Amount Swapped: </strong>{deposited} ETH</div>\n                    <div><strong>Amount Gotten: </strong>{withdrawn} ETH</div>\n                    <div><strong>Amount Charged: </strong>{parseFloat(deposited) - parseFloat(withdrawn)} ETH</div>\n                </div>\n            )\n        } else if(swapState === SwapState.Init && errorMessage) {\n            return (\n                <Alert variant=\"danger\" onClose={() => this.setState({errorMessage: null})} dismissible>{errorMessage}</Alert>\n            )\n        }\n        return (\n            <Container >\n                <div>\n                    <InputGroup className=\"mb-3\" style={{width: \"200px\", margin: \"5px auto 0px auto\"}}>\n                        <Form.Control\n                            className=\"swap\"\n                            placeholder=\"Amount to swap\"\n                            aria-label=\"Amount to swap\"\n                            aria-describedby=\"basic-addon1\"\n                            type=\"number\"\n                            value={this.state.amount}\n                            onChange={\n                                ({target}) => this.setState({\n                                    amount: target.value, \n                                    errorMessage: null, \n                                    reviewSwap: false, \n                                    swapReviewResponse: \"\"\n                                })\n                            }\n                        />\n                    </InputGroup>\n                    {this.renderAmountToGet()}\n                </div>\n                \n            </Container>\n        )\n    }\n\n    renderUserInfo = () => {\n        const { ethBalance } = this.props\n        return (\n            <div>\n                <strong>ETH Balance: </strong>\n                <span>{Number(utils.formatUnits(ethBalance.balance)).toLocaleString()}</span>\n            </div>\n        )\n    }\n    \n\n    render() {\n        const { ethBalance, tokensBalance, web3State } = this.props;\n        if(web3State!== Web3State.Done || !ethBalance || tokensBalance.length === 0) return null\n        return (\n            <div className=\"tokens_info\">\n                {this.renderUserInfo()}\n               \n                {this.renderTokenInfo()}\n                {this.renderSwapInfo()}\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StoreState): StateProps => {\n    return {\n        ethBalance: getBalances(state),\n        tokensBalance: getTokenBalances(state),\n        gsnProvider: getGSNProvider(state),\n        gasPrice: getGasPrice(state),\n        web3State: getWeb3State(state),\n        paymasterData: getPaymasterData(state)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchProps => {\n    return {\n        fetchBalances: () => dispatch(initBalances()),\n        startAllowanceAndSwapSteps: (\n            token: Token, \n            to: string, \n            amount: string,\n            callback: (res: SwapResponse) => void\n        ) => dispatch(startAllowanceAndSwapSteps(token, to, amount, callback)),\n        startSwapStep: (\n            token: Token,\n            amount: string,\n            callback: (res: SwapResponse) => void\n        ) => dispatch(startSwapStep(token, amount, callback)),\n        reviewSwap: (\n            amount: string,\n            token: Token\n        ) => dispatch(reviewSwap(amount, token))\n    };\n};\n\nconst SwapTokenContainer = connect(mapStateToProps, mapDispatchToProps)(SwapToken);\n\nexport { SwapTokenContainer }"]},"metadata":{},"sourceType":"module"}