{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { ChainId } from 'simple-uniswap-sdk';\n\nvar ChainService =\n/** @class */\nfunction () {\n  function ChainService(_ethereumProvider) {\n    this._ethereumProvider = _ethereumProvider;\n    this.newBlock$ = new Subject();\n    this.unwatch();\n    this.watchBlocks();\n  }\n  /**\r\n   * Get the block explorer for transaction hash\r\n   * @param chainId The chain id\r\n   * @param transactionHash The transaction hash\r\n   */\n\n\n  ChainService.prototype.getBlockExplorerLinkForTransactionHash = function (chainId, transactionHash) {\n    return this.getBlockExplorerForNetwork(chainId) + \"tx/\" + transactionHash;\n  };\n  /**\r\n   * unwatch any block streams\r\n   */\n\n\n  ChainService.prototype.unwatch = function () {\n    this._ethereumProvider.provider.removeAllListeners('block');\n  };\n  /**\r\n   * Get block explorer link for network\r\n   * @param network The network\r\n   */\n\n\n  ChainService.prototype.getBlockExplorerForNetwork = function (chainId) {\n    switch (chainId) {\n      case ChainId.MAINNET:\n        return 'https://etherscan.io/';\n\n      case ChainId.RINKEBY:\n        return 'https://rinkeby.etherscan.io/';\n\n      case ChainId.ROPSTEN:\n        return 'https://ropsten.etherscan.io/';\n\n      case ChainId.KOVAN:\n        return 'https://kovan.etherscan.io/';\n\n      case ChainId.GÖRLI:\n        return 'https://goerli.etherscan.io/';\n\n      default:\n        throw new Error('Network is not defined');\n    }\n  };\n  /**\r\n   * Watch blocks\r\n   */\n\n\n  ChainService.prototype.watchBlocks = function () {\n    var _this = this;\n\n    this._ethereumProvider.provider.on('block', function (block) {\n      _this.handleNewBlock(block);\n    });\n  };\n  /**\r\n   * Handle new block\r\n   */\n\n\n  ChainService.prototype.handleNewBlock = function (block) {\n    this.newBlock$.next(block);\n  };\n\n  return ChainService;\n}();\n\nexport { ChainService };","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/uniswap_components/uniswap-dapp-integration-shared/dist/esm/chain/index.js"],"names":["Subject","ChainId","ChainService","_ethereumProvider","newBlock$","unwatch","watchBlocks","prototype","getBlockExplorerLinkForTransactionHash","chainId","transactionHash","getBlockExplorerForNetwork","provider","removeAllListeners","MAINNET","RINKEBY","ROPSTEN","KOVAN","GÖRLI","Error","_this","on","block","handleNewBlock","next"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,SAASC,OAAT,QAAwB,oBAAxB;;AACA,IAAIC,YAAY;AAAG;AAAe,YAAY;AAC1C,WAASA,YAAT,CAAsBC,iBAAtB,EAAyC;AACrC,SAAKA,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,SAAL,GAAiB,IAAIJ,OAAJ,EAAjB;AACA,SAAKK,OAAL;AACA,SAAKC,WAAL;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIJ,EAAAA,YAAY,CAACK,SAAb,CAAuBC,sCAAvB,GAAgE,UAAUC,OAAV,EAAmBC,eAAnB,EAAoC;AAChG,WAAO,KAAKC,0BAAL,CAAgCF,OAAhC,IAA2C,KAA3C,GAAmDC,eAA1D;AACH,GAFD;AAGA;AACJ;AACA;;;AACIR,EAAAA,YAAY,CAACK,SAAb,CAAuBF,OAAvB,GAAiC,YAAY;AACzC,SAAKF,iBAAL,CAAuBS,QAAvB,CAAgCC,kBAAhC,CAAmD,OAAnD;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACIX,EAAAA,YAAY,CAACK,SAAb,CAAuBI,0BAAvB,GAAoD,UAAUF,OAAV,EAAmB;AACnE,YAAQA,OAAR;AACI,WAAKR,OAAO,CAACa,OAAb;AACI,eAAO,uBAAP;;AACJ,WAAKb,OAAO,CAACc,OAAb;AACI,eAAO,+BAAP;;AACJ,WAAKd,OAAO,CAACe,OAAb;AACI,eAAO,+BAAP;;AACJ,WAAKf,OAAO,CAACgB,KAAb;AACI,eAAO,6BAAP;;AACJ,WAAKhB,OAAO,CAACiB,KAAb;AACI,eAAO,8BAAP;;AACJ;AACI,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AAZR;AAcH,GAfD;AAgBA;AACJ;AACA;;;AACIjB,EAAAA,YAAY,CAACK,SAAb,CAAuBD,WAAvB,GAAqC,YAAY;AAC7C,QAAIc,KAAK,GAAG,IAAZ;;AACA,SAAKjB,iBAAL,CAAuBS,QAAvB,CAAgCS,EAAhC,CAAmC,OAAnC,EAA4C,UAAUC,KAAV,EAAiB;AACzDF,MAAAA,KAAK,CAACG,cAAN,CAAqBD,KAArB;AACH,KAFD;AAGH,GALD;AAMA;AACJ;AACA;;;AACIpB,EAAAA,YAAY,CAACK,SAAb,CAAuBgB,cAAvB,GAAwC,UAAUD,KAAV,EAAiB;AACrD,SAAKlB,SAAL,CAAeoB,IAAf,CAAoBF,KAApB;AACH,GAFD;;AAGA,SAAOpB,YAAP;AACH,CAzDiC,EAAlC;;AA0DA,SAASA,YAAT","sourcesContent":["import { Subject } from 'rxjs';\r\nimport { ChainId } from 'simple-uniswap-sdk';\r\nvar ChainService = /** @class */ (function () {\r\n    function ChainService(_ethereumProvider) {\r\n        this._ethereumProvider = _ethereumProvider;\r\n        this.newBlock$ = new Subject();\r\n        this.unwatch();\r\n        this.watchBlocks();\r\n    }\r\n    /**\r\n     * Get the block explorer for transaction hash\r\n     * @param chainId The chain id\r\n     * @param transactionHash The transaction hash\r\n     */\r\n    ChainService.prototype.getBlockExplorerLinkForTransactionHash = function (chainId, transactionHash) {\r\n        return this.getBlockExplorerForNetwork(chainId) + \"tx/\" + transactionHash;\r\n    };\r\n    /**\r\n     * unwatch any block streams\r\n     */\r\n    ChainService.prototype.unwatch = function () {\r\n        this._ethereumProvider.provider.removeAllListeners('block');\r\n    };\r\n    /**\r\n     * Get block explorer link for network\r\n     * @param network The network\r\n     */\r\n    ChainService.prototype.getBlockExplorerForNetwork = function (chainId) {\r\n        switch (chainId) {\r\n            case ChainId.MAINNET:\r\n                return 'https://etherscan.io/';\r\n            case ChainId.RINKEBY:\r\n                return 'https://rinkeby.etherscan.io/';\r\n            case ChainId.ROPSTEN:\r\n                return 'https://ropsten.etherscan.io/';\r\n            case ChainId.KOVAN:\r\n                return 'https://kovan.etherscan.io/';\r\n            case ChainId.GÖRLI:\r\n                return 'https://goerli.etherscan.io/';\r\n            default:\r\n                throw new Error('Network is not defined');\r\n        }\r\n    };\r\n    /**\r\n     * Watch blocks\r\n     */\r\n    ChainService.prototype.watchBlocks = function () {\r\n        var _this = this;\r\n        this._ethereumProvider.provider.on('block', function (block) {\r\n            _this.handleNewBlock(block);\r\n        });\r\n    };\r\n    /**\r\n     * Handle new block\r\n     */\r\n    ChainService.prototype.handleNewBlock = function (block) {\r\n        this.newBlock$.next(block);\r\n    };\r\n    return ChainService;\r\n}());\r\nexport { ChainService };\r\n"]},"metadata":{},"sourceType":"module"}