{"ast":null,"code":"import { Contract, ethers, Signer } from \"ethers\";\nexport async function getContract(address, abi, addressOrIndexOrSigner) {\n  let signer;\n\n  if (addressOrIndexOrSigner !== undefined) {\n    if (![\"string\", \"number\"].includes(typeof addressOrIndexOrSigner)) {\n      signer = addressOrIndexOrSigner;\n    } else if (signer instanceof Signer) {\n      signer = await getSigner(addressOrIndexOrSigner);\n    }\n\n    return new Contract(address, abi, signer);\n  } else {\n    const provider = getProvider();\n    return new Contract(address, abi, provider);\n  }\n}\nexport async function getSigner(addressOrIndex) {\n  return getProvider().getSigner(addressOrIndex);\n}\nexport function getProvider(web3Provider) {\n  // return new ethers.providers.Web3Provider(ganache.provider())\n  if (web3Provider) {\n    return new ethers.providers.Web3Provider(web3Provider);\n  } else {\n    return new ethers.providers.JsonRpcProvider();\n  }\n}","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/services/contract_loader.tsx"],"names":["Contract","ethers","Signer","getContract","address","abi","addressOrIndexOrSigner","signer","undefined","includes","getSigner","provider","getProvider","addressOrIndex","web3Provider","providers","Web3Provider","JsonRpcProvider"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,MAA3B,QAAyC,QAAzC;AAEA,OAAO,eAAeC,WAAf,CACHC,OADG,EAEHC,GAFG,EAGHC,sBAHG,EAIO;AACV,MAAIC,MAAJ;;AACA,MAAID,sBAAsB,KAAKE,SAA/B,EAA0C;AACtC,QAAI,CAAC,CAAC,QAAD,EAAW,QAAX,EAAqBC,QAArB,CAA8B,OAAOH,sBAArC,CAAL,EAAoE;AAChEC,MAAAA,MAAM,GAAGD,sBAAT;AACH,KAFD,MAEO,IAAIC,MAAM,YAAYL,MAAtB,EAA8B;AACjCK,MAAAA,MAAM,GAAG,MAAMG,SAAS,CAACJ,sBAAD,CAAxB;AACH;;AACD,WAAO,IAAIN,QAAJ,CAAaI,OAAb,EAAsBC,GAAtB,EAA2BE,MAA3B,CAAP;AACH,GAPD,MAOO;AACH,UAAMI,QAAQ,GAAGC,WAAW,EAA5B;AACA,WAAO,IAAIZ,QAAJ,CAAaI,OAAb,EAAsBC,GAAtB,EAA2BM,QAA3B,CAAP;AACH;AACJ;AAED,OAAO,eAAeD,SAAf,CAAyBG,cAAzB,EAA2D;AAC9D,SAAQD,WAAW,EAAZ,CAAgBF,SAAhB,CAA0BG,cAA1B,CAAP;AACH;AAED,OAAO,SAASD,WAAT,CAAqBE,YAArB,EAAyG;AAC5G;AACA,MAAIA,YAAJ,EAAkB;AACd,WAAO,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCF,YAAlC,CAAP;AACH,GAFD,MAEO;AACH,WAAO,IAAIb,MAAM,CAACc,SAAP,CAAiBE,eAArB,EAAP;AACH;AACJ","sourcesContent":["import { Contract, ethers, Signer } from \"ethers\";\n\nexport async function getContract <T extends Contract>(\n    address: string,\n    abi: any,\n    addressOrIndexOrSigner?: string | number | Signer,\n): Promise<T> {\n    let signer: Signer\n    if (addressOrIndexOrSigner !== undefined) {\n        if (![\"string\", \"number\"].includes(typeof(addressOrIndexOrSigner))) {\n            signer = addressOrIndexOrSigner as unknown as Signer\n        } else if (signer instanceof Signer) {\n            signer = await getSigner(addressOrIndexOrSigner as string | number)\n        }\n        return new Contract(address, abi, signer) as T\n    } else {\n        const provider = getProvider();\n        return new Contract(address, abi, provider) as T\n    }\n}\n\nexport async function getSigner(addressOrIndex?: string | number) {\n    return (getProvider()).getSigner(addressOrIndex)\n}\n\nexport function getProvider(web3Provider?: ethers.providers.ExternalProvider): ethers.providers.JsonRpcProvider {\n    // return new ethers.providers.Web3Provider(ganache.provider())\n    if (web3Provider) {\n        return new ethers.providers.Web3Provider(web3Provider)\n    } else {\n        return new ethers.providers.JsonRpcProvider();\n    }    \n}"]},"metadata":{},"sourceType":"module"}