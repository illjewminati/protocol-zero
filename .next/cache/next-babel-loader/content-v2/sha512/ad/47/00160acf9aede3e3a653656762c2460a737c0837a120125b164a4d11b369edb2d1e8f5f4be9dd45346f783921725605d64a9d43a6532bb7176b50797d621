{"ast":null,"code":"import _regeneratorRuntime from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var addToken = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token) {\n    var wasAdded;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20',\n                // Initially only supports ERC20, but eventually more!\n                options: {\n                  address: token.address,\n                  // The address that the token is at.\n                  symbol: token.symbol,\n                  // A ticker symbol or shorthand, up to 5 chars.\n                  decimals: token.decimals // The number of decimals in the token\n\n                }\n              }\n            });\n\n          case 3:\n            wasAdded = _context.sent;\n            return _context.abrupt(\"return\", wasAdded);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function addToken(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/services/metamask.ts"],"names":["addToken","token","window","ethereum","request","method","params","type","options","address","symbol","decimals","wasAdded"],"mappings":";;AAGA,OAAO,IAAMA,QAAQ;AAAA,sEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGOC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAC3CC,cAAAA,MAAM,EAAE,mBADmC;AAE3CC,cAAAA,MAAM,EAAE;AACJC,gBAAAA,IAAI,EAAE,OADF;AACW;AACfC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,OAAO,EAAER,KAAK,CAACQ,OADV;AACmB;AACxBC,kBAAAA,MAAM,EAAET,KAAK,CAACS,MAFT;AAEiB;AACtBC,kBAAAA,QAAQ,EAAEV,KAAK,CAACU,QAHX,CAGqB;;AAHrB;AAFL;AAFmC,aAAxB,CAHP;;AAAA;AAGVC,YAAAA,QAHU;AAAA,6CAeTA,QAfS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARZ,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["import { Token } from \"../types/blockchain\";\n\n\nexport const addToken = async (token: Token) => {\n    try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        const wasAdded = await window.ethereum.request({\n            method: 'wallet_watchAsset',\n            params: {\n                type: 'ERC20', // Initially only supports ERC20, but eventually more!\n                options: {\n                    address: token.address, // The address that the token is at.\n                    symbol: token.symbol, // A ticker symbol or shorthand, up to 5 chars.\n                    decimals: token.decimals, // The number of decimals in the token\n                },\n            },\n        });\n\n        return wasAdded\n    } catch (error) {\n        throw(error)\n    }\n\n}"]},"metadata":{},"sourceType":"module"}