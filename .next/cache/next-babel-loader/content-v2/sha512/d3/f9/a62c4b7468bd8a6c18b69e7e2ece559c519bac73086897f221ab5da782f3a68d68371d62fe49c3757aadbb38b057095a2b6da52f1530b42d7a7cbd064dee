{"ast":null,"code":"import _regeneratorRuntime from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var addToken = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token) {\n    var wasAdded;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20',\n                // Initially only supports ERC20, but eventually more!\n                options: {\n                  address: token.address,\n                  // The address that the token is at.\n                  symbol: token.symbol,\n                  // A ticker symbol or shorthand, up to 5 chars.\n                  decimals: token.decimals // The number of decimals in the token\n\n                }\n              }\n            });\n\n          case 3:\n            wasAdded = _context.sent;\n            return _context.abrupt(\"return\", wasAdded);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function addToken(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}