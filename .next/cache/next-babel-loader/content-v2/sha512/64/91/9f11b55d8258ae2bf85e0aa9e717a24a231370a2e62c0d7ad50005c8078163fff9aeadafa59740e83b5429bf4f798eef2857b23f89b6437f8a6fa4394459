{"ast":null,"code":"import _regeneratorRuntime from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { utils } from \"ethers\";\nimport { loadTokenSwapContract } from \"./token_swap\";\nexport var swap = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signer, gsnProvider, token, amount, minGas) {\n    var tSwap, amountBN;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return loadTokenSwapContract(signer);\n\n          case 2:\n            tSwap = _context.sent;\n            amountBN = utils.parseUnits(amount, token.decimals);\n            return _context.abrupt(\"return\", tSwap.connect(gsnProvider.getSigner()).swapTokensForEth(token.address, amountBN, {\n              gasLimit: minGas\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function swap(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/services/gsn_service.ts"],"names":["utils","loadTokenSwapContract","swap","signer","gsnProvider","token","amount","minGas","tSwap","amountBN","parseUnits","decimals","connect","getSigner","swapTokensForEth","address","gasLimit"],"mappings":";;AAAA,SAAyBA,KAAzB,QAAsC,QAAtC;AAEA,SAASC,qBAAT,QAAsC,cAAtC;AAGA,OAAO,IAAMC,IAAI;AAAA,sEAAG,iBAChBC,MADgB,EAEhBC,WAFgB,EAGhBC,KAHgB,EAIhBC,MAJgB,EAKhBC,MALgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOIN,qBAAqB,CAACE,MAAD,CAPzB;;AAAA;AAOVK,YAAAA,KAPU;AASVC,YAAAA,QATU,GASCT,KAAK,CAACU,UAAN,CAAiBJ,MAAjB,EAAyBD,KAAK,CAACM,QAA/B,CATD;AAAA,6CAUTH,KAAK,CACHI,OADF,CACUR,WAAW,CAACS,SAAZ,EADV,EAEEC,gBAFF,CAEmBT,KAAK,CAACU,OAFzB,EAEkCN,QAFlC,EAE4C;AAACO,cAAAA,QAAQ,EAAET;AAAX,aAF5C,CAVS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJL,IAAI;AAAA;AAAA;AAAA,GAAV","sourcesContent":["import { ethers, Signer, utils } from \"ethers\";\nimport { Token } from \"../types/blockchain\";\nimport { loadTokenSwapContract } from \"./token_swap\";\n\n\nexport const swap = async (\n    signer: Signer, \n    gsnProvider: ethers.providers.Web3Provider,\n    token: Token,\n    amount: string,\n    minGas: string\n) => {\n    const tSwap = await loadTokenSwapContract(signer);\n\n    const amountBN = utils.parseUnits(amount, token.decimals);\n    return tSwap\n            .connect(gsnProvider.getSigner())\n            .swapTokensForEth(token.address, amountBN, {gasLimit: minGas})\n}"]},"metadata":{},"sourceType":"module"}