{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { getStepTitle, makeGetProgress } from '../../../util/steps';\nimport { ComponentUnmountedException } from '../../exceptions/component_unmounted_exception';\nimport { ModalStatusTextLight, ModalText, StepStatus, StepStatusConfirmOnMetamask, StepStatusDone, StepStatusError, StepStatusLoading, Title } from './steps_common';\nimport { StepsProgress } from './steps_progress';\nimport { StepPendingTime } from './step_pending_time';\nexport class BaseStepModal extends React.Component {\n  constructor(props) {\n    super(props); // we set the value of the estimated tx time, so that the progress bar length is not updated in the middle of the step\n\n    _defineProperty(this, \"state\", {\n      status: StepStatus.ConfirmOnMetamask,\n      loadingStarted: null\n    });\n\n    _defineProperty(this, \"_estimatedTxTimeMs\", void 0);\n\n    _defineProperty(this, \"_isUnmounted\", false);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      await this._runAction();\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      this._isUnmounted = true;\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        confirmCaption,\n        loadingCaption,\n        doneCaption,\n        errorCaption,\n        loadingFooterCaption,\n        doneFooterCaption,\n        title\n      } = this.props;\n      const {\n        loadingStarted,\n        status\n      } = this.state;\n\n      const retry = () => this._retry();\n\n      let content;\n      let bodyText;\n      let footer = this.props.showPartialProgress ? null : /*#__PURE__*/_jsx(ModalStatusTextLight, {});\n\n      switch (status) {\n        case StepStatus.Loading:\n          content = /*#__PURE__*/_jsx(StepStatusLoading, {});\n          bodyText = /*#__PURE__*/_jsx(ModalText, {\n            children: loadingCaption\n          });\n          break;\n\n        case StepStatus.Done:\n          content = /*#__PURE__*/_jsx(StepStatusDone, {});\n          bodyText = /*#__PURE__*/_jsx(ModalText, {\n            children: doneCaption\n          });\n          footer = /*#__PURE__*/_jsx(ModalStatusTextLight, {\n            children: doneFooterCaption\n          });\n          break;\n\n        case StepStatus.Error:\n          content = /*#__PURE__*/_jsx(StepStatusError, {});\n          bodyText = /*#__PURE__*/_jsxs(ModalText, {\n            children: [errorCaption, /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"span\", {\n              className: \"modal-text-clickable\",\n              onClick: retry,\n              children: \"Click here to try again\"\n            })]\n          });\n          break;\n\n        default:\n          content = /*#__PURE__*/_jsx(StepStatusConfirmOnMetamask, {});\n          bodyText = /*#__PURE__*/_jsx(ModalText, {\n            children: confirmCaption\n          });\n          footer = /*#__PURE__*/_jsx(ModalStatusTextLight, {\n            children: loadingFooterCaption\n          });\n          break;\n      }\n\n      let getProgress = () => 0;\n\n      if (status === StepStatus.Loading && this.props.showPartialProgress && loadingStarted !== null) {\n        getProgress = makeGetProgress(loadingStarted, this._estimatedTxTimeMs);\n      } else if (status === StepStatus.Done) {\n        getProgress = () => 100;\n      }\n\n      const stepsProgress = this.props.buildStepsProgress({\n        title: getStepTitle(this.props.step),\n        active: true,\n        progress: getProgress,\n        isLong: false\n      });\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [content, /*#__PURE__*/_jsx(Title, {\n          children: title\n        }), bodyText, /*#__PURE__*/_jsx(StepsProgress, {\n          steps: stepsProgress\n        }), this.props.showPartialProgress && /*#__PURE__*/_jsx(ModalStatusTextLight, {\n          children: /*#__PURE__*/_jsx(StepPendingTime, {\n            txStarted: loadingStarted,\n            stepStatus: status,\n            estimatedTxTimeMs: this._estimatedTxTimeMs\n          })\n        }), footer]\n      });\n    });\n\n    _defineProperty(this, \"_runAction\", async () => {\n      const onLoading = () => {\n        this._throwIfUnmounted();\n\n        this.setState({\n          status: StepStatus.Loading,\n          loadingStarted: Date.now()\n        });\n      };\n\n      const onDone = () => {\n        this._throwIfUnmounted();\n\n        this.setState({\n          status: StepStatus.Done\n        });\n      };\n\n      const onError = err => {\n        if (err instanceof ComponentUnmountedException) {\n          return;\n        }\n\n        this.setState({\n          status: StepStatus.Error\n        });\n      };\n\n      return this.props.runAction({\n        onLoading,\n        onDone,\n        onError\n      });\n    });\n\n    _defineProperty(this, \"_retry\", async () => {\n      this.setState({\n        status: StepStatus.ConfirmOnMetamask\n      });\n      await this._runAction();\n    });\n\n    _defineProperty(this, \"_throwIfUnmounted\", () => {\n      if (this._isUnmounted) {\n        throw new ComponentUnmountedException('BaseStepModal');\n      }\n    });\n\n    this._estimatedTxTimeMs = props.estimatedTxTimeMs;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}