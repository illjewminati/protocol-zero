{"ast":null,"code":"export let Web3State;\n\n(function (Web3State) {\n  Web3State[\"Done\"] = \"Done\";\n  Web3State[\"Error\"] = \"Error\";\n  Web3State[\"Loading\"] = \"Loading\";\n  Web3State[\"NotInstalled\"] = \"NotInstalled\";\n  Web3State[\"Locked\"] = \"Locked\";\n})(Web3State || (Web3State = {}));\n\n;\nexport let Network;\n\n(function (Network) {\n  Network[Network[\"Mainnet\"] = 1] = \"Mainnet\";\n  Network[Network[\"Rinkeby\"] = 4] = \"Rinkeby\";\n  Network[Network[\"Goerli\"] = 5] = \"Goerli\";\n  Network[Network[\"Kovan\"] = 42] = \"Kovan\";\n  Network[Network[\"Ganache\"] = 50] = \"Ganache\";\n  Network[Network[\"Matic\"] = 137] = \"Matic\";\n  Network[Network[\"STN\"] = 18122] = \"STN\";\n  Network[Network[\"Mumbai\"] = 80001] = \"Mumbai\";\n  Network[Network[\"LocalHost\"] = 1337] = \"LocalHost\";\n})(Network || (Network = {}));","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/types/blockchain.ts"],"names":["Web3State","Network"],"mappings":"AAGA,WAAYA,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAuDX;AA6CD,WAAYC,OAAZ;;WAAYA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O","sourcesContent":["import { BigNumber, BigNumberish, BytesLike, ethers } from \"ethers\";\n\n\nexport enum Web3State {\n    Done = 'Done',\n    Error = 'Error',\n    Loading = 'Loading',\n    NotInstalled = 'NotInstalled',\n    Locked = 'Locked',\n}\n\nexport interface Token {\n    address: string,\n    decimals: number,\n    name: string,\n    symbol: string,\n    primaryColor?: string,\n    icon?: string,\n    displayDecimals?: number,\n}\n\nexport interface TokenBalance {\n    balance: string,\n    token: Token,\n    networkID: number,\n    uniswapValue: string,\n    totalSupply: string,\n    burned: string,\n    tokenSwapAllowance: string\n}\n\nexport interface Log {\n    address: string;\n    data: string;\n    topics: string[];\n    logIndex: number;\n    transactionIndex: number;\n    transactionHash: string;\n    blockHash: string;\n    blockNumber: number;\n}\n\nexport interface TransactionReceipt {\n    to: string;\n    from: string;\n    contractAddress: string | null,\n    transactionIndex: number,\n    root?: string,\n    gasUsed: BigNumberish,\n    logsBloom: string,\n    blockHash: string,\n    transactionHash: string,\n    logs: Array<Log>,\n    blockNumber: number,\n    confirmations: number,\n    cumulativeGasUsed: BigNumberish,\n    byzantium: boolean,\n    status?: number\n};\n\n\n\nexport interface Blockchain {\n    readonly ethAccount: string,\n    readonly web3State: Web3State,\n    readonly message: string,\n    readonly tokenBalances: TokenBalance[],\n    readonly balance: Balance,\n    readonly paymaster: Paymaster,\n    readonly networkID: number,\n    readonly web3Provider: ethers.providers.Web3Provider,\n    readonly gsnProvider?: ethers.providers.Web3Provider,\n    readonly gasPrice?: string,\n}\nexport interface Paymaster {\n    balance: Balance,\n    minBalance: BigNumber,\n    minGas: BigNumber,\n    owner: string,\n    paymentData: PaymasterPaymentData,\n    gasUsedByPost: BigNumber,\n    targetContract: string\n}\n\nexport interface SwapResponse {\n    error: boolean,\n    data: SwapSuccess, \n    message?: string\n}\n\nexport interface SwapSuccess {\n    txHash: string,\n    gasUsed: string,\n    txPrice: string,\n    deposited: string,\n    withdrawn: string\n}\n\nexport interface PaymasterPaymentData {\n    fee: string,\n    paymentToken: string\n}\n\nexport enum Network {\n    Mainnet = 1,\n    Rinkeby = 4,\n    Goerli = 5,\n    Kovan = 42,\n    Ganache = 50,\n    Matic = 137,\n    STN = 18122,\n    Mumbai = 80001,\n    LocalHost = 1337\n}\n\nexport interface ConfigFile {\n    general?: GeneralConfig,\n    tokens: TokenMetaData[],\n}\n\nexport interface GeneralConfig {\n    title?: string,\n    icon?: string,\n}\n\nexport interface TokenMetaData {\n    addresses: { [key: number]: string },\n    symbol: string,\n    decimals: number,\n    name: string,\n    primaryColor: string,\n    icon?: string,\n    displayDecimals?: number,\n}\n\nexport interface Balance {\n    networkID: number,\n    balance: string,\n    coin: \"ETH\"\n}\n\n\nexport interface ContractTransaction {\n    blockHash: string,\n    blockNumber: number,\n    contractAddress: string | null,\n    cumulativeGasUsed: number,\n    events: any,\n    from: string,\n    gasUsed: number,\n    logsBloom: string,\n    status: boolean,\n    to: string,\n    transactionHash: string,\n    transactionIndex: number,\n    type: string\n}\n\nexport interface BlockHeader {\n    number: number;\n    hash: string;\n    parentHash: string;\n    nonce: string;\n    sha3Uncles: string;\n    logsBloom: string;\n    transactionRoot: string;\n    stateRoot: string;\n    receiptRoot: string;\n    miner: string;\n    extraData: string;\n    gasLimit: number;\n    gasUsed: number;\n    timestamp: number | string;\n}\n\nexport interface NewHeaderBlockEvent {\n    proposer: string,\n    headerBlockId: BigNumberish,\n    reward: BigNumberish,\n    start: BigNumberish,\n    end: BigNumberish,\n    root: BytesLike\n}"]},"metadata":{},"sourceType":"module"}