"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helperTestCompaniesFactory = exports.helperDeployCompaniesFactory = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ = require("../../../");

var _companyController = require("../../../companyController");

var _multisig = require("./multisig");

var helperDeployCompaniesFactory = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(signers, owner) {
    var companiesFactoryContract, companiesFactoryAddress, ownerOf;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _.CompaniesFactoryController.deployCompaniesFactory(signers[0], owner);

          case 2:
            companiesFactoryContract = _context.sent;
            companiesFactoryAddress = companiesFactoryContract.address;
            _context.next = 6;
            return companiesFactoryContract.owner();

          case 6:
            ownerOf = _context.sent;
            expect(owner).toEqual(ownerOf);
            return _context.abrupt("return", [companiesFactoryContract, companiesFactoryAddress]);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function helperDeployCompaniesFactory(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.helperDeployCompaniesFactory = helperDeployCompaniesFactory;

var helperTestCompaniesFactory = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(signers, companiesFactoryAddress, multisigContractAddress) {
    var controller, multisigController, company1Owner, company1Name, company1IpfsLink, company2Owner, company2Name, company2IpfsLink, company3Owner, company3Name, company3IpfsLink, createCompanyEncoded, companiesBySignatorie, company1Address, company1Controller, company1Data, getSignersByCompany, isCompanyOwner, company1Signer, controller1, getCompaniesBySignatorie, createCompany2Encoded, getCompanies, company2Address, controller2, createCompany3Encoded, company3Address, signer31, signer32, signer33, controller3;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            controller = new _.CompaniesFactoryController(companiesFactoryAddress, signers[0]);
            multisigController = new _.MultisigController(multisigContractAddress, signers[0]);
            _context2.next = 4;
            return signers[3].getAddress();

          case 4:
            company1Owner = _context2.sent;
            company1Name = "Santiago Co";
            company1IpfsLink = '0x0000000000000000000000000000000000000000000000000000000000000000';
            _context2.next = 9;
            return signers[5].getAddress();

          case 9:
            company2Owner = _context2.sent;
            company2Name = "DelValle LTD";
            company2IpfsLink = '0x0000000000000000000000000000000000000000000000000000000000000000';
            _context2.next = 14;
            return signers[3].getAddress();

          case 14:
            company3Owner = _context2.sent;
            company3Name = "STN Co";
            company3IpfsLink = '0x0000000000000000000000000000000000000000000000000000000000000000'; //creates company1 with signers[3] as owner

            createCompanyEncoded = _.CompaniesFactoryController.encodeCall("createCompany", [company1Owner, company1Name, company1IpfsLink]);
            _context2.next = 20;
            return multisigController.submitTransaction(companiesFactoryAddress, 0, createCompanyEncoded, {
              gasLimit: 7500000
            });

          case 20:
            _context2.next = 22;
            return _context2.sent.wait();

          case 22:
            _context2.next = 24;
            return (0, _multisig.confirmLastMultisigTx)(multisigContractAddress, signers[1]);

          case 24:
            _context2.next = 26;
            return controller.getCompaniesBySignatorie(company1Owner);

          case 26:
            companiesBySignatorie = _context2.sent;
            expect(companiesBySignatorie.length).toEqual(1);
            company1Address = companiesBySignatorie[0];
            company1Controller = new _companyController.CompanyController(company1Address, signers[3]);
            _context2.next = 32;
            return company1Controller.getData();

          case 32:
            company1Data = _context2.sent;
            expect(company1Data.name).toEqual(company1Name);
            _context2.next = 36;
            return controller.getSignersByCompany(company1Address);

          case 36:
            getSignersByCompany = _context2.sent;
            expect(getSignersByCompany.length).toEqual(1);
            _context2.next = 40;
            return controller.isCompanyOwner(company1Address, company1Owner);

          case 40:
            isCompanyOwner = _context2.sent;
            expect(isCompanyOwner).toEqual(true); //adds signers[4] as signatorie to company1

            _context2.next = 44;
            return signers[4].getAddress();

          case 44:
            company1Signer = _context2.sent;
            controller1 = new _.CompaniesFactoryController(companiesFactoryAddress, signers[3]);
            _context2.next = 48;
            return controller1.addCompanySignatorie(company1Address, company1Signer);

          case 48:
            _context2.next = 50;
            return controller.getSignersByCompany(company1Address);

          case 50:
            getSignersByCompany = _context2.sent;
            expect(getSignersByCompany.length).toEqual(2);
            _context2.next = 54;
            return controller.getCompaniesBySignatorie(company1Signer);

          case 54:
            getCompaniesBySignatorie = _context2.sent;
            expect(getCompaniesBySignatorie.length).toEqual(1); //Creates a company2 with signers[5] as owner

            createCompany2Encoded = _.CompaniesFactoryController.encodeCall("createCompany", [company2Owner, company2Name, company2IpfsLink]);
            _context2.next = 59;
            return multisigController.submitTransaction(companiesFactoryAddress, 0, createCompany2Encoded, {
              gasLimit: 7500000
            });

          case 59:
            _context2.next = 61;
            return _context2.sent.wait();

          case 61:
            _context2.next = 63;
            return (0, _multisig.confirmLastMultisigTx)(multisigContractAddress, signers[1]);

          case 63:
            _context2.next = 65;
            return controller.getCompanies();

          case 65:
            getCompanies = _context2.sent;
            expect(getCompanies.length).toEqual(2);
            company2Address = getCompanies[1]; //adds signers[3] as signatorie to company2

            controller2 = new _.CompaniesFactoryController(companiesFactoryAddress, signers[5]);
            _context2.next = 71;
            return controller2.addCompanySignatorie(company2Address, company1Owner);

          case 71:
            _context2.next = 73;
            return controller.getSignersByCompany(company1Address);

          case 73:
            getSignersByCompany = _context2.sent;
            expect(getSignersByCompany.length).toEqual(2);
            _context2.next = 77;
            return controller.getCompaniesBySignatorie(company1Signer);

          case 77:
            getCompaniesBySignatorie = _context2.sent;
            expect(getCompaniesBySignatorie.length).toEqual(1); //signers[3] should be part of 2 companies now

            _context2.next = 81;
            return controller.getCompaniesBySignatorie(company1Owner);

          case 81:
            getCompaniesBySignatorie = _context2.sent;
            expect(getCompaniesBySignatorie.length).toEqual(2); //Creates a company3 with signers[3] as owner

            createCompany3Encoded = _.CompaniesFactoryController.encodeCall("createCompany", [company3Owner, company3Name, company3IpfsLink]);
            _context2.next = 86;
            return multisigController.submitTransaction(companiesFactoryAddress, 0, createCompany3Encoded, {
              gasLimit: 7500000
            });

          case 86:
            _context2.next = 88;
            return _context2.sent.wait();

          case 88:
            _context2.next = 90;
            return (0, _multisig.confirmLastMultisigTx)(multisigContractAddress, signers[1]);

          case 90:
            _context2.next = 92;
            return controller.getCompaniesBySignatorie(company1Owner);

          case 92:
            getCompaniesBySignatorie = _context2.sent;
            expect(getCompaniesBySignatorie.length).toEqual(3); //adds signer[2], [4], [5] to company3

            company3Address = getCompaniesBySignatorie[2];
            _context2.next = 97;
            return signers[2].getAddress();

          case 97:
            signer31 = _context2.sent;
            _context2.next = 100;
            return signers[4].getAddress();

          case 100:
            signer32 = _context2.sent;
            _context2.next = 103;
            return signers[5].getAddress();

          case 103:
            signer33 = _context2.sent;
            controller3 = new _.CompaniesFactoryController(companiesFactoryAddress, signers[3]);
            _context2.next = 107;
            return controller3.addCompanySignatorie(company3Address, signer31);

          case 107:
            _context2.next = 109;
            return controller3.addCompanySignatorie(company3Address, signer32);

          case 109:
            _context2.next = 111;
            return controller3.addCompanySignatorie(company3Address, signer33);

          case 111:
            _context2.next = 113;
            return controller.getSignersByCompany(company3Address);

          case 113:
            getSignersByCompany = _context2.sent;
            expect(getSignersByCompany.length).toEqual(4); //removes signer[2]

            _context2.next = 117;
            return controller3.removeCompanySignatorie(company3Address, signer31);

          case 117:
            _context2.next = 119;
            return controller.getSignersByCompany(company3Address);

          case 119:
            getSignersByCompany = _context2.sent;
            expect(getSignersByCompany.length).toEqual(3);
            expect(getSignersByCompany).toEqual(expect.arrayContaining([signer32, signer33, company3Owner]));
            _context2.next = 124;
            return controller.getCompaniesBySignatorie(signer31);

          case 124:
            getCompaniesBySignatorie = _context2.sent;
            expect(getCompaniesBySignatorie.length).toEqual(0); //const isSignerApproved = await controller.isSignerApproved()

          case 126:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function helperTestCompaniesFactory(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

exports.helperTestCompaniesFactory = helperTestCompaniesFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,