{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/app_container.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { LocalStorage } from '../services/local_storage';\nimport { initializeAppNoMetamaskOrLocked, initWallet, initWeb3 } from '../store/actions';\nimport { getWeb3State } from '../store/blockchain/selectors';\nimport { ToolbarContentContainer } from './common/toolbar_content';\nimport { GeneralLayout } from './general_layout';\n\nconst toolbar = /*#__PURE__*/_jsxDEV(ToolbarContentContainer, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 17\n}, this);\n\nlet localStorage = null;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      window.addEventListener(\"load\", async () => {\n        if (!localStorage) localStorage = new LocalStorage(window.localStorage);\n        await this.props.initWeb3(); //this.props.onConnectWallet();\n      });\n    });\n\n    _defineProperty(this, \"render\", () => {\n      return /*#__PURE__*/_jsxDEV(GeneralLayout, {\n        toolbar: toolbar,\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this);\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    web3State: getWeb3State(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInitMetamaskState: () => dispatch(initializeAppNoMetamaskOrLocked()),\n    onConnectWallet: () => dispatch(initWallet()),\n    initWeb3: () => dispatch(initWeb3())\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\nexport { App, AppContainer };","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/app_container.tsx"],"names":["React","connect","LocalStorage","initializeAppNoMetamaskOrLocked","initWallet","initWeb3","getWeb3State","ToolbarContentContainer","GeneralLayout","toolbar","localStorage","App","Component","window","addEventListener","props","children","mapStateToProps","state","web3State","mapDispatchToProps","dispatch","onInitMetamaskState","onConnectWallet","AppContainer"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,+BAAT,EAA0CC,UAA1C,EAAsDC,QAAtD,QAAsE,kBAAtE;AAGA,SAASC,YAAT,QAA6B,+BAA7B;AAEA,SAASC,uBAAT,QAAwC,0BAAxC;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AACA,MAAMC,OAAO,gBAAG,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,QAAhB;;AAkBA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAyC;AAAA;AAAA;;AAAA,+CAEV,YAAY;AAEnCC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAW;AACvC,YAAG,CAACJ,YAAJ,EAAkBA,YAAY,GAAG,IAAIR,YAAJ,CAAiBW,MAAM,CAACH,YAAxB,CAAf;AAClB,cAAM,KAAKK,KAAL,CAAWV,QAAX,EAAN,CAFuC,CAIvC;AACH,OALD;AAOH,KAXoC;;AAAA,oCAerB,MAAM;AAClB,0BACI,QAAC,aAAD;AAAe,QAAA,OAAO,EAAEI,OAAxB;AAAA,kBACK,KAAKM,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KArBoC;AAAA;;AAAA;;AA0BzC,MAAMC,eAAe,GAAIC,KAAD,IAAmC;AACvD,SAAO;AACHC,IAAAA,SAAS,EAAEb,YAAY,CAACY,KAAD;AADpB,GAAP;AAGH,CAJD;;AAMA,MAAME,kBAAkB,GAAIC,QAAD,IAAkC;AACzD,SAAO;AACHC,IAAAA,mBAAmB,EAAE,MAAMD,QAAQ,CAAClB,+BAA+B,EAAhC,CADhC;AAEHoB,IAAAA,eAAe,EAAE,MAAMF,QAAQ,CAACjB,UAAU,EAAX,CAF5B;AAGHC,IAAAA,QAAQ,EAAE,MAAMgB,QAAQ,CAAChB,QAAQ,EAAT;AAHrB,GAAP;AAMH,CAPD;;AASA,MAAMmB,YAAY,GAAGvB,OAAO,CACxBgB,eADwB,EAExBG,kBAFwB,CAAP,CAGnBT,GAHmB,CAArB;AAKA,SAASA,GAAT,EAAca,YAAd","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { LocalStorage } from '../services/local_storage';\nimport { initializeAppNoMetamaskOrLocked, initWallet, initWeb3 } from '../store/actions';\nimport { Web3State } from '../types/blockchain';\nimport { StoreState } from '../types/store';\nimport { getWeb3State } from '../store/blockchain/selectors'\n\nimport { ToolbarContentContainer } from './common/toolbar_content';\nimport { GeneralLayout } from './general_layout';\nconst toolbar = <ToolbarContentContainer />;\n\ninterface OwnProps {\n    children: React.ReactNode;\n}\n\ninterface StateProps {\n    web3State: Web3State;\n}\n\ninterface DispatchProps {\n    onConnectWallet: () => any;\n    onInitMetamaskState: () => any; //\n    initWeb3: () => any;\n}\n\ntype Props = OwnProps & DispatchProps & StateProps;\n\nlet localStorage = null;\n\nclass App extends React.Component<Props> {\n\n    public componentDidMount = async () => {\n\n        window.addEventListener(\"load\", async ()=> {\n            if(!localStorage) localStorage = new LocalStorage(window.localStorage)\n            await this.props.initWeb3()\n            \n            //this.props.onConnectWallet();\n        })\n        \n    };\n\n\n\n    public render = () => {\n        return(\n            <GeneralLayout toolbar={toolbar}>\n                {this.props.children}\n            </GeneralLayout>\n        )\n    };\n\n   \n}\n\nconst mapStateToProps = (state: StoreState): StateProps => {\n    return {\n        web3State: getWeb3State(state),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any): DispatchProps => {\n    return {\n        onInitMetamaskState: () => dispatch(initializeAppNoMetamaskOrLocked()),\n        onConnectWallet: () => dispatch(initWallet()),\n        initWeb3: () => dispatch(initWeb3()),\n      \n    };\n};\n\nconst AppContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App) as any;\n\nexport { App, AppContainer };\n"]},"metadata":{},"sourceType":"module"}