"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STN20 = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _contracts = require("@ethersproject/contracts");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var STN20 = /*#__PURE__*/function (_Contract) {
  (0, _inherits2["default"])(STN20, _Contract);

  var _super = _createSuper(STN20);

  function STN20() {
    var _this;

    (0, _classCallCheck2["default"])(this, STN20);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "interface", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functions", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "callStatic", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filters", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "estimateGas", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "populateTransaction", void 0);
    return _this;
  }

  return STN20;
}(_contracts.Contract);

exports.STN20 = STN20;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9TVE4yMC5kLnRzIl0sIm5hbWVzIjpbIlNUTjIwIiwiQ29udHJhY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7SUFrSGFBLEs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFBY0MsbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCB7XG4gIGV0aGVycyxcbiAgRXZlbnRGaWx0ZXIsXG4gIFNpZ25lcixcbiAgQmlnTnVtYmVyLFxuICBCaWdOdW1iZXJpc2gsXG4gIFBvcHVsYXRlZFRyYW5zYWN0aW9uLFxufSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQge1xuICBDb250cmFjdCxcbiAgQ29udHJhY3RUcmFuc2FjdGlvbixcbiAgT3ZlcnJpZGVzLFxuICBDYWxsT3ZlcnJpZGVzLFxufSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29udHJhY3RzXCI7XG5pbXBvcnQgeyBCeXRlc0xpa2UgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IExpc3RlbmVyLCBQcm92aWRlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcnNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uRnJhZ21lbnQsIEV2ZW50RnJhZ21lbnQsIFJlc3VsdCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYmlcIjtcblxuaW50ZXJmYWNlIFNUTjIwSW50ZXJmYWNlIGV4dGVuZHMgZXRoZXJzLnV0aWxzLkludGVyZmFjZSB7XG4gIGZ1bmN0aW9uczoge1xuICAgIFwiYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcylcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcImFwcHJvdmUoYWRkcmVzcyx1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiYmFsYW5jZU9mKGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJkZWNpbWFscygpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJkZWNyZWFzZUFsbG93YW5jZShhZGRyZXNzLHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJpbmNyZWFzZUFsbG93YW5jZShhZGRyZXNzLHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJuYW1lKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcIm93bmVyKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInJlbm91bmNlT3duZXJzaGlwKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInN5bWJvbCgpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJ0b3RhbFN1cHBseSgpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJ0cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJ0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICB9O1xuXG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImFsbG93YW5jZVwiLFxuICAgIHZhbHVlczogW3N0cmluZywgc3RyaW5nXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImFwcHJvdmVcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmcsIEJpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoZnVuY3Rpb25GcmFnbWVudDogXCJiYWxhbmNlT2ZcIiwgdmFsdWVzOiBbc3RyaW5nXSk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZGVjaW1hbHNcIiwgdmFsdWVzPzogdW5kZWZpbmVkKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJkZWNyZWFzZUFsbG93YW5jZVwiLFxuICAgIHZhbHVlczogW3N0cmluZywgQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcImluY3JlYXNlQWxsb3dhbmNlXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQ6IFwibmFtZVwiLCB2YWx1ZXM/OiB1bmRlZmluZWQpOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcIm93bmVyXCIsIHZhbHVlcz86IHVuZGVmaW5lZCk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwicmVub3VuY2VPd25lcnNoaXBcIixcbiAgICB2YWx1ZXM/OiB1bmRlZmluZWRcbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoZnVuY3Rpb25GcmFnbWVudDogXCJzeW1ib2xcIiwgdmFsdWVzPzogdW5kZWZpbmVkKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0b3RhbFN1cHBseVwiLFxuICAgIHZhbHVlcz86IHVuZGVmaW5lZFxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInRyYW5zZmVyXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwidHJhbnNmZXJGcm9tXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBzdHJpbmcsIEJpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0cmFuc2Zlck93bmVyc2hpcFwiLFxuICAgIHZhbHVlczogW3N0cmluZ11cbiAgKTogc3RyaW5nO1xuXG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwiYWxsb3dhbmNlXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJhcHByb3ZlXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJiYWxhbmNlT2ZcIiwgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50OiBcImRlY2ltYWxzXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJkZWNyZWFzZUFsbG93YW5jZVwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiaW5jcmVhc2VBbGxvd2FuY2VcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50OiBcIm5hbWVcIiwgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50OiBcIm93bmVyXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJyZW5vdW5jZU93bmVyc2hpcFwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwic3ltYm9sXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0b3RhbFN1cHBseVwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwidHJhbnNmZXJcIiwgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInRyYW5zZmVyRnJvbVwiLFxuICAgIGRhdGE6IEJ5dGVzTGlrZVxuICApOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwidHJhbnNmZXJPd25lcnNoaXBcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuXG4gIGV2ZW50czoge1xuICAgIFwiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzLGFkZHJlc3MpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIjogRXZlbnRGcmFnbWVudDtcbiAgfTtcblxuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIkFwcHJvdmFsXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIk93bmVyc2hpcFRyYW5zZmVycmVkXCIpOiBFdmVudEZyYWdtZW50O1xuICBnZXRFdmVudChuYW1lT3JTaWduYXR1cmVPclRvcGljOiBcIlRyYW5zZmVyXCIpOiBFdmVudEZyYWdtZW50O1xufVxuXG5leHBvcnQgY2xhc3MgU1ROMjAgZXh0ZW5kcyBDb250cmFjdCB7XG4gIGNvbm5lY3Qoc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIgfCBzdHJpbmcpOiB0aGlzO1xuICBhdHRhY2goYWRkcmVzc09yTmFtZTogc3RyaW5nKTogdGhpcztcbiAgZGVwbG95ZWQoKTogUHJvbWlzZTx0aGlzPjtcblxuICBvbihldmVudDogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXM7XG4gIG9uY2UoZXZlbnQ6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuICBhZGRMaXN0ZW5lcihldmVudE5hbWU6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lOiBFdmVudEZpbHRlciB8IHN0cmluZyk6IHRoaXM7XG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZTogYW55LCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuXG4gIGludGVyZmFjZTogU1ROMjBJbnRlcmZhY2U7XG5cbiAgZnVuY3Rpb25zOiB7XG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYWxsb3dhbmNlfS5cbiAgICAgKi9cbiAgICBhbGxvd2FuY2UoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W0JpZ051bWJlcl0+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYWxsb3dhbmNlfS5cbiAgICAgKi9cbiAgICBcImFsbG93YW5jZShhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W0JpZ051bWJlcl0+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYXBwcm92ZX0uIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLWFwcHJvdmV9LiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLlxuICAgICAqL1xuICAgIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC1iYWxhbmNlT2Z9LlxuICAgICAqL1xuICAgIGJhbGFuY2VPZihhY2NvdW50OiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtCaWdOdW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgXCJiYWxhbmNlT2YoYWRkcmVzcylcIihcbiAgICAgIGFjY291bnQ6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtCaWdOdW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkZWNpbWFscyB1c2VkIHRvIGdldCBpdHMgdXNlciByZXByZXNlbnRhdGlvbi4gRm9yIGV4YW1wbGUsIGlmIGBkZWNpbWFsc2AgZXF1YWxzIGAyYCwgYSBiYWxhbmNlIG9mIGA1MDVgIHRva2VucyBzaG91bGQgYmUgZGlzcGxheWVkIHRvIGEgdXNlciBhcyBgNSwwNWAgKGA1MDUgLyAxMCAqKiAyYCkuIFRva2VucyB1c3VhbGx5IG9wdCBmb3IgYSB2YWx1ZSBvZiAxOCwgaW1pdGF0aW5nIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBFdGhlciBhbmQgV2VpLiBUaGlzIGlzIHRoZSB2YWx1ZSB7RVJDMjB9IHVzZXMsIHVubGVzcyB0aGlzIGZ1bmN0aW9uIGlzIG92ZXJyaWRkZW47IE5PVEU6IFRoaXMgaW5mb3JtYXRpb24gaXMgb25seSB1c2VkIGZvciBfZGlzcGxheV8gcHVycG9zZXM6IGl0IGluIG5vIHdheSBhZmZlY3RzIGFueSBvZiB0aGUgYXJpdGhtZXRpYyBvZiB0aGUgY29udHJhY3QsIGluY2x1ZGluZyB7SUVSQzIwLWJhbGFuY2VPZn0gYW5kIHtJRVJDMjAtdHJhbnNmZXJ9LlxuICAgICAqL1xuICAgIGRlY2ltYWxzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtudW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkZWNpbWFscyB1c2VkIHRvIGdldCBpdHMgdXNlciByZXByZXNlbnRhdGlvbi4gRm9yIGV4YW1wbGUsIGlmIGBkZWNpbWFsc2AgZXF1YWxzIGAyYCwgYSBiYWxhbmNlIG9mIGA1MDVgIHRva2VucyBzaG91bGQgYmUgZGlzcGxheWVkIHRvIGEgdXNlciBhcyBgNSwwNWAgKGA1MDUgLyAxMCAqKiAyYCkuIFRva2VucyB1c3VhbGx5IG9wdCBmb3IgYSB2YWx1ZSBvZiAxOCwgaW1pdGF0aW5nIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBFdGhlciBhbmQgV2VpLiBUaGlzIGlzIHRoZSB2YWx1ZSB7RVJDMjB9IHVzZXMsIHVubGVzcyB0aGlzIGZ1bmN0aW9uIGlzIG92ZXJyaWRkZW47IE5PVEU6IFRoaXMgaW5mb3JtYXRpb24gaXMgb25seSB1c2VkIGZvciBfZGlzcGxheV8gcHVycG9zZXM6IGl0IGluIG5vIHdheSBhZmZlY3RzIGFueSBvZiB0aGUgYXJpdGhtZXRpYyBvZiB0aGUgY29udHJhY3QsIGluY2x1ZGluZyB7SUVSQzIwLWJhbGFuY2VPZn0gYW5kIHtJRVJDMjAtdHJhbnNmZXJ9LlxuICAgICAqL1xuICAgIFwiZGVjaW1hbHMoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtudW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgZGVjcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzcGVuZGVyYCBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciB0aGUgY2FsbGVyIG9mIGF0IGxlYXN0IGBzdWJ0cmFjdGVkVmFsdWVgLlxuICAgICAqL1xuICAgIGRlY3JlYXNlQWxsb3dhbmNlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgc3VidHJhY3RlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQXRvbWljYWxseSBkZWNyZWFzZXMgdGhlIGFsbG93YW5jZSBncmFudGVkIHRvIGBzcGVuZGVyYCBieSB0aGUgY2FsbGVyLiBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIHthcHByb3ZlfSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgbWl0aWdhdGlvbiBmb3IgcHJvYmxlbXMgZGVzY3JpYmVkIGluIHtJRVJDMjAtYXBwcm92ZX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gYHNwZW5kZXJgIG11c3QgaGF2ZSBhbGxvd2FuY2UgZm9yIHRoZSBjYWxsZXIgb2YgYXQgbGVhc3QgYHN1YnRyYWN0ZWRWYWx1ZWAuXG4gICAgICovXG4gICAgXCJkZWNyZWFzZUFsbG93YW5jZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBzdWJ0cmFjdGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBdG9taWNhbGx5IGluY3JlYXNlcyB0aGUgYWxsb3dhbmNlIGdyYW50ZWQgdG8gYHNwZW5kZXJgIGJ5IHRoZSBjYWxsZXIuIFRoaXMgaXMgYW4gYWx0ZXJuYXRpdmUgdG8ge2FwcHJvdmV9IHRoYXQgY2FuIGJlIHVzZWQgYXMgYSBtaXRpZ2F0aW9uIGZvciBwcm9ibGVtcyBkZXNjcmliZWQgaW4ge0lFUkMyMC1hcHByb3ZlfS4gRW1pdHMgYW4ge0FwcHJvdmFsfSBldmVudCBpbmRpY2F0aW5nIHRoZSB1cGRhdGVkIGFsbG93YW5jZS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBpbmNyZWFzZUFsbG93YW5jZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFkZGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBBdG9taWNhbGx5IGluY3JlYXNlcyB0aGUgYWxsb3dhbmNlIGdyYW50ZWQgdG8gYHNwZW5kZXJgIGJ5IHRoZSBjYWxsZXIuIFRoaXMgaXMgYW4gYWx0ZXJuYXRpdmUgdG8ge2FwcHJvdmV9IHRoYXQgY2FuIGJlIHVzZWQgYXMgYSBtaXRpZ2F0aW9uIGZvciBwcm9ibGVtcyBkZXNjcmliZWQgaW4ge0lFUkMyMC1hcHByb3ZlfS4gRW1pdHMgYW4ge0FwcHJvdmFsfSBldmVudCBpbmRpY2F0aW5nIHRoZSB1cGRhdGVkIGFsbG93YW5jZS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBcImluY3JlYXNlQWxsb3dhbmNlKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFkZGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSB0b2tlbi5cbiAgICAgKi9cbiAgICBuYW1lKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHRva2VuLlxuICAgICAqL1xuICAgIFwibmFtZSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBvd25lcihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIFwib3duZXIoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgICAqL1xuICAgIHJlbm91bmNlT3duZXJzaGlwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgb3duZXIuIEl0IHdpbGwgbm90IGJlIHBvc3NpYmxlIHRvIGNhbGwgYG9ubHlPd25lcmAgZnVuY3Rpb25zIGFueW1vcmUuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4gTk9URTogUmVub3VuY2luZyBvd25lcnNoaXAgd2lsbCBsZWF2ZSB0aGUgY29udHJhY3Qgd2l0aG91dCBhbiBvd25lciwgdGhlcmVieSByZW1vdmluZyBhbnkgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIHRvIHRoZSBvd25lci5cbiAgICAgKi9cbiAgICBcInJlbm91bmNlT3duZXJzaGlwKClcIihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3ltYm9sIG9mIHRoZSB0b2tlbiwgdXN1YWxseSBhIHNob3J0ZXIgdmVyc2lvbiBvZiB0aGUgbmFtZS5cbiAgICAgKi9cbiAgICBzeW1ib2wob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3ltYm9sIG9mIHRoZSB0b2tlbiwgdXN1YWxseSBhIHNob3J0ZXIgdmVyc2lvbiBvZiB0aGUgbmFtZS5cbiAgICAgKi9cbiAgICBcInN5bWJvbCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtdG90YWxTdXBwbHl9LlxuICAgICAqL1xuICAgIHRvdGFsU3VwcGx5KG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtCaWdOdW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRvdGFsU3VwcGx5fS5cbiAgICAgKi9cbiAgICBcInRvdGFsU3VwcGx5KClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbQmlnTnVtYmVyXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC10cmFuc2Zlcn0uIFJlcXVpcmVtZW50czogLSBgcmVjaXBpZW50YCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy4gLSB0aGUgY2FsbGVyIG11c3QgaGF2ZSBhIGJhbGFuY2Ugb2YgYXQgbGVhc3QgYGFtb3VudGAuXG4gICAgICovXG4gICAgdHJhbnNmZXIoXG4gICAgICByZWNpcGllbnQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyfS4gUmVxdWlyZW1lbnRzOiAtIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtdHJhbnNmZXJGcm9tfS4gRW1pdHMgYW4ge0FwcHJvdmFsfSBldmVudCBpbmRpY2F0aW5nIHRoZSB1cGRhdGVkIGFsbG93YW5jZS4gVGhpcyBpcyBub3QgcmVxdWlyZWQgYnkgdGhlIEVJUC4gU2VlIHRoZSBub3RlIGF0IHRoZSBiZWdpbm5pbmcgb2Yge0VSQzIwfS4gUmVxdWlyZW1lbnRzOiAtIGBzZW5kZXJgIGFuZCBgcmVjaXBpZW50YCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy4gLSBgc2VuZGVyYCBtdXN0IGhhdmUgYSBiYWxhbmNlIG9mIGF0IGxlYXN0IGBhbW91bnRgLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGFsbG93YW5jZSBmb3IgYGBzZW5kZXJgYCdzIHRva2VucyBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICAgKi9cbiAgICB0cmFuc2ZlckZyb20oXG4gICAgICBzZW5kZXI6IHN0cmluZyxcbiAgICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtdHJhbnNmZXJGcm9tfS4gRW1pdHMgYW4ge0FwcHJvdmFsfSBldmVudCBpbmRpY2F0aW5nIHRoZSB1cGRhdGVkIGFsbG93YW5jZS4gVGhpcyBpcyBub3QgcmVxdWlyZWQgYnkgdGhlIEVJUC4gU2VlIHRoZSBub3RlIGF0IHRoZSBiZWdpbm5pbmcgb2Yge0VSQzIwfS4gUmVxdWlyZW1lbnRzOiAtIGBzZW5kZXJgIGFuZCBgcmVjaXBpZW50YCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy4gLSBgc2VuZGVyYCBtdXN0IGhhdmUgYSBiYWxhbmNlIG9mIGF0IGxlYXN0IGBhbW91bnRgLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGFsbG93YW5jZSBmb3IgYGBzZW5kZXJgYCdzIHRva2VucyBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHNlbmRlcjogc3RyaW5nLFxuICAgICAgcmVjaXBpZW50OiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIHRyYW5zZmVyT3duZXJzaGlwKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcylcIihcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMyMC1hbGxvd2FuY2V9LlxuICAgKi9cbiAgYWxsb3dhbmNlKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMyMC1hbGxvd2FuY2V9LlxuICAgKi9cbiAgXCJhbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMyMC1hcHByb3ZlfS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICovXG4gIGFwcHJvdmUoXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMyMC1hcHByb3ZlfS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICovXG4gIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMyMC1iYWxhbmNlT2Z9LlxuICAgKi9cbiAgYmFsYW5jZU9mKGFjY291bnQ6IHN0cmluZywgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDMjAtYmFsYW5jZU9mfS5cbiAgICovXG4gIFwiYmFsYW5jZU9mKGFkZHJlc3MpXCIoXG4gICAgYWNjb3VudDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGVjaW1hbHMgdXNlZCB0byBnZXQgaXRzIHVzZXIgcmVwcmVzZW50YXRpb24uIEZvciBleGFtcGxlLCBpZiBgZGVjaW1hbHNgIGVxdWFscyBgMmAsIGEgYmFsYW5jZSBvZiBgNTA1YCB0b2tlbnMgc2hvdWxkIGJlIGRpc3BsYXllZCB0byBhIHVzZXIgYXMgYDUsMDVgIChgNTA1IC8gMTAgKiogMmApLiBUb2tlbnMgdXN1YWxseSBvcHQgZm9yIGEgdmFsdWUgb2YgMTgsIGltaXRhdGluZyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gRXRoZXIgYW5kIFdlaS4gVGhpcyBpcyB0aGUgdmFsdWUge0VSQzIwfSB1c2VzLCB1bmxlc3MgdGhpcyBmdW5jdGlvbiBpcyBvdmVycmlkZGVuOyBOT1RFOiBUaGlzIGluZm9ybWF0aW9uIGlzIG9ubHkgdXNlZCBmb3IgX2Rpc3BsYXlfIHB1cnBvc2VzOiBpdCBpbiBubyB3YXkgYWZmZWN0cyBhbnkgb2YgdGhlIGFyaXRobWV0aWMgb2YgdGhlIGNvbnRyYWN0LCBpbmNsdWRpbmcge0lFUkMyMC1iYWxhbmNlT2Z9IGFuZCB7SUVSQzIwLXRyYW5zZmVyfS5cbiAgICovXG4gIGRlY2ltYWxzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPG51bWJlcj47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkZWNpbWFscyB1c2VkIHRvIGdldCBpdHMgdXNlciByZXByZXNlbnRhdGlvbi4gRm9yIGV4YW1wbGUsIGlmIGBkZWNpbWFsc2AgZXF1YWxzIGAyYCwgYSBiYWxhbmNlIG9mIGA1MDVgIHRva2VucyBzaG91bGQgYmUgZGlzcGxheWVkIHRvIGEgdXNlciBhcyBgNSwwNWAgKGA1MDUgLyAxMCAqKiAyYCkuIFRva2VucyB1c3VhbGx5IG9wdCBmb3IgYSB2YWx1ZSBvZiAxOCwgaW1pdGF0aW5nIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBFdGhlciBhbmQgV2VpLiBUaGlzIGlzIHRoZSB2YWx1ZSB7RVJDMjB9IHVzZXMsIHVubGVzcyB0aGlzIGZ1bmN0aW9uIGlzIG92ZXJyaWRkZW47IE5PVEU6IFRoaXMgaW5mb3JtYXRpb24gaXMgb25seSB1c2VkIGZvciBfZGlzcGxheV8gcHVycG9zZXM6IGl0IGluIG5vIHdheSBhZmZlY3RzIGFueSBvZiB0aGUgYXJpdGhtZXRpYyBvZiB0aGUgY29udHJhY3QsIGluY2x1ZGluZyB7SUVSQzIwLWJhbGFuY2VPZn0gYW5kIHtJRVJDMjAtdHJhbnNmZXJ9LlxuICAgKi9cbiAgXCJkZWNpbWFscygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8bnVtYmVyPjtcblxuICAvKipcbiAgICogQXRvbWljYWxseSBkZWNyZWFzZXMgdGhlIGFsbG93YW5jZSBncmFudGVkIHRvIGBzcGVuZGVyYCBieSB0aGUgY2FsbGVyLiBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIHthcHByb3ZlfSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgbWl0aWdhdGlvbiBmb3IgcHJvYmxlbXMgZGVzY3JpYmVkIGluIHtJRVJDMjAtYXBwcm92ZX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gYHNwZW5kZXJgIG11c3QgaGF2ZSBhbGxvd2FuY2UgZm9yIHRoZSBjYWxsZXIgb2YgYXQgbGVhc3QgYHN1YnRyYWN0ZWRWYWx1ZWAuXG4gICAqL1xuICBkZWNyZWFzZUFsbG93YW5jZShcbiAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgc3VidHJhY3RlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIEF0b21pY2FsbHkgZGVjcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzcGVuZGVyYCBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciB0aGUgY2FsbGVyIG9mIGF0IGxlYXN0IGBzdWJ0cmFjdGVkVmFsdWVgLlxuICAgKi9cbiAgXCJkZWNyZWFzZUFsbG93YW5jZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIHN1YnRyYWN0ZWRWYWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBBdG9taWNhbGx5IGluY3JlYXNlcyB0aGUgYWxsb3dhbmNlIGdyYW50ZWQgdG8gYHNwZW5kZXJgIGJ5IHRoZSBjYWxsZXIuIFRoaXMgaXMgYW4gYWx0ZXJuYXRpdmUgdG8ge2FwcHJvdmV9IHRoYXQgY2FuIGJlIHVzZWQgYXMgYSBtaXRpZ2F0aW9uIGZvciBwcm9ibGVtcyBkZXNjcmliZWQgaW4ge0lFUkMyMC1hcHByb3ZlfS4gRW1pdHMgYW4ge0FwcHJvdmFsfSBldmVudCBpbmRpY2F0aW5nIHRoZSB1cGRhdGVkIGFsbG93YW5jZS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICovXG4gIGluY3JlYXNlQWxsb3dhbmNlKFxuICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICBhZGRlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIEF0b21pY2FsbHkgaW5jcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLlxuICAgKi9cbiAgXCJpbmNyZWFzZUFsbG93YW5jZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIGFkZGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgdG9rZW4uXG4gICAqL1xuICBuYW1lKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHRva2VuLlxuICAgKi9cbiAgXCJuYW1lKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICAgKi9cbiAgb3duZXIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICovXG4gIFwib3duZXIoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgKi9cbiAgcmVub3VuY2VPd25lcnNoaXAob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAqL1xuICBcInJlbm91bmNlT3duZXJzaGlwKClcIihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzeW1ib2wgb2YgdGhlIHRva2VuLCB1c3VhbGx5IGEgc2hvcnRlciB2ZXJzaW9uIG9mIHRoZSBuYW1lLlxuICAgKi9cbiAgc3ltYm9sKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN5bWJvbCBvZiB0aGUgdG9rZW4sIHVzdWFsbHkgYSBzaG9ydGVyIHZlcnNpb24gb2YgdGhlIG5hbWUuXG4gICAqL1xuICBcInN5bWJvbCgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDMjAtdG90YWxTdXBwbHl9LlxuICAgKi9cbiAgdG90YWxTdXBwbHkob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDMjAtdG90YWxTdXBwbHl9LlxuICAgKi9cbiAgXCJ0b3RhbFN1cHBseSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDMjAtdHJhbnNmZXJ9LiBSZXF1aXJlbWVudHM6IC0gYHJlY2lwaWVudGAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gdGhlIGNhbGxlciBtdXN0IGhhdmUgYSBiYWxhbmNlIG9mIGF0IGxlYXN0IGBhbW91bnRgLlxuICAgKi9cbiAgdHJhbnNmZXIoXG4gICAgcmVjaXBpZW50OiBzdHJpbmcsXG4gICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyfS4gUmVxdWlyZW1lbnRzOiAtIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICovXG4gIFwidHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMyMC10cmFuc2ZlckZyb219LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBUaGlzIGlzIG5vdCByZXF1aXJlZCBieSB0aGUgRUlQLiBTZWUgdGhlIG5vdGUgYXQgdGhlIGJlZ2lubmluZyBvZiB7RVJDMjB9LiBSZXF1aXJlbWVudHM6IC0gYHNlbmRlcmAgYW5kIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzZW5kZXJgIG11c3QgaGF2ZSBhIGJhbGFuY2Ugb2YgYXQgbGVhc3QgYGFtb3VudGAuIC0gdGhlIGNhbGxlciBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciBgYHNlbmRlcmBgJ3MgdG9rZW5zIG9mIGF0IGxlYXN0IGBhbW91bnRgLlxuICAgKi9cbiAgdHJhbnNmZXJGcm9tKFxuICAgIHNlbmRlcjogc3RyaW5nLFxuICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMyMC10cmFuc2ZlckZyb219LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBUaGlzIGlzIG5vdCByZXF1aXJlZCBieSB0aGUgRUlQLiBTZWUgdGhlIG5vdGUgYXQgdGhlIGJlZ2lubmluZyBvZiB7RVJDMjB9LiBSZXF1aXJlbWVudHM6IC0gYHNlbmRlcmAgYW5kIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzZW5kZXJgIG11c3QgaGF2ZSBhIGJhbGFuY2Ugb2YgYXQgbGVhc3QgYGFtb3VudGAuIC0gdGhlIGNhbGxlciBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciBgYHNlbmRlcmBgJ3MgdG9rZW5zIG9mIGF0IGxlYXN0IGBhbW91bnRgLlxuICAgKi9cbiAgXCJ0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgc2VuZGVyOiBzdHJpbmcsXG4gICAgcmVjaXBpZW50OiBzdHJpbmcsXG4gICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAqL1xuICB0cmFuc2Zlck93bmVyc2hpcChcbiAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgKi9cbiAgXCJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiKFxuICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgY2FsbFN0YXRpYzoge1xuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLWFsbG93YW5jZX0uXG4gICAgICovXG4gICAgYWxsb3dhbmNlKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC1hbGxvd2FuY2V9LlxuICAgICAqL1xuICAgIFwiYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYXBwcm92ZX0uIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC1hcHByb3ZlfS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBcImFwcHJvdmUoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgYmFsYW5jZU9mKGFjY291bnQ6IHN0cmluZywgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgXCJiYWxhbmNlT2YoYWRkcmVzcylcIihcbiAgICAgIGFjY291bnQ6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGVjaW1hbHMgdXNlZCB0byBnZXQgaXRzIHVzZXIgcmVwcmVzZW50YXRpb24uIEZvciBleGFtcGxlLCBpZiBgZGVjaW1hbHNgIGVxdWFscyBgMmAsIGEgYmFsYW5jZSBvZiBgNTA1YCB0b2tlbnMgc2hvdWxkIGJlIGRpc3BsYXllZCB0byBhIHVzZXIgYXMgYDUsMDVgIChgNTA1IC8gMTAgKiogMmApLiBUb2tlbnMgdXN1YWxseSBvcHQgZm9yIGEgdmFsdWUgb2YgMTgsIGltaXRhdGluZyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gRXRoZXIgYW5kIFdlaS4gVGhpcyBpcyB0aGUgdmFsdWUge0VSQzIwfSB1c2VzLCB1bmxlc3MgdGhpcyBmdW5jdGlvbiBpcyBvdmVycmlkZGVuOyBOT1RFOiBUaGlzIGluZm9ybWF0aW9uIGlzIG9ubHkgdXNlZCBmb3IgX2Rpc3BsYXlfIHB1cnBvc2VzOiBpdCBpbiBubyB3YXkgYWZmZWN0cyBhbnkgb2YgdGhlIGFyaXRobWV0aWMgb2YgdGhlIGNvbnRyYWN0LCBpbmNsdWRpbmcge0lFUkMyMC1iYWxhbmNlT2Z9IGFuZCB7SUVSQzIwLXRyYW5zZmVyfS5cbiAgICAgKi9cbiAgICBkZWNpbWFscyhvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxudW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRlY2ltYWxzIHVzZWQgdG8gZ2V0IGl0cyB1c2VyIHJlcHJlc2VudGF0aW9uLiBGb3IgZXhhbXBsZSwgaWYgYGRlY2ltYWxzYCBlcXVhbHMgYDJgLCBhIGJhbGFuY2Ugb2YgYDUwNWAgdG9rZW5zIHNob3VsZCBiZSBkaXNwbGF5ZWQgdG8gYSB1c2VyIGFzIGA1LDA1YCAoYDUwNSAvIDEwICoqIDJgKS4gVG9rZW5zIHVzdWFsbHkgb3B0IGZvciBhIHZhbHVlIG9mIDE4LCBpbWl0YXRpbmcgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIEV0aGVyIGFuZCBXZWkuIFRoaXMgaXMgdGhlIHZhbHVlIHtFUkMyMH0gdXNlcywgdW5sZXNzIHRoaXMgZnVuY3Rpb24gaXMgb3ZlcnJpZGRlbjsgTk9URTogVGhpcyBpbmZvcm1hdGlvbiBpcyBvbmx5IHVzZWQgZm9yIF9kaXNwbGF5XyBwdXJwb3NlczogaXQgaW4gbm8gd2F5IGFmZmVjdHMgYW55IG9mIHRoZSBhcml0aG1ldGljIG9mIHRoZSBjb250cmFjdCwgaW5jbHVkaW5nIHtJRVJDMjAtYmFsYW5jZU9mfSBhbmQge0lFUkMyMC10cmFuc2Zlcn0uXG4gICAgICovXG4gICAgXCJkZWNpbWFscygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8bnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgZGVjcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzcGVuZGVyYCBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciB0aGUgY2FsbGVyIG9mIGF0IGxlYXN0IGBzdWJ0cmFjdGVkVmFsdWVgLlxuICAgICAqL1xuICAgIGRlY3JlYXNlQWxsb3dhbmNlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgc3VidHJhY3RlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgZGVjcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzcGVuZGVyYCBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciB0aGUgY2FsbGVyIG9mIGF0IGxlYXN0IGBzdWJ0cmFjdGVkVmFsdWVgLlxuICAgICAqL1xuICAgIFwiZGVjcmVhc2VBbGxvd2FuY2UoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgc3VidHJhY3RlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgaW5jcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLlxuICAgICAqL1xuICAgIGluY3JlYXNlQWxsb3dhbmNlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYWRkZWRWYWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBBdG9taWNhbGx5IGluY3JlYXNlcyB0aGUgYWxsb3dhbmNlIGdyYW50ZWQgdG8gYHNwZW5kZXJgIGJ5IHRoZSBjYWxsZXIuIFRoaXMgaXMgYW4gYWx0ZXJuYXRpdmUgdG8ge2FwcHJvdmV9IHRoYXQgY2FuIGJlIHVzZWQgYXMgYSBtaXRpZ2F0aW9uIGZvciBwcm9ibGVtcyBkZXNjcmliZWQgaW4ge0lFUkMyMC1hcHByb3ZlfS4gRW1pdHMgYW4ge0FwcHJvdmFsfSBldmVudCBpbmRpY2F0aW5nIHRoZSB1cGRhdGVkIGFsbG93YW5jZS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBcImluY3JlYXNlQWxsb3dhbmNlKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFkZGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgdG9rZW4uXG4gICAgICovXG4gICAgbmFtZShvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgdG9rZW4uXG4gICAgICovXG4gICAgXCJuYW1lKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBvd25lcihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcIm93bmVyKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgcmVub3VuY2VPd25lcnNoaXAob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgb3duZXIuIEl0IHdpbGwgbm90IGJlIHBvc3NpYmxlIHRvIGNhbGwgYG9ubHlPd25lcmAgZnVuY3Rpb25zIGFueW1vcmUuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4gTk9URTogUmVub3VuY2luZyBvd25lcnNoaXAgd2lsbCBsZWF2ZSB0aGUgY29udHJhY3Qgd2l0aG91dCBhbiBvd25lciwgdGhlcmVieSByZW1vdmluZyBhbnkgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIHRvIHRoZSBvd25lci5cbiAgICAgKi9cbiAgICBcInJlbm91bmNlT3duZXJzaGlwKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN5bWJvbCBvZiB0aGUgdG9rZW4sIHVzdWFsbHkgYSBzaG9ydGVyIHZlcnNpb24gb2YgdGhlIG5hbWUuXG4gICAgICovXG4gICAgc3ltYm9sKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzeW1ib2wgb2YgdGhlIHRva2VuLCB1c3VhbGx5IGEgc2hvcnRlciB2ZXJzaW9uIG9mIHRoZSBuYW1lLlxuICAgICAqL1xuICAgIFwic3ltYm9sKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtdG90YWxTdXBwbHl9LlxuICAgICAqL1xuICAgIHRvdGFsU3VwcGx5KG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC10b3RhbFN1cHBseX0uXG4gICAgICovXG4gICAgXCJ0b3RhbFN1cHBseSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyfS4gUmVxdWlyZW1lbnRzOiAtIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICAgKi9cbiAgICB0cmFuc2ZlcihcbiAgICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyfS4gUmVxdWlyZW1lbnRzOiAtIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyRnJvbX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFRoaXMgaXMgbm90IHJlcXVpcmVkIGJ5IHRoZSBFSVAuIFNlZSB0aGUgbm90ZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHtFUkMyMH0uIFJlcXVpcmVtZW50czogLSBgc2VuZGVyYCBhbmQgYHJlY2lwaWVudGAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gYHNlbmRlcmAgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC4gLSB0aGUgY2FsbGVyIG11c3QgaGF2ZSBhbGxvd2FuY2UgZm9yIGBgc2VuZGVyYGAncyB0b2tlbnMgb2YgYXQgbGVhc3QgYGFtb3VudGAuXG4gICAgICovXG4gICAgdHJhbnNmZXJGcm9tKFxuICAgICAgc2VuZGVyOiBzdHJpbmcsXG4gICAgICByZWNpcGllbnQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC10cmFuc2ZlckZyb219LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBUaGlzIGlzIG5vdCByZXF1aXJlZCBieSB0aGUgRUlQLiBTZWUgdGhlIG5vdGUgYXQgdGhlIGJlZ2lubmluZyBvZiB7RVJDMjB9LiBSZXF1aXJlbWVudHM6IC0gYHNlbmRlcmAgYW5kIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzZW5kZXJgIG11c3QgaGF2ZSBhIGJhbGFuY2Ugb2YgYXQgbGVhc3QgYGFtb3VudGAuIC0gdGhlIGNhbGxlciBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciBgYHNlbmRlcmBgJ3MgdG9rZW5zIG9mIGF0IGxlYXN0IGBhbW91bnRgLlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc2VuZGVyOiBzdHJpbmcsXG4gICAgICByZWNpcGllbnQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIHRyYW5zZmVyT3duZXJzaGlwKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MpXCIoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG4gIH07XG5cbiAgZmlsdGVyczoge1xuICAgIEFwcHJvdmFsKFxuICAgICAgb3duZXI6IHN0cmluZyB8IG51bGwsXG4gICAgICBzcGVuZGVyOiBzdHJpbmcgfCBudWxsLFxuICAgICAgdmFsdWU6IG51bGxcbiAgICApOiBFdmVudEZpbHRlcjtcblxuICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKFxuICAgICAgcHJldmlvdXNPd25lcjogc3RyaW5nIHwgbnVsbCxcbiAgICAgIG5ld093bmVyOiBzdHJpbmcgfCBudWxsXG4gICAgKTogRXZlbnRGaWx0ZXI7XG5cbiAgICBUcmFuc2Zlcihmcm9tOiBzdHJpbmcgfCBudWxsLCB0bzogc3RyaW5nIHwgbnVsbCwgdmFsdWU6IG51bGwpOiBFdmVudEZpbHRlcjtcbiAgfTtcblxuICBlc3RpbWF0ZUdhczoge1xuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLWFsbG93YW5jZX0uXG4gICAgICovXG4gICAgYWxsb3dhbmNlKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC1hbGxvd2FuY2V9LlxuICAgICAqL1xuICAgIFwiYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYXBwcm92ZX0uIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYXBwcm92ZX0uIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuXG4gICAgICovXG4gICAgXCJhcHByb3ZlKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBiYWxhbmNlT2YoYWNjb3VudDogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgYWNjb3VudDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkZWNpbWFscyB1c2VkIHRvIGdldCBpdHMgdXNlciByZXByZXNlbnRhdGlvbi4gRm9yIGV4YW1wbGUsIGlmIGBkZWNpbWFsc2AgZXF1YWxzIGAyYCwgYSBiYWxhbmNlIG9mIGA1MDVgIHRva2VucyBzaG91bGQgYmUgZGlzcGxheWVkIHRvIGEgdXNlciBhcyBgNSwwNWAgKGA1MDUgLyAxMCAqKiAyYCkuIFRva2VucyB1c3VhbGx5IG9wdCBmb3IgYSB2YWx1ZSBvZiAxOCwgaW1pdGF0aW5nIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBFdGhlciBhbmQgV2VpLiBUaGlzIGlzIHRoZSB2YWx1ZSB7RVJDMjB9IHVzZXMsIHVubGVzcyB0aGlzIGZ1bmN0aW9uIGlzIG92ZXJyaWRkZW47IE5PVEU6IFRoaXMgaW5mb3JtYXRpb24gaXMgb25seSB1c2VkIGZvciBfZGlzcGxheV8gcHVycG9zZXM6IGl0IGluIG5vIHdheSBhZmZlY3RzIGFueSBvZiB0aGUgYXJpdGhtZXRpYyBvZiB0aGUgY29udHJhY3QsIGluY2x1ZGluZyB7SUVSQzIwLWJhbGFuY2VPZn0gYW5kIHtJRVJDMjAtdHJhbnNmZXJ9LlxuICAgICAqL1xuICAgIGRlY2ltYWxzKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGVjaW1hbHMgdXNlZCB0byBnZXQgaXRzIHVzZXIgcmVwcmVzZW50YXRpb24uIEZvciBleGFtcGxlLCBpZiBgZGVjaW1hbHNgIGVxdWFscyBgMmAsIGEgYmFsYW5jZSBvZiBgNTA1YCB0b2tlbnMgc2hvdWxkIGJlIGRpc3BsYXllZCB0byBhIHVzZXIgYXMgYDUsMDVgIChgNTA1IC8gMTAgKiogMmApLiBUb2tlbnMgdXN1YWxseSBvcHQgZm9yIGEgdmFsdWUgb2YgMTgsIGltaXRhdGluZyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gRXRoZXIgYW5kIFdlaS4gVGhpcyBpcyB0aGUgdmFsdWUge0VSQzIwfSB1c2VzLCB1bmxlc3MgdGhpcyBmdW5jdGlvbiBpcyBvdmVycmlkZGVuOyBOT1RFOiBUaGlzIGluZm9ybWF0aW9uIGlzIG9ubHkgdXNlZCBmb3IgX2Rpc3BsYXlfIHB1cnBvc2VzOiBpdCBpbiBubyB3YXkgYWZmZWN0cyBhbnkgb2YgdGhlIGFyaXRobWV0aWMgb2YgdGhlIGNvbnRyYWN0LCBpbmNsdWRpbmcge0lFUkMyMC1iYWxhbmNlT2Z9IGFuZCB7SUVSQzIwLXRyYW5zZmVyfS5cbiAgICAgKi9cbiAgICBcImRlY2ltYWxzKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogQXRvbWljYWxseSBkZWNyZWFzZXMgdGhlIGFsbG93YW5jZSBncmFudGVkIHRvIGBzcGVuZGVyYCBieSB0aGUgY2FsbGVyLiBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIHthcHByb3ZlfSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgbWl0aWdhdGlvbiBmb3IgcHJvYmxlbXMgZGVzY3JpYmVkIGluIHtJRVJDMjAtYXBwcm92ZX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gYHNwZW5kZXJgIG11c3QgaGF2ZSBhbGxvd2FuY2UgZm9yIHRoZSBjYWxsZXIgb2YgYXQgbGVhc3QgYHN1YnRyYWN0ZWRWYWx1ZWAuXG4gICAgICovXG4gICAgZGVjcmVhc2VBbGxvd2FuY2UoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBzdWJ0cmFjdGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgZGVjcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzcGVuZGVyYCBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciB0aGUgY2FsbGVyIG9mIGF0IGxlYXN0IGBzdWJ0cmFjdGVkVmFsdWVgLlxuICAgICAqL1xuICAgIFwiZGVjcmVhc2VBbGxvd2FuY2UoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgc3VidHJhY3RlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBBdG9taWNhbGx5IGluY3JlYXNlcyB0aGUgYWxsb3dhbmNlIGdyYW50ZWQgdG8gYHNwZW5kZXJgIGJ5IHRoZSBjYWxsZXIuIFRoaXMgaXMgYW4gYWx0ZXJuYXRpdmUgdG8ge2FwcHJvdmV9IHRoYXQgY2FuIGJlIHVzZWQgYXMgYSBtaXRpZ2F0aW9uIGZvciBwcm9ibGVtcyBkZXNjcmliZWQgaW4ge0lFUkMyMC1hcHByb3ZlfS4gRW1pdHMgYW4ge0FwcHJvdmFsfSBldmVudCBpbmRpY2F0aW5nIHRoZSB1cGRhdGVkIGFsbG93YW5jZS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBpbmNyZWFzZUFsbG93YW5jZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFkZGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgaW5jcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLlxuICAgICAqL1xuICAgIFwiaW5jcmVhc2VBbGxvd2FuY2UoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYWRkZWRWYWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgdG9rZW4uXG4gICAgICovXG4gICAgbmFtZShvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgdG9rZW4uXG4gICAgICovXG4gICAgXCJuYW1lKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBvd25lcihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcIm93bmVyKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgcmVub3VuY2VPd25lcnNoaXAob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgXCJyZW5vdW5jZU93bmVyc2hpcCgpXCIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3ltYm9sIG9mIHRoZSB0b2tlbiwgdXN1YWxseSBhIHNob3J0ZXIgdmVyc2lvbiBvZiB0aGUgbmFtZS5cbiAgICAgKi9cbiAgICBzeW1ib2wob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN5bWJvbCBvZiB0aGUgdG9rZW4sIHVzdWFsbHkgYSBzaG9ydGVyIHZlcnNpb24gb2YgdGhlIG5hbWUuXG4gICAgICovXG4gICAgXCJzeW1ib2woKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC10b3RhbFN1cHBseX0uXG4gICAgICovXG4gICAgdG90YWxTdXBwbHkob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRvdGFsU3VwcGx5fS5cbiAgICAgKi9cbiAgICBcInRvdGFsU3VwcGx5KClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtdHJhbnNmZXJ9LiBSZXF1aXJlbWVudHM6IC0gYHJlY2lwaWVudGAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gdGhlIGNhbGxlciBtdXN0IGhhdmUgYSBiYWxhbmNlIG9mIGF0IGxlYXN0IGBhbW91bnRgLlxuICAgICAqL1xuICAgIHRyYW5zZmVyKFxuICAgICAgcmVjaXBpZW50OiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyfS4gUmVxdWlyZW1lbnRzOiAtIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC10cmFuc2ZlckZyb219LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBUaGlzIGlzIG5vdCByZXF1aXJlZCBieSB0aGUgRUlQLiBTZWUgdGhlIG5vdGUgYXQgdGhlIGJlZ2lubmluZyBvZiB7RVJDMjB9LiBSZXF1aXJlbWVudHM6IC0gYHNlbmRlcmAgYW5kIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzZW5kZXJgIG11c3QgaGF2ZSBhIGJhbGFuY2Ugb2YgYXQgbGVhc3QgYGFtb3VudGAuIC0gdGhlIGNhbGxlciBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciBgYHNlbmRlcmBgJ3MgdG9rZW5zIG9mIGF0IGxlYXN0IGBhbW91bnRgLlxuICAgICAqL1xuICAgIHRyYW5zZmVyRnJvbShcbiAgICAgIHNlbmRlcjogc3RyaW5nLFxuICAgICAgcmVjaXBpZW50OiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyRnJvbX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFRoaXMgaXMgbm90IHJlcXVpcmVkIGJ5IHRoZSBFSVAuIFNlZSB0aGUgbm90ZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHtFUkMyMH0uIFJlcXVpcmVtZW50czogLSBgc2VuZGVyYCBhbmQgYHJlY2lwaWVudGAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gYHNlbmRlcmAgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC4gLSB0aGUgY2FsbGVyIG11c3QgaGF2ZSBhbGxvd2FuY2UgZm9yIGBgc2VuZGVyYGAncyB0b2tlbnMgb2YgYXQgbGVhc3QgYGFtb3VudGAuXG4gICAgICovXG4gICAgXCJ0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICBzZW5kZXI6IHN0cmluZyxcbiAgICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIHRyYW5zZmVyT3duZXJzaGlwKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3IGFjY291bnQgKGBuZXdPd25lcmApLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuXG4gICAgICovXG4gICAgXCJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcbiAgfTtcblxuICBwb3B1bGF0ZVRyYW5zYWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYWxsb3dhbmNlfS5cbiAgICAgKi9cbiAgICBhbGxvd2FuY2UoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYWxsb3dhbmNlfS5cbiAgICAgKi9cbiAgICBcImFsbG93YW5jZShhZGRyZXNzLGFkZHJlc3MpXCIoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYXBwcm92ZX0uIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC1hcHByb3ZlfS4gUmVxdWlyZW1lbnRzOiAtIGBzcGVuZGVyYCBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBcImFwcHJvdmUoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgYmFsYW5jZU9mKFxuICAgICAgYWNjb3VudDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgYWNjb3VudDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRlY2ltYWxzIHVzZWQgdG8gZ2V0IGl0cyB1c2VyIHJlcHJlc2VudGF0aW9uLiBGb3IgZXhhbXBsZSwgaWYgYGRlY2ltYWxzYCBlcXVhbHMgYDJgLCBhIGJhbGFuY2Ugb2YgYDUwNWAgdG9rZW5zIHNob3VsZCBiZSBkaXNwbGF5ZWQgdG8gYSB1c2VyIGFzIGA1LDA1YCAoYDUwNSAvIDEwICoqIDJgKS4gVG9rZW5zIHVzdWFsbHkgb3B0IGZvciBhIHZhbHVlIG9mIDE4LCBpbWl0YXRpbmcgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIEV0aGVyIGFuZCBXZWkuIFRoaXMgaXMgdGhlIHZhbHVlIHtFUkMyMH0gdXNlcywgdW5sZXNzIHRoaXMgZnVuY3Rpb24gaXMgb3ZlcnJpZGRlbjsgTk9URTogVGhpcyBpbmZvcm1hdGlvbiBpcyBvbmx5IHVzZWQgZm9yIF9kaXNwbGF5XyBwdXJwb3NlczogaXQgaW4gbm8gd2F5IGFmZmVjdHMgYW55IG9mIHRoZSBhcml0aG1ldGljIG9mIHRoZSBjb250cmFjdCwgaW5jbHVkaW5nIHtJRVJDMjAtYmFsYW5jZU9mfSBhbmQge0lFUkMyMC10cmFuc2Zlcn0uXG4gICAgICovXG4gICAgZGVjaW1hbHMob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRlY2ltYWxzIHVzZWQgdG8gZ2V0IGl0cyB1c2VyIHJlcHJlc2VudGF0aW9uLiBGb3IgZXhhbXBsZSwgaWYgYGRlY2ltYWxzYCBlcXVhbHMgYDJgLCBhIGJhbGFuY2Ugb2YgYDUwNWAgdG9rZW5zIHNob3VsZCBiZSBkaXNwbGF5ZWQgdG8gYSB1c2VyIGFzIGA1LDA1YCAoYDUwNSAvIDEwICoqIDJgKS4gVG9rZW5zIHVzdWFsbHkgb3B0IGZvciBhIHZhbHVlIG9mIDE4LCBpbWl0YXRpbmcgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIEV0aGVyIGFuZCBXZWkuIFRoaXMgaXMgdGhlIHZhbHVlIHtFUkMyMH0gdXNlcywgdW5sZXNzIHRoaXMgZnVuY3Rpb24gaXMgb3ZlcnJpZGRlbjsgTk9URTogVGhpcyBpbmZvcm1hdGlvbiBpcyBvbmx5IHVzZWQgZm9yIF9kaXNwbGF5XyBwdXJwb3NlczogaXQgaW4gbm8gd2F5IGFmZmVjdHMgYW55IG9mIHRoZSBhcml0aG1ldGljIG9mIHRoZSBjb250cmFjdCwgaW5jbHVkaW5nIHtJRVJDMjAtYmFsYW5jZU9mfSBhbmQge0lFUkMyMC10cmFuc2Zlcn0uXG4gICAgICovXG4gICAgXCJkZWNpbWFscygpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQXRvbWljYWxseSBkZWNyZWFzZXMgdGhlIGFsbG93YW5jZSBncmFudGVkIHRvIGBzcGVuZGVyYCBieSB0aGUgY2FsbGVyLiBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIHthcHByb3ZlfSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgbWl0aWdhdGlvbiBmb3IgcHJvYmxlbXMgZGVzY3JpYmVkIGluIHtJRVJDMjAtYXBwcm92ZX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gYHNwZW5kZXJgIG11c3QgaGF2ZSBhbGxvd2FuY2UgZm9yIHRoZSBjYWxsZXIgb2YgYXQgbGVhc3QgYHN1YnRyYWN0ZWRWYWx1ZWAuXG4gICAgICovXG4gICAgZGVjcmVhc2VBbGxvd2FuY2UoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBzdWJ0cmFjdGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQXRvbWljYWxseSBkZWNyZWFzZXMgdGhlIGFsbG93YW5jZSBncmFudGVkIHRvIGBzcGVuZGVyYCBieSB0aGUgY2FsbGVyLiBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIHthcHByb3ZlfSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgbWl0aWdhdGlvbiBmb3IgcHJvYmxlbXMgZGVzY3JpYmVkIGluIHtJRVJDMjAtYXBwcm92ZX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gYHNwZW5kZXJgIG11c3QgaGF2ZSBhbGxvd2FuY2UgZm9yIHRoZSBjYWxsZXIgb2YgYXQgbGVhc3QgYHN1YnRyYWN0ZWRWYWx1ZWAuXG4gICAgICovXG4gICAgXCJkZWNyZWFzZUFsbG93YW5jZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBzdWJ0cmFjdGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogQXRvbWljYWxseSBpbmNyZWFzZXMgdGhlIGFsbG93YW5jZSBncmFudGVkIHRvIGBzcGVuZGVyYCBieSB0aGUgY2FsbGVyLiBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIHRvIHthcHByb3ZlfSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgbWl0aWdhdGlvbiBmb3IgcHJvYmxlbXMgZGVzY3JpYmVkIGluIHtJRVJDMjAtYXBwcm92ZX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFJlcXVpcmVtZW50czogLSBgc3BlbmRlcmAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuXG4gICAgICovXG4gICAgaW5jcmVhc2VBbGxvd2FuY2UoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhZGRlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgaW5jcmVhc2VzIHRoZSBhbGxvd2FuY2UgZ3JhbnRlZCB0byBgc3BlbmRlcmAgYnkgdGhlIGNhbGxlci4gVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byB7YXBwcm92ZX0gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1pdGlnYXRpb24gZm9yIHByb2JsZW1zIGRlc2NyaWJlZCBpbiB7SUVSQzIwLWFwcHJvdmV9LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBSZXF1aXJlbWVudHM6IC0gYHNwZW5kZXJgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLlxuICAgICAqL1xuICAgIFwiaW5jcmVhc2VBbGxvd2FuY2UoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYWRkZWRWYWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSB0b2tlbi5cbiAgICAgKi9cbiAgICBuYW1lKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHRva2VuLlxuICAgICAqL1xuICAgIFwibmFtZSgpXCIob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBvd25lcihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIFwib3duZXIoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIExlYXZlcyB0aGUgY29udHJhY3Qgd2l0aG91dCBvd25lci4gSXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gY2FsbCBgb25seU93bmVyYCBmdW5jdGlvbnMgYW55bW9yZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLiBOT1RFOiBSZW5vdW5jaW5nIG93bmVyc2hpcCB3aWxsIGxlYXZlIHRoZSBjb250cmFjdCB3aXRob3V0IGFuIG93bmVyLCB0aGVyZWJ5IHJlbW92aW5nIGFueSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgb25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLlxuICAgICAqL1xuICAgIHJlbm91bmNlT3duZXJzaGlwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjb250cmFjdCB3aXRob3V0IG93bmVyLiBJdCB3aWxsIG5vdCBiZSBwb3NzaWJsZSB0byBjYWxsIGBvbmx5T3duZXJgIGZ1bmN0aW9ucyBhbnltb3JlLiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIuIE5PVEU6IFJlbm91bmNpbmcgb3duZXJzaGlwIHdpbGwgbGVhdmUgdGhlIGNvbnRyYWN0IHdpdGhvdXQgYW4gb3duZXIsIHRoZXJlYnkgcmVtb3ZpbmcgYW55IGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBvbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuXG4gICAgICovXG4gICAgXCJyZW5vdW5jZU93bmVyc2hpcCgpXCIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzeW1ib2wgb2YgdGhlIHRva2VuLCB1c3VhbGx5IGEgc2hvcnRlciB2ZXJzaW9uIG9mIHRoZSBuYW1lLlxuICAgICAqL1xuICAgIHN5bWJvbChvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzeW1ib2wgb2YgdGhlIHRva2VuLCB1c3VhbGx5IGEgc2hvcnRlciB2ZXJzaW9uIG9mIHRoZSBuYW1lLlxuICAgICAqL1xuICAgIFwic3ltYm9sKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC10b3RhbFN1cHBseX0uXG4gICAgICovXG4gICAgdG90YWxTdXBwbHkob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMjAtdG90YWxTdXBwbHl9LlxuICAgICAqL1xuICAgIFwidG90YWxTdXBwbHkoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyfS4gUmVxdWlyZW1lbnRzOiAtIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICAgKi9cbiAgICB0cmFuc2ZlcihcbiAgICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyfS4gUmVxdWlyZW1lbnRzOiAtIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIHRoZSBjYWxsZXIgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHJlY2lwaWVudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzIwLXRyYW5zZmVyRnJvbX0uIEVtaXRzIGFuIHtBcHByb3ZhbH0gZXZlbnQgaW5kaWNhdGluZyB0aGUgdXBkYXRlZCBhbGxvd2FuY2UuIFRoaXMgaXMgbm90IHJlcXVpcmVkIGJ5IHRoZSBFSVAuIFNlZSB0aGUgbm90ZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHtFUkMyMH0uIFJlcXVpcmVtZW50czogLSBgc2VuZGVyYCBhbmQgYHJlY2lwaWVudGAgY2Fubm90IGJlIHRoZSB6ZXJvIGFkZHJlc3MuIC0gYHNlbmRlcmAgbXVzdCBoYXZlIGEgYmFsYW5jZSBvZiBhdCBsZWFzdCBgYW1vdW50YC4gLSB0aGUgY2FsbGVyIG11c3QgaGF2ZSBhbGxvd2FuY2UgZm9yIGBgc2VuZGVyYGAncyB0b2tlbnMgb2YgYXQgbGVhc3QgYGFtb3VudGAuXG4gICAgICovXG4gICAgdHJhbnNmZXJGcm9tKFxuICAgICAgc2VuZGVyOiBzdHJpbmcsXG4gICAgICByZWNpcGllbnQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMyMC10cmFuc2ZlckZyb219LiBFbWl0cyBhbiB7QXBwcm92YWx9IGV2ZW50IGluZGljYXRpbmcgdGhlIHVwZGF0ZWQgYWxsb3dhbmNlLiBUaGlzIGlzIG5vdCByZXF1aXJlZCBieSB0aGUgRUlQLiBTZWUgdGhlIG5vdGUgYXQgdGhlIGJlZ2lubmluZyBvZiB7RVJDMjB9LiBSZXF1aXJlbWVudHM6IC0gYHNlbmRlcmAgYW5kIGByZWNpcGllbnRgIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLiAtIGBzZW5kZXJgIG11c3QgaGF2ZSBhIGJhbGFuY2Ugb2YgYXQgbGVhc3QgYGFtb3VudGAuIC0gdGhlIGNhbGxlciBtdXN0IGhhdmUgYWxsb3dhbmNlIGZvciBgYHNlbmRlcmBgJ3MgdG9rZW5zIG9mIGF0IGxlYXN0IGBhbW91bnRgLlxuICAgICAqL1xuICAgIFwidHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgc2VuZGVyOiBzdHJpbmcsXG4gICAgICByZWNpcGllbnQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLlxuICAgICAqL1xuICAgIHRyYW5zZmVyT3duZXJzaGlwKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MpXCIoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG4gIH07XG59XG4iXX0=