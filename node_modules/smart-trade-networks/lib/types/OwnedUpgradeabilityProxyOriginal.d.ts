/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OwnedUpgradeabilityProxyOriginalInterface
  extends ethers.utils.Interface {
  functions: {
    "implementation()": FunctionFragment;
    "proxyOwner()": FunctionFragment;
    "transferProxyOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferProxyOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferProxyOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "ProxyOwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProxyOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class OwnedUpgradeabilityProxyOriginal extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OwnedUpgradeabilityProxyOriginalInterface;

  functions: {
    /**
     * Tells the address of the current implementation return address of the current implementation
     */
    implementation(
      overrides?: CallOverrides
    ): Promise<[string] & { impl: string }>;

    /**
     * Tells the address of the current implementation return address of the current implementation
     */
    "implementation()"(
      overrides?: CallOverrides
    ): Promise<[string] & { impl: string }>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    proxyOwner(
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "proxyOwner()"(
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferProxyOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferProxyOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy.
     * @param implementation representing the address of the new implementation to be set.
     */
    upgradeTo(
      implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy.
     * @param implementation representing the address of the new implementation to be set.
     */
    "upgradeTo(address)"(
      implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
     * @param implementation representing the address of the new implementation to be set.
     */
    upgradeToAndCall(
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
     * @param implementation representing the address of the new implementation to be set.
     */
    "upgradeToAndCall(address,bytes)"(
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Tells the address of the current implementation return address of the current implementation
   */
  implementation(overrides?: CallOverrides): Promise<string>;

  /**
   * Tells the address of the current implementation return address of the current implementation
   */
  "implementation()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Tells the address of the owner return the address of the owner
   */
  proxyOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Tells the address of the owner return the address of the owner
   */
  "proxyOwner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  transferProxyOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  "transferProxyOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the proxy owner to upgrade the current version of the proxy.
   * @param implementation representing the address of the new implementation to be set.
   */
  upgradeTo(
    implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the proxy owner to upgrade the current version of the proxy.
   * @param implementation representing the address of the new implementation to be set.
   */
  "upgradeTo(address)"(
    implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
   * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
   * @param implementation representing the address of the new implementation to be set.
   */
  upgradeToAndCall(
    implementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
   * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
   * @param implementation representing the address of the new implementation to be set.
   */
  "upgradeToAndCall(address,bytes)"(
    implementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Tells the address of the current implementation return address of the current implementation
     */
    implementation(overrides?: CallOverrides): Promise<string>;

    /**
     * Tells the address of the current implementation return address of the current implementation
     */
    "implementation()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    proxyOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "proxyOwner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferProxyOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferProxyOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy.
     * @param implementation representing the address of the new implementation to be set.
     */
    upgradeTo(implementation: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy.
     * @param implementation representing the address of the new implementation to be set.
     */
    "upgradeTo(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
     * @param implementation representing the address of the new implementation to be set.
     */
    upgradeToAndCall(
      implementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
     * @param implementation representing the address of the new implementation to be set.
     */
    "upgradeToAndCall(address,bytes)"(
      implementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ProxyOwnershipTransferred(previousOwner: null, newOwner: null): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimateGas: {
    /**
     * Tells the address of the current implementation return address of the current implementation
     */
    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Tells the address of the current implementation return address of the current implementation
     */
    "implementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    proxyOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "proxyOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferProxyOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferProxyOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy.
     * @param implementation representing the address of the new implementation to be set.
     */
    upgradeTo(
      implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy.
     * @param implementation representing the address of the new implementation to be set.
     */
    "upgradeTo(address)"(
      implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
     * @param implementation representing the address of the new implementation to be set.
     */
    upgradeToAndCall(
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
     * @param implementation representing the address of the new implementation to be set.
     */
    "upgradeToAndCall(address,bytes)"(
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Tells the address of the current implementation return address of the current implementation
     */
    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Tells the address of the current implementation return address of the current implementation
     */
    "implementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    proxyOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Tells the address of the owner return the address of the owner
     */
    "proxyOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferProxyOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferProxyOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy.
     * @param implementation representing the address of the new implementation to be set.
     */
    upgradeTo(
      implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy.
     * @param implementation representing the address of the new implementation to be set.
     */
    "upgradeTo(address)"(
      implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
     * @param implementation representing the address of the new implementation to be set.
     */
    upgradeToAndCall(
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call.
     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function signature of the implementation to be called with the needed payload
     * @param implementation representing the address of the new implementation to be set.
     */
    "upgradeToAndCall(address,bytes)"(
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
