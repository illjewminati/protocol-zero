{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/common/steps_modal/base_step_modal.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { getStepTitle, makeGetProgress } from '../../../util/steps';\nimport { ComponentUnmountedException } from '../../exceptions/component_unmounted_exception';\nimport { ModalStatusTextLight, ModalText, StepStatus, StepStatusConfirmOnMetamask, StepStatusDone, StepStatusError, StepStatusLoading, Title } from './steps_common';\nimport { StepsProgress } from './steps_progress';\nimport { StepPendingTime } from './step_pending_time';\nexport class BaseStepModal extends React.Component {\n  constructor(props) {\n    super(props); // we set the value of the estimated tx time, so that the progress bar length is not updated in the middle of the step\n\n    _defineProperty(this, \"state\", {\n      status: StepStatus.ConfirmOnMetamask,\n      loadingStarted: null\n    });\n\n    _defineProperty(this, \"_estimatedTxTimeMs\", void 0);\n\n    _defineProperty(this, \"_isUnmounted\", false);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      await this._runAction();\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      this._isUnmounted = true;\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        confirmCaption,\n        loadingCaption,\n        doneCaption,\n        errorCaption,\n        loadingFooterCaption,\n        doneFooterCaption,\n        title\n      } = this.props;\n      const {\n        loadingStarted,\n        status\n      } = this.state;\n\n      const retry = () => this._retry();\n\n      let content;\n      let bodyText;\n      let footer = this.props.showPartialProgress ? null : /*#__PURE__*/_jsxDEV(ModalStatusTextLight, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 62\n      }, this);\n\n      switch (status) {\n        case StepStatus.Loading:\n          content = /*#__PURE__*/_jsxDEV(StepStatusLoading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 27\n          }, this);\n          bodyText = /*#__PURE__*/_jsxDEV(ModalText, {\n            children: loadingCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 28\n          }, this);\n          break;\n\n        case StepStatus.Done:\n          content = /*#__PURE__*/_jsxDEV(StepStatusDone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 27\n          }, this);\n          bodyText = /*#__PURE__*/_jsxDEV(ModalText, {\n            children: doneCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 28\n          }, this);\n          footer = /*#__PURE__*/_jsxDEV(ModalStatusTextLight, {\n            children: doneFooterCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 26\n          }, this);\n          break;\n\n        case StepStatus.Error:\n          content = /*#__PURE__*/_jsxDEV(StepStatusError, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 27\n          }, this);\n          bodyText = /*#__PURE__*/_jsxDEV(ModalText, {\n            children: [errorCaption, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"modal-text-clickable\",\n              onClick: retry,\n              children: \"Click here to try again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this);\n          break;\n\n        default:\n          content = /*#__PURE__*/_jsxDEV(StepStatusConfirmOnMetamask, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 27\n          }, this);\n          bodyText = /*#__PURE__*/_jsxDEV(ModalText, {\n            children: confirmCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 28\n          }, this);\n          footer = /*#__PURE__*/_jsxDEV(ModalStatusTextLight, {\n            children: loadingFooterCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 26\n          }, this);\n          break;\n      }\n\n      let getProgress = () => 0;\n\n      if (status === StepStatus.Loading && this.props.showPartialProgress && loadingStarted !== null) {\n        getProgress = makeGetProgress(loadingStarted, this._estimatedTxTimeMs);\n      } else if (status === StepStatus.Done) {\n        getProgress = () => 100;\n      }\n\n      const stepsProgress = this.props.buildStepsProgress({\n        title: getStepTitle(this.props.step),\n        active: true,\n        progress: getProgress,\n        isLong: false\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [content, /*#__PURE__*/_jsxDEV(Title, {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this), bodyText, /*#__PURE__*/_jsxDEV(StepsProgress, {\n          steps: stepsProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }, this), this.props.showPartialProgress && /*#__PURE__*/_jsxDEV(ModalStatusTextLight, {\n          children: /*#__PURE__*/_jsxDEV(StepPendingTime, {\n            txStarted: loadingStarted,\n            stepStatus: status,\n            estimatedTxTimeMs: this._estimatedTxTimeMs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), footer]\n      }, void 0, true);\n    });\n\n    _defineProperty(this, \"_runAction\", async () => {\n      const onLoading = () => {\n        this._throwIfUnmounted();\n\n        this.setState({\n          status: StepStatus.Loading,\n          loadingStarted: Date.now()\n        });\n      };\n\n      const onDone = () => {\n        this._throwIfUnmounted();\n\n        this.setState({\n          status: StepStatus.Done\n        });\n      };\n\n      const onError = err => {\n        if (err instanceof ComponentUnmountedException) {\n          return;\n        }\n\n        this.setState({\n          status: StepStatus.Error\n        });\n      };\n\n      return this.props.runAction({\n        onLoading,\n        onDone,\n        onError\n      });\n    });\n\n    _defineProperty(this, \"_retry\", async () => {\n      this.setState({\n        status: StepStatus.ConfirmOnMetamask\n      });\n      await this._runAction();\n    });\n\n    _defineProperty(this, \"_throwIfUnmounted\", () => {\n      if (this._isUnmounted) {\n        throw new ComponentUnmountedException('BaseStepModal');\n      }\n    });\n\n    this._estimatedTxTimeMs = props.estimatedTxTimeMs;\n  }\n\n}","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/common/steps_modal/base_step_modal.tsx"],"names":["React","getStepTitle","makeGetProgress","ComponentUnmountedException","ModalStatusTextLight","ModalText","StepStatus","StepStatusConfirmOnMetamask","StepStatusDone","StepStatusError","StepStatusLoading","Title","StepsProgress","StepPendingTime","BaseStepModal","Component","constructor","props","status","ConfirmOnMetamask","loadingStarted","_runAction","_isUnmounted","confirmCaption","loadingCaption","doneCaption","errorCaption","loadingFooterCaption","doneFooterCaption","title","state","retry","_retry","content","bodyText","footer","showPartialProgress","Loading","Done","Error","getProgress","_estimatedTxTimeMs","stepsProgress","buildStepsProgress","step","active","progress","isLong","onLoading","_throwIfUnmounted","setState","Date","now","onDone","onError","err","runAction","estimatedTxTimeMs"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { Step } from '../../../types/steps-modal';\n\nimport { getStepTitle, makeGetProgress } from '../../../util/steps';\nimport { ComponentUnmountedException } from '../../exceptions/component_unmounted_exception';\n\nimport {\n    ModalStatusTextLight,\n    ModalText,\n    StepStatus,\n    StepStatusConfirmOnMetamask,\n    StepStatusDone,\n    StepStatusError,\n    StepStatusLoading,\n    Title,\n} from './steps_common';\nimport { GetProgress, StepItem, StepsProgress } from './steps_progress';\nimport { StepPendingTime } from './step_pending_time';\n\ntype RunAction = ({\n    onLoading,\n    onDone,\n    onError,\n}: {\n    onLoading: () => any;\n    onDone: () => any;\n    onError: (err: Error | ComponentUnmountedException) => any;\n}) => Promise<any>;\n\ninterface Props {\n    buildStepsProgress: (currentStepItem: StepItem) => StepItem[];\n    estimatedTxTimeMs: number;\n    runAction: RunAction;\n    title: string;\n    confirmCaption: string;\n    loadingCaption: string;\n    loadingFooterCaption: string;\n    doneFooterCaption: string;\n    doneCaption: string;\n    errorCaption: string;\n    step: Step;\n    showPartialProgress?: boolean;\n}\n\ninterface State {\n    status: StepStatus;\n    loadingStarted: number | null;\n}\n\nexport class BaseStepModal extends React.Component<Props, State> {\n    public state: State = {\n        status: StepStatus.ConfirmOnMetamask,\n        loadingStarted: null,\n    };\n\n    private readonly _estimatedTxTimeMs: number;\n    private _isUnmounted: boolean = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        // we set the value of the estimated tx time, so that the progress bar length is not updated in the middle of the step\n        this._estimatedTxTimeMs = props.estimatedTxTimeMs;\n    }\n\n    public componentDidMount = async () => {\n        await this._runAction();\n    };\n\n    public componentWillUnmount = () => {\n        this._isUnmounted = true;\n    };\n\n    public render = () => {\n        const {\n            confirmCaption,\n            loadingCaption,\n            doneCaption,\n            errorCaption,\n            loadingFooterCaption,\n            doneFooterCaption,\n            title,\n        } = this.props;\n        const { loadingStarted, status } = this.state;\n        const retry = () => this._retry();\n        let content: ReactNode;\n        let bodyText: ReactNode;\n        let footer = this.props.showPartialProgress ? null : <ModalStatusTextLight>{}</ModalStatusTextLight>;\n        switch (status) {\n            case StepStatus.Loading:\n                content = <StepStatusLoading />;\n                bodyText = <ModalText>{loadingCaption}</ModalText>;\n                break;\n            case StepStatus.Done:\n                content = <StepStatusDone />;\n                bodyText = <ModalText>{doneCaption}</ModalText>;\n                footer = <ModalStatusTextLight>{doneFooterCaption}</ModalStatusTextLight>;\n                break;\n            case StepStatus.Error:\n                content = <StepStatusError />;\n                bodyText = (\n                    <ModalText>\n                        {errorCaption}\n                        <br />\n                        <span className=\"modal-text-clickable\" onClick={retry}>Click here to try again</span>\n                    </ModalText>\n                );\n                break;\n            default:\n                content = <StepStatusConfirmOnMetamask />;\n                bodyText = <ModalText>{confirmCaption}</ModalText>;\n                footer = <ModalStatusTextLight>{loadingFooterCaption}</ModalStatusTextLight>;\n                break;\n        }\n\n        let getProgress: GetProgress = () => 0;\n\n        if (status === StepStatus.Loading && this.props.showPartialProgress && loadingStarted !== null) {\n            getProgress = makeGetProgress(loadingStarted, this._estimatedTxTimeMs);\n        } else if (status === StepStatus.Done) {\n            getProgress = () => 100;\n        }\n\n        const stepsProgress = this.props.buildStepsProgress({\n            title: getStepTitle(this.props.step),\n            active: true,\n            progress: getProgress,\n            isLong: false,\n        });\n\n        return (\n            <>\n                {content}\n                <Title>{title}</Title>\n                {bodyText}\n                <StepsProgress steps={stepsProgress} />\n                {this.props.showPartialProgress && (\n                    <ModalStatusTextLight>\n                        <StepPendingTime\n                            txStarted={loadingStarted}\n                            stepStatus={status}\n                            estimatedTxTimeMs={this._estimatedTxTimeMs}\n                        />\n                    </ModalStatusTextLight>\n                )}\n                {footer}\n            </>\n        );\n    };\n\n    private readonly _runAction = async () => {\n        \n        const onLoading = () => {\n            this._throwIfUnmounted();\n            this.setState({\n                status: StepStatus.Loading,\n                loadingStarted: Date.now(),\n            });\n        };\n        const onDone = () => {\n            this._throwIfUnmounted();\n            this.setState({\n                status: StepStatus.Done,\n            });\n        };\n        const onError = (err: Error | ComponentUnmountedException) => {\n            if (err instanceof ComponentUnmountedException) {\n                return;\n            }\n            this.setState({\n                status: StepStatus.Error,\n            });\n        };\n\n        return this.props.runAction({\n            onLoading,\n            onDone,\n            onError,\n        });\n    };\n\n    private readonly _retry = async () => {\n        this.setState({ status: StepStatus.ConfirmOnMetamask });\n\n        await this._runAction();\n    };\n\n    private readonly _throwIfUnmounted = () => {\n        if (this._isUnmounted) {\n            throw new ComponentUnmountedException('BaseStepModal');\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}