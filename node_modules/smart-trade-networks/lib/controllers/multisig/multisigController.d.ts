import { BigNumberish, BytesLike, ContractTransaction, Signer, Overrides } from "ethers";
import { MultisigWallet } from "../../types";
import { ProviderOrSigner } from "../../localTypes";
import { DecodedCall } from "../helpers/abiDecoderController";
declare type TransactionData = [string, string, BigNumberish, string, boolean, BigNumberish] & {
    description: string;
    destination: string;
    value: BigNumberish;
    data: string;
    executed: boolean;
    timestamp: BigNumberish;
};
export declare class MultisigController {
    protected _signer: Signer;
    private _multisigAddress;
    private _multisigContract?;
    constructor(multisigAddress: string, signerOrProvider: ProviderOrSigner);
    static deployMultisigContract(signer: Signer, owners: Array<string>, requirement: BigNumberish): Promise<MultisigWallet>;
    private _getMultisigContract;
    /**Getters */
    getContract(): Promise<MultisigWallet>;
    isConfirmed(transactionId: BigNumberish): Promise<boolean>;
    getConfirmationCount(transactionId: BigNumberish): Promise<BigNumberish>;
    getTransactionCount(pending: boolean, executed: boolean): Promise<BigNumberish>;
    getConfirmations(transactionId: BigNumberish): Promise<Array<string>>;
    getTransactionIds(from: BigNumberish, to: BigNumberish, pending: boolean, executed: boolean): Promise<Array<BigNumberish>>;
    getOwners(): Promise<Array<string>>;
    getTransaction(transactionId: BigNumberish): Promise<TransactionData>;
    getResourceActionsContract(): Promise<string>;
    getRequiredSignatures(): Promise<BigNumberish>;
    isOwner(address: string): Promise<boolean>;
    /**Setters */
    submitTransaction(destination: string, value: BigNumberish, data: BytesLike, description: string, overrides: Overrides): Promise<ContractTransaction>;
    confirmTransaction(transactionId: BigNumberish, overrides: Overrides): Promise<ContractTransaction>;
    revokeConfirmation(transactionId: BigNumberish): Promise<ContractTransaction>;
    executeTransaction(transactionId: BigNumberish): Promise<ContractTransaction>;
    /** Helpers */
    static encodeCall(functionName: string, args?: any[]): string;
    static decodeCall(data: string): DecodedCall | null;
}
export {};
