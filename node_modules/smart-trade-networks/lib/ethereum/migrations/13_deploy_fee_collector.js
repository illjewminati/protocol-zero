const FeeCollectorDeployer = artifacts.require('FeeCollectorDeployer.sol');
const FeeCollector = artifacts.require('FeeCollector.sol');
const Proxy = artifacts.require('OwnedUpgradeabilityProxy.sol')
const Web3 = require("web3")

module.exports = async deployer => {

    /** FeeCollector Deployer needs to deploy both Proxy and FeeCollector */
    /** 1. Deploy FeeCollectorDeployer */
    /** 2. Deploy Proxy with salt */
    /** 3. Deploy FeeCollector with salt */
    /** 4. Change ownership of Proxy */
    /** 5. Upgrade proxy to FeeCollector implementation */

	await deployer.deploy(FeeCollectorDeployer);

    const salt = Math.round(Math.random() * 100000000000);
    console.log("salt", salt)

    const feeCollectorDeployer = await FeeCollectorDeployer.deployed();

    /** Get Proxy and FeeCollector bytecodes */
    const proxyBytecode = await feeCollectorDeployer.getProxyBytecode();
    const feeCollectorBytecode = await feeCollectorDeployer.getFeeCollectorBytecode();

    /** Precomputes Proxy and FeeCollector addresses */
    const proxyPrecomputed = await feeCollectorDeployer.getAddress(proxyBytecode, salt);
    const feeCollectorPrecomputed = await feeCollectorDeployer.getAddress(feeCollectorBytecode, salt);
    
    const proxyPrecomputedW3 = buildCreate2Address(feeCollectorDeployer.address, numberToUint256(salt), proxyBytecode);
    console.log("proxyPrecomputed", proxyPrecomputed)
    console.log("proxyPrecomputedW3", proxyPrecomputedW3)
    /** Deploys Proxy and FeeCollector */
    await feeCollectorDeployer.deployPrecomputed(proxyPrecomputed, salt);
    await feeCollectorDeployer.deployPrecomputed(feeCollectorPrecomputed, salt);

    // // /** Loads Deployed proxy */
    const proxyContract = await Proxy.at(proxyPrecomputed);
    
    // /** Changes proxy owner */
    await feeCollectorDeployer.setProxyOwner(owner, proxyPrecomputed);

    // /** Sets contract implementation */
    const initData = encodeCall('initialize', ['address', 'uint256'], ["0x23C6599aAdF44Be7cbaD6D9051bb4C2255b2f713", "3"]);
    await proxyContract.upgradeToAndCall(feeCollectorPrecomputed, initData);

    // /** Loads FeeCollector contract  */
    const feeCollector = await FeeCollector.at(proxyPrecomputed);

    // /** Checks for fee */
    const getFee = await feeCollector.getFee();
    console.log(getFee);


}

const numberToUint256 = (value) => {
    const hex = value.toString(16)
    return `0x${'0'.repeat(64-hex.length)}${hex}`
}

function encodeCall(name, args, values) {
	const methodId = abi.methodID(name, args).toString('hex');
	const params = abi.rawEncode(args, values).toString('hex');
	return '0x' + methodId + params;
}

const buildCreate2Address = (creatorAddress, saltHex, byteCode) => {
    const web3 = new Web3()
    return `0x${web3.utils.sha3(`0x${[
      'ff',
      creatorAddress,
      saltHex,
      web3.utils.sha3(byteCode)
    ].map(x => x.replace(/0x/, ''))
    .join('')}`).slice(-40)}`.toLowerCase()
}