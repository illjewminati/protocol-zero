/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRootChainInterface extends ethers.utils.Interface {
  functions: {
    "slash()": FunctionFragment;
    "submitHeaderBlock(bytes,bytes)": FunctionFragment;
    "getLastChildBlock()": FunctionFragment;
    "currentHeaderBlock()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "slash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitHeaderBlock",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastChildBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentHeaderBlock",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitHeaderBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastChildBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentHeaderBlock",
    data: BytesLike
  ): Result;

  events: {
    "NewHeaderBlock(address,uint256,uint256,uint256,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewHeaderBlock"): EventFragment;
}

export class IRootChain extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRootChainInterface;

  functions: {
    slash(overrides?: Overrides): Promise<ContractTransaction>;

    "slash()"(overrides?: Overrides): Promise<ContractTransaction>;

    submitHeaderBlock(
      data: BytesLike,
      sigs: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitHeaderBlock(bytes,bytes)"(
      data: BytesLike,
      sigs: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLastChildBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLastChildBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentHeaderBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentHeaderBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  slash(overrides?: Overrides): Promise<ContractTransaction>;

  "slash()"(overrides?: Overrides): Promise<ContractTransaction>;

  submitHeaderBlock(
    data: BytesLike,
    sigs: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitHeaderBlock(bytes,bytes)"(
    data: BytesLike,
    sigs: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLastChildBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastChildBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentHeaderBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "currentHeaderBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    slash(overrides?: CallOverrides): Promise<void>;

    "slash()"(overrides?: CallOverrides): Promise<void>;

    submitHeaderBlock(
      data: BytesLike,
      sigs: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitHeaderBlock(bytes,bytes)"(
      data: BytesLike,
      sigs: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getLastChildBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastChildBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentHeaderBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "currentHeaderBlock()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    NewHeaderBlock(
      proposer: string | null,
      headerBlockId: BigNumberish | null,
      reward: BigNumberish | null,
      start: null,
      end: null,
      root: null
    ): EventFilter;
  };

  estimateGas: {
    slash(overrides?: Overrides): Promise<BigNumber>;

    "slash()"(overrides?: Overrides): Promise<BigNumber>;

    submitHeaderBlock(
      data: BytesLike,
      sigs: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitHeaderBlock(bytes,bytes)"(
      data: BytesLike,
      sigs: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLastChildBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastChildBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentHeaderBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "currentHeaderBlock()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    slash(overrides?: Overrides): Promise<PopulatedTransaction>;

    "slash()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    submitHeaderBlock(
      data: BytesLike,
      sigs: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitHeaderBlock(bytes,bytes)"(
      data: BytesLike,
      sigs: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLastChildBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLastChildBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentHeaderBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentHeaderBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
