import { BigNumberish, ContractTransaction } from "ethers";
import { FeeCollector } from "../../types";
import { ProviderOrSigner } from "../../localTypes";
import { DecodedCall } from "../helpers/abiDecoderController";
export declare class FeeCollectorController {
    private _signer;
    private _feeCollectorAddress;
    private _feeCollectorContract?;
    constructor(feeCollectorAddress: string, signerOrProvider: ProviderOrSigner);
    private _getcontract;
    /**Getters */
    getContract(): Promise<FeeCollector>;
    getFeeByMultisig(address: string): Promise<BigNumberish>;
    getFee(): Promise<BigNumberish>;
    getFeeCollector(): Promise<string>;
    isWhitelisted(address: string): Promise<boolean>;
    /**Setters */
    setFeeCollector(address: string): Promise<ContractTransaction>;
    setFee(newFee: BigNumberish): Promise<ContractTransaction>;
    setFeeByMultisig(address: string, newFee: BigNumberish): Promise<ContractTransaction>;
    whitelistMultisig(address: string, allow: boolean): Promise<ContractTransaction>;
    withdraw(tokenAddress: string): Promise<ContractTransaction>;
    /** Helpers */
    static encodeCall(functionName: string, args?: any[]): string;
    static decodeCall(data: string): DecodedCall | null;
}
