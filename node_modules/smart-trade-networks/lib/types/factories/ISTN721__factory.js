"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ISTN721__factory = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ethers = require("ethers");

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
var ISTN721__factory = /*#__PURE__*/function () {
  function ISTN721__factory() {
    (0, _classCallCheck2["default"])(this, ISTN721__factory);
  }

  (0, _createClass2["default"])(ISTN721__factory, null, [{
    key: "connect",
    value: function connect(address, signerOrProvider) {
      return new _ethers.Contract(address, _abi, signerOrProvider);
    }
  }]);
  return ISTN721__factory;
}();

exports.ISTN721__factory = ISTN721__factory;
var _abi = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "address",
    name: "stn721Child",
    type: "address"
  }, {
    indexed: false,
    internalType: "uint256",
    name: "tokenId",
    type: "uint256"
  }],
  name: "ChildAttached",
  type: "event"
}, {
  inputs: [{
    internalType: "address",
    name: "stn721Child",
    type: "address"
  }, {
    internalType: "uint256",
    name: "tokenId",
    type: "uint256"
  }],
  name: "attachChild",
  outputs: [{
    internalType: "bool",
    name: "",
    type: "bool"
  }],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "bool",
    name: "divisible",
    type: "bool"
  }, {
    internalType: "uint256[]",
    name: "tokenIds",
    type: "uint256[]"
  }, {
    internalType: "address",
    name: "receiver",
    type: "address"
  }],
  name: "mint",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [],
  name: "getParentAddress",
  outputs: [{
    internalType: "address",
    name: "",
    type: "address"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [],
  name: "getParentId",
  outputs: [{
    internalType: "uint256",
    name: "",
    type: "uint256"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "tokenId",
    type: "uint256"
  }],
  name: "isDivisible",
  outputs: [{
    internalType: "bool",
    name: "",
    type: "bool"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "tokenId",
    type: "uint256"
  }],
  name: "getChildIndexById",
  outputs: [{
    internalType: "address",
    name: "",
    type: "address"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "stn721",
    type: "address"
  }],
  name: "getChildIndexByAddress",
  outputs: [{
    internalType: "uint256",
    name: "",
    type: "uint256"
  }],
  stateMutability: "view",
  type: "function"
}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,