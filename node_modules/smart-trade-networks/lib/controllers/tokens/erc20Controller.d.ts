import { BigNumberish, ContractTransaction, EventFilter } from "ethers";
import { ERC20 } from "../../types/ERC20";
import { DecodedCall } from "../helpers/abiDecoderController";
import { ProviderOrSigner } from "../../localTypes";
import { OwnableController } from "../helpers/ownableController";
export interface ContractEvent {
    from: string;
    to: string;
    value: BigNumberish;
    event: any;
}
export declare class ERC20Controller extends OwnableController {
    private _erc20Address;
    private _erc20Contract?;
    constructor(erc20Address: string, signerOrProvider: ProviderOrSigner);
    private _getERC20Contract;
    /**Getters */
    getContract(): Promise<ERC20>;
    balanceOf(address: string): Promise<BigNumberish>;
    getName(): Promise<string>;
    getSymbol(): Promise<string>;
    getTotalSupply(): Promise<BigNumberish>;
    getDecimals(): Promise<BigNumberish>;
    getAllowance(owner: string, spender: string): Promise<BigNumberish>;
    /** Setters */
    transfer(recipient: string, amount: string): Promise<ContractTransaction>;
    approve(spender: string, amount: string): Promise<ContractTransaction>;
    transferFrom(sender: string, recipient: string, amount: string): Promise<ContractTransaction>;
    increaseAllowance(spender: string, addedValue: string): Promise<ContractTransaction>;
    decreaseAllowance(spender: string, subtractedValue: string): Promise<ContractTransaction>;
    /** Helpers */
    static encodeCall(functionName: string, args?: any[]): string;
    static decodeCall(data: string): DecodedCall | null;
    onEvent(filter: EventFilter, onContractevent: any): Promise<any>;
}
