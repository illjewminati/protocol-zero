{"ast":null,"code":"import { utils } from \"ethers\";\nimport { getContract } from \"./contract_loader\";\nimport * as artifact from \"../../artifacts/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol/IUniswapV2Router02.json\";\nconst address = process.env.UNISWAP_ROUTER;\nexport const loadUniswapContract = async signer => {\n  return getContract(address, artifact.abi, signer);\n};\nexport const getTokenValue = async (signer, token, decimals) => {\n  const contract = await loadUniswapContract(signer);\n  return contract.getAmountsOut(utils.parseUnits(\"1\", decimals), [process.env.UNISWAP_WETH, token]);\n};","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/services/uniswap_router.ts"],"names":["utils","getContract","artifact","address","process","env","UNISWAP_ROUTER","loadUniswapContract","signer","abi","getTokenValue","token","decimals","contract","getAmountsOut","parseUnits","UNISWAP_WETH"],"mappings":"AACA,SAA8CA,KAA9C,QAA2D,QAA3D;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,OAAO,KAAKC,QAAZ,MAA0B,2GAA1B;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAA5B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,MAAP,IAA6C;AAC5E,SAAOP,WAAW,CAACE,OAAD,EAAUD,QAAQ,CAACO,GAAnB,EAAwBD,MAAxB,CAAlB;AACH,CAFM;AAIP,OAAO,MAAME,aAAa,GAAG,OAAOF,MAAP,EAAuBG,KAAvB,EAAsCC,QAAtC,KAA+E;AACxG,QAAMC,QAAQ,GAAG,MAAMN,mBAAmB,CAACC,MAAD,CAA1C;AACA,SAAOK,QAAQ,CAACC,aAAT,CAAuBd,KAAK,CAACe,UAAN,CAAiB,GAAjB,EAAsBH,QAAtB,CAAvB,EAAwD,CAACR,OAAO,CAACC,GAAR,CAAYW,YAAb,EAA2BL,KAA3B,CAAxD,CAAP;AACH,CAHM","sourcesContent":["\nimport { BigNumber, Contract, ethers, Signer, utils } from \"ethers\"\nimport { getContract } from \"./contract_loader\"\n\nimport * as artifact from \"../../artifacts/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol/IUniswapV2Router02.json\";\n\nconst address = process.env.UNISWAP_ROUTER;\n\nexport const loadUniswapContract = async (signer: Signer): Promise<Contract> => {\n    return getContract(address, artifact.abi, signer)\n}\n\nexport const getTokenValue = async (signer: Signer, token: string, decimals: number): Promise<BigNumber> => {\n    const contract = await loadUniswapContract(signer);\n    return contract.getAmountsOut(utils.parseUnits(\"1\", decimals), [process.env.UNISWAP_WETH, token]);\n}\n\n"]},"metadata":{},"sourceType":"module"}