/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TypesInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "addType(string,address,uint8)": FunctionFragment;
    "changeTypeState(address,bool)": FunctionFragment;
    "addTypePayable(string,address,uint8)": FunctionFragment;
    "getContracts()": FunctionFragment;
    "getTypeByPosition(uint256)": FunctionFragment;
    "getTypeByAddress(address)": FunctionFragment;
    "getNumberOfTypes()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addType",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTypeState",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addTypePayable",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeByPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfTypes",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTypeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTypePayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeByPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfTypes",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Types extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TypesInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addType(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addType(string,address,uint8)"(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeTypeState(
      _contractAddress: string,
      _isValid: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeTypeState(address,bool)"(
      _contractAddress: string,
      _isValid: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addTypePayable(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addTypePayable(string,address,uint8)"(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getContracts(overrides?: CallOverrides): Promise<[string[]]>;

    "getContracts()"(overrides?: CallOverrides): Promise<[string[]]>;

    getTypeByPosition(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, boolean, string, number] & {
          creator: string;
          contractAddress: string;
          createdAt: BigNumber;
          isValid: boolean;
          name: string;
          eipType: number;
        }
      ]
    >;

    "getTypeByPosition(uint256)"(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, boolean, string, number] & {
          creator: string;
          contractAddress: string;
          createdAt: BigNumber;
          isValid: boolean;
          name: string;
          eipType: number;
        }
      ]
    >;

    getTypeByAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, boolean, string, number] & {
          creator: string;
          contractAddress: string;
          createdAt: BigNumber;
          isValid: boolean;
          name: string;
          eipType: number;
        }
      ]
    >;

    "getTypeByAddress(address)"(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, boolean, string, number] & {
          creator: string;
          contractAddress: string;
          createdAt: BigNumber;
          isValid: boolean;
          name: string;
          eipType: number;
        }
      ]
    >;

    getNumberOfTypes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumberOfTypes()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPrice(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPrice(uint256)"(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addType(
    _name: string,
    _contractAddress: string,
    _eipType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addType(string,address,uint8)"(
    _name: string,
    _contractAddress: string,
    _eipType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeTypeState(
    _contractAddress: string,
    _isValid: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeTypeState(address,bool)"(
    _contractAddress: string,
    _isValid: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addTypePayable(
    _name: string,
    _contractAddress: string,
    _eipType: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addTypePayable(string,address,uint8)"(
    _name: string,
    _contractAddress: string,
    _eipType: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getContracts(overrides?: CallOverrides): Promise<string[]>;

  "getContracts()"(overrides?: CallOverrides): Promise<string[]>;

  getTypeByPosition(
    _pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, string, number] & {
      creator: string;
      contractAddress: string;
      createdAt: BigNumber;
      isValid: boolean;
      name: string;
      eipType: number;
    }
  >;

  "getTypeByPosition(uint256)"(
    _pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, string, number] & {
      creator: string;
      contractAddress: string;
      createdAt: BigNumber;
      isValid: boolean;
      name: string;
      eipType: number;
    }
  >;

  getTypeByAddress(
    _contractAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, string, number] & {
      creator: string;
      contractAddress: string;
      createdAt: BigNumber;
      isValid: boolean;
      name: string;
      eipType: number;
    }
  >;

  "getTypeByAddress(address)"(
    _contractAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, string, number] & {
      creator: string;
      contractAddress: string;
      createdAt: BigNumber;
      isValid: boolean;
      name: string;
      eipType: number;
    }
  >;

  getNumberOfTypes(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumberOfTypes()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setPrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addType(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addType(string,address,uint8)"(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTypeState(
      _contractAddress: string,
      _isValid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeTypeState(address,bool)"(
      _contractAddress: string,
      _isValid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addTypePayable(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTypePayable(string,address,uint8)"(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getContracts(overrides?: CallOverrides): Promise<string[]>;

    "getContracts()"(overrides?: CallOverrides): Promise<string[]>;

    getTypeByPosition(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, string, number] & {
        creator: string;
        contractAddress: string;
        createdAt: BigNumber;
        isValid: boolean;
        name: string;
        eipType: number;
      }
    >;

    "getTypeByPosition(uint256)"(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, string, number] & {
        creator: string;
        contractAddress: string;
        createdAt: BigNumber;
        isValid: boolean;
        name: string;
        eipType: number;
      }
    >;

    getTypeByAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, string, number] & {
        creator: string;
        contractAddress: string;
        createdAt: BigNumber;
        isValid: boolean;
        name: string;
        eipType: number;
      }
    >;

    "getTypeByAddress(address)"(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, string, number] & {
        creator: string;
        contractAddress: string;
        createdAt: BigNumber;
        isValid: boolean;
        name: string;
        eipType: number;
      }
    >;

    getNumberOfTypes(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfTypes()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPrice(_price: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addType(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addType(string,address,uint8)"(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeTypeState(
      _contractAddress: string,
      _isValid: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeTypeState(address,bool)"(
      _contractAddress: string,
      _isValid: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addTypePayable(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addTypePayable(string,address,uint8)"(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getContracts(overrides?: CallOverrides): Promise<BigNumber>;

    "getContracts()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTypeByPosition(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTypeByPosition(uint256)"(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypeByAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTypeByAddress(address)"(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfTypes(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfTypes()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addType(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addType(string,address,uint8)"(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeTypeState(
      _contractAddress: string,
      _isValid: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeTypeState(address,bool)"(
      _contractAddress: string,
      _isValid: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addTypePayable(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addTypePayable(string,address,uint8)"(
      _name: string,
      _contractAddress: string,
      _eipType: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getContracts()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTypeByPosition(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTypeByPosition(uint256)"(
      _pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypeByAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTypeByAddress(address)"(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumberOfTypes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
