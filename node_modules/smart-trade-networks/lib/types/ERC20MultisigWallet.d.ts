/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ERC20MultisigWalletInterface extends ethers.utils.Interface {
  functions: {
    "MAX_OWNER_COUNT()": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "changeRequirement(uint256)": FunctionFragment;
    "confirmTransaction(uint256)": FunctionFragment;
    "confirmations(uint256,address)": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "getConfirmationCount(uint256)": FunctionFragment;
    "getConfirmations(uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
    "getTransactionCount(bool,bool)": FunctionFragment;
    "getTransactionIds(uint256,uint256,bool,bool)": FunctionFragment;
    "isConfirmed(uint256)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "replaceOwner(address,address)": FunctionFragment;
    "required()": FunctionFragment;
    "revokeConfirmation(uint256)": FunctionFragment;
    "submitTransaction(address,uint256,bytes,string)": FunctionFragment;
    "transactionCount()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "getFee()": FunctionFragment;
    "getFeeCollector()": FunctionFragment;
    "getWithdrawWithFee(uint256)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_OWNER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmationCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionIds",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawWithFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_OWNER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Confirmation(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Execution(uint256)": EventFragment;
    "ExecutionFailure(uint256)": EventFragment;
    "OwnerAddition(address)": EventFragment;
    "OwnerRemoval(address)": EventFragment;
    "RequirementChange(uint256)": EventFragment;
    "Revocation(address,uint256)": EventFragment;
    "Submission(uint256)": EventFragment;
    "WithDrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequirementChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithDrawal"): EventFragment;
}

export class ERC20MultisigWallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ERC20MultisigWalletInterface;

  functions: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_OWNER_COUNT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    "confirmTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "confirmations(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    executeTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    "executeTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID. return Number of confirmations.
     */
    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID. return Number of confirmations.
     */
    "getConfirmationCount(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID. return Returns array of owner addresses.
     */
    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _confirmations: string[] }>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID. return Returns array of owner addresses.
     */
    "getConfirmations(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _confirmations: string[] }>;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    "getOwners()"(overrides?: CallOverrides): Promise<[string[]]>;

    getTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, string, boolean, BigNumber] & {
          description: string;
          destination: string;
          value: BigNumber;
          data: string;
          executed: boolean;
          timestamp: BigNumber;
        }
      ]
    >;

    "getTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, string, boolean, BigNumber] & {
          description: string;
          destination: string;
          value: BigNumber;
          data: string;
          executed: boolean;
          timestamp: BigNumber;
        }
      ]
    >;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions. return Total number of transactions after filters are applied.
     * @param pending Include pending transactions.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions. return Total number of transactions after filters are applied.
     * @param pending Include pending transactions.
     */
    "getTransactionCount(bool,bool)"(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions. return Returns array of transaction IDs.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _transactionIds: BigNumber[] }>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions. return Returns array of transaction IDs.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    "getTransactionIds(uint256,uint256,bool,bool)"(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _transactionIds: BigNumber[] }>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID. return Confirmation status.
     */
    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID. return Confirmation status.
     */
    "isConfirmed(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "owners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    "removeOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    required(overrides?: CallOverrides): Promise<[BigNumber]>;

    "required()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    "revokeConfirmation(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload. return Returns transaction ID.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload. return Returns transaction ID.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    "submitTransaction(address,uint256,bytes,string)"(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "transactionCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        description: string;
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        timestamp: BigNumber;
      }
    >;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        description: string;
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        timestamp: BigNumber;
      }
    >;

    getFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    "getFeeCollector()"(overrides?: CallOverrides): Promise<[string]>;

    getWithdrawWithFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getWithdrawWithFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Withdraws token balance from the wallet
     * @param _amount Amount to withdraw
     * @param _to Address of receiver
     * @param _token Address of ERC20 token to withdraw.
     */
    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Withdraws token balance from the wallet
     * @param _amount Amount to withdraw
     * @param _to Address of receiver
     * @param _token Address of ERC20 token to withdraw.
     */
    "withdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_OWNER_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allows to add a new owner. Transaction has to be sent by wallet.
   * @param owner Address of new owner to add.
   */
  addOwner(owner: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Allows to add a new owner. Transaction has to be sent by wallet.
   * @param owner Address of new owner to add.
   */
  "addOwner(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
   * @param _required Number of required confirmations.
   */
  changeRequirement(
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
   * @param _required Number of required confirmations.
   */
  "changeRequirement(uint256)"(
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to confirm a transaction.
   * @param transactionId Transaction ID.
   */
  confirmTransaction(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to confirm a transaction.
   * @param transactionId Transaction ID.
   */
  "confirmTransaction(uint256)"(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  confirmations(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "confirmations(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Allows anyone to execute a confirmed transaction.
   * @param transactionId Transaction ID.
   */
  executeTransaction(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows anyone to execute a confirmed transaction.
   * @param transactionId Transaction ID.
   */
  "executeTransaction(uint256)"(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns number of confirmations of a transaction.
   * @param transactionId Transaction ID. return Number of confirmations.
   */
  getConfirmationCount(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns number of confirmations of a transaction.
   * @param transactionId Transaction ID. return Number of confirmations.
   */
  "getConfirmationCount(uint256)"(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns array with owner addresses, which confirmed transaction.
   * @param transactionId Transaction ID. return Returns array of owner addresses.
   */
  getConfirmations(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Returns array with owner addresses, which confirmed transaction.
   * @param transactionId Transaction ID. return Returns array of owner addresses.
   */
  "getConfirmations(uint256)"(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

  getTransaction(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean, BigNumber] & {
      description: string;
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      timestamp: BigNumber;
    }
  >;

  "getTransaction(uint256)"(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean, BigNumber] & {
      description: string;
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      timestamp: BigNumber;
    }
  >;

  /**
   * Returns total number of transactions after filers are applied.
   * @param executed Include executed transactions. return Total number of transactions after filters are applied.
   * @param pending Include pending transactions.
   */
  getTransactionCount(
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns total number of transactions after filers are applied.
   * @param executed Include executed transactions. return Total number of transactions after filters are applied.
   * @param pending Include pending transactions.
   */
  "getTransactionCount(bool,bool)"(
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns list of transaction IDs in defined range.
   * @param executed Include executed transactions. return Returns array of transaction IDs.
   * @param from Index start position of transaction array.
   * @param pending Include pending transactions.
   * @param to Index end position of transaction array.
   */
  getTransactionIds(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Returns list of transaction IDs in defined range.
   * @param executed Include executed transactions. return Returns array of transaction IDs.
   * @param from Index start position of transaction array.
   * @param pending Include pending transactions.
   * @param to Index end position of transaction array.
   */
  "getTransactionIds(uint256,uint256,bool,bool)"(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Returns the confirmation status of a transaction.
   * @param transactionId Transaction ID. return Confirmation status.
   */
  isConfirmed(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns the confirmation status of a transaction.
   * @param transactionId Transaction ID. return Confirmation status.
   */
  "isConfirmed(uint256)"(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isOwner(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "owners(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Allows to remove an owner. Transaction has to be sent by wallet.
   * @param owner Address of owner to remove.
   */
  removeOwner(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove an owner. Transaction has to be sent by wallet.
   * @param owner Address of owner to remove.
   */
  "removeOwner(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
   * @param newOwner Address of new owner.
   * @param owner Address of owner to be replaced.
   */
  replaceOwner(
    owner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
   * @param newOwner Address of new owner.
   * @param owner Address of owner to be replaced.
   */
  "replaceOwner(address,address)"(
    owner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  required(overrides?: CallOverrides): Promise<BigNumber>;

  "required()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allows an owner to revoke a confirmation for a transaction.
   * @param transactionId Transaction ID.
   */
  revokeConfirmation(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to revoke a confirmation for a transaction.
   * @param transactionId Transaction ID.
   */
  "revokeConfirmation(uint256)"(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to submit and confirm a transaction.
   * @param data Transaction data payload. return Returns transaction ID.
   * @param destination Transaction target address.
   * @param value Transaction ether value.
   */
  submitTransaction(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to submit and confirm a transaction.
   * @param data Transaction data payload. return Returns transaction ID.
   * @param destination Transaction target address.
   * @param value Transaction ether value.
   */
  "submitTransaction(address,uint256,bytes,string)"(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  "transactionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean, BigNumber] & {
      description: string;
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      timestamp: BigNumber;
    }
  >;

  "transactions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean, BigNumber] & {
      description: string;
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      timestamp: BigNumber;
    }
  >;

  getFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeCollector(overrides?: CallOverrides): Promise<string>;

  "getFeeCollector()"(overrides?: CallOverrides): Promise<string>;

  getWithdrawWithFee(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getWithdrawWithFee(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  /**
   * Withdraws token balance from the wallet
   * @param _amount Amount to withdraw
   * @param _to Address of receiver
   * @param _token Address of ERC20 token to withdraw.
   */
  withdraw(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Withdraws token balance from the wallet
   * @param _amount Amount to withdraw
   * @param _to Address of receiver
   * @param _token Address of ERC20 token to withdraw.
   */
  "withdraw(address,address,uint256)"(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_OWNER_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    "addOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    "confirmTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "confirmations(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    executeTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    "executeTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID. return Number of confirmations.
     */
    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID. return Number of confirmations.
     */
    "getConfirmationCount(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID. return Returns array of owner addresses.
     */
    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID. return Returns array of owner addresses.
     */
    "getConfirmations(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

    getTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        description: string;
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        timestamp: BigNumber;
      }
    >;

    "getTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        description: string;
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        timestamp: BigNumber;
      }
    >;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions. return Total number of transactions after filters are applied.
     * @param pending Include pending transactions.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions. return Total number of transactions after filters are applied.
     * @param pending Include pending transactions.
     */
    "getTransactionCount(bool,bool)"(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions. return Returns array of transaction IDs.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions. return Returns array of transaction IDs.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    "getTransactionIds(uint256,uint256,bool,bool)"(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID. return Confirmation status.
     */
    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID. return Confirmation status.
     */
    "isConfirmed(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "owners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    "removeOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    "required()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    "revokeConfirmation(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload. return Returns transaction ID.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload. return Returns transaction ID.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    "submitTransaction(address,uint256,bytes,string)"(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        description: string;
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        timestamp: BigNumber;
      }
    >;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        description: string;
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        timestamp: BigNumber;
      }
    >;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<string>;

    "getFeeCollector()"(overrides?: CallOverrides): Promise<string>;

    getWithdrawWithFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getWithdrawWithFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Withdraws token balance from the wallet
     * @param _amount Amount to withdraw
     * @param _to Address of receiver
     * @param _token Address of ERC20 token to withdraw.
     */
    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws token balance from the wallet
     * @param _amount Amount to withdraw
     * @param _to Address of receiver
     * @param _token Address of ERC20 token to withdraw.
     */
    "withdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Confirmation(
      sender: string | null,
      transactionId: BigNumberish | null
    ): EventFilter;

    Deposit(sender: string | null, value: null): EventFilter;

    Execution(transactionId: BigNumberish | null): EventFilter;

    ExecutionFailure(transactionId: BigNumberish | null): EventFilter;

    OwnerAddition(owner: string | null): EventFilter;

    OwnerRemoval(owner: string | null): EventFilter;

    RequirementChange(required: null): EventFilter;

    Revocation(
      sender: string | null,
      transactionId: BigNumberish | null
    ): EventFilter;

    Submission(transactionId: BigNumberish | null): EventFilter;

    WithDrawal(
      _token: string | null,
      _to: string | null,
      _amount: null
    ): EventFilter;
  };

  estimateGas: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_OWNER_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(owner: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    "confirmTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "confirmations(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    executeTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    "executeTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID. return Number of confirmations.
     */
    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID. return Number of confirmations.
     */
    "getConfirmationCount(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID. return Returns array of owner addresses.
     */
    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID. return Returns array of owner addresses.
     */
    "getConfirmations(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwners()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions. return Total number of transactions after filters are applied.
     * @param pending Include pending transactions.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions. return Total number of transactions after filters are applied.
     * @param pending Include pending transactions.
     */
    "getTransactionCount(bool,bool)"(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions. return Returns array of transaction IDs.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions. return Returns array of transaction IDs.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    "getTransactionIds(uint256,uint256,bool,bool)"(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID. return Confirmation status.
     */
    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID. return Confirmation status.
     */
    "isConfirmed(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "owners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(owner: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    "removeOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    "required()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    "revokeConfirmation(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload. return Returns transaction ID.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload. return Returns transaction ID.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    "submitTransaction(address,uint256,bytes,string)"(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeCollector()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawWithFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWithdrawWithFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Withdraws token balance from the wallet
     * @param _amount Amount to withdraw
     * @param _to Address of receiver
     * @param _token Address of ERC20 token to withdraw.
     */
    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Withdraws token balance from the wallet
     * @param _amount Amount to withdraw
     * @param _to Address of receiver
     * @param _token Address of ERC20 token to withdraw.
     */
    "withdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_OWNER_COUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    "confirmTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "confirmations(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    executeTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    "executeTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID. return Number of confirmations.
     */
    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID. return Number of confirmations.
     */
    "getConfirmationCount(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID. return Returns array of owner addresses.
     */
    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID. return Returns array of owner addresses.
     */
    "getConfirmations(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwners()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions. return Total number of transactions after filters are applied.
     * @param pending Include pending transactions.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions. return Total number of transactions after filters are applied.
     * @param pending Include pending transactions.
     */
    "getTransactionCount(bool,bool)"(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions. return Returns array of transaction IDs.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions. return Returns array of transaction IDs.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    "getTransactionIds(uint256,uint256,bool,bool)"(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID. return Confirmation status.
     */
    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID. return Confirmation status.
     */
    "isConfirmed(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "owners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    "removeOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "required()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    "revokeConfirmation(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload. return Returns transaction ID.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload. return Returns transaction ID.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    "submitTransaction(address,uint256,bytes,string)"(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "transactionCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFeeCollector()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawWithFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWithdrawWithFee(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws token balance from the wallet
     * @param _amount Amount to withdraw
     * @param _to Address of receiver
     * @param _token Address of ERC20 token to withdraw.
     */
    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws token balance from the wallet
     * @param _amount Amount to withdraw
     * @param _to Address of receiver
     * @param _token Address of ERC20 token to withdraw.
     */
    "withdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
