{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getType } from 'typesafe-actions';\nimport { Web3State } from '../../types/blockchain';\nimport * as actions from '../actions';\nconst initialBlockchainState = {\n  ethAccount: '',\n  web3State: Web3State.Loading,\n  message: null,\n  tokenBalances: [],\n  balance: null,\n  paymaster: null,\n  networkID: 0,\n  gsnProvider: null,\n  web3Provider: null,\n  gasPrice: null\n};\nexport default function blockchain(state = initialBlockchainState, action) {\n  switch (action.type) {\n    case getType(actions.setEthAccount):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        ethAccount: action.payload\n      });\n\n    case getType(actions.setWeb3State):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        web3State: action.payload\n      });\n\n    case getType(actions.setTokenBalance):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenBalances: [...state.tokenBalances.filter(t => t.token.address !== action.payload.token.address), action.payload]\n      });\n\n    case getType(actions.setNetworkID):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        networkID: action.payload\n      });\n\n    case getType(actions.initializeBlockchainData):\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case getType(actions.setNetworkBalance):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balance: action.payload\n      });\n\n    case getType(actions.setPaymasterData):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        paymaster: action.payload\n      });\n\n    case getType(actions.setGSNProvider):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gsnProvider: action.payload\n      });\n\n    case getType(actions.setGasPrice):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gasPrice: action.payload\n      });\n\n    case getType(actions.setWeb3Provider):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        web3Provider: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}