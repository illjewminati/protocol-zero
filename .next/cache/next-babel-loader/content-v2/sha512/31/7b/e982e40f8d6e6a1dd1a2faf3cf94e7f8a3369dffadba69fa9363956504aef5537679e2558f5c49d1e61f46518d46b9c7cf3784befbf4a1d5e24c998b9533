{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Config } from '../common/config';\nimport { UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION } from '../common/constants';\nconst KNOWN_TOKENS_META_DATA = Config.getConfig().tokens;\nexport class KnownTokens {\n  constructor(knownTokensMetadata, networkID) {\n    _defineProperty(this, \"_tokens\", []);\n\n    _defineProperty(this, \"_networkID\", 5);\n\n    _defineProperty(this, \"getTokenBySymbol\", symbol => {\n      const symbolInLowerCaseScore = symbol.toLowerCase();\n\n      const token = this._tokens.find(t => t.symbol === symbolInLowerCaseScore);\n\n      if (!token) {\n        const errorMessage = `Token with symbol ${symbol} not found in known tokens`;\n        throw new Error(errorMessage);\n      }\n\n      return token;\n    });\n\n    _defineProperty(this, \"getTokenByAddress\", address => {\n      const addressInLowerCase = address.toLowerCase();\n\n      let token = this._tokens.find(t => t.address.toLowerCase() === addressInLowerCase);\n\n      if (!token) {\n        throw new Error(`Token with address ${address} not found in known tokens`);\n      }\n\n      return token;\n    });\n\n    _defineProperty(this, \"getTokens\", () => {\n      return this._tokens;\n    });\n\n    this._tokens = mapTokensMetaDataToTokenByNetworkId(knownTokensMetadata, networkID);\n  }\n\n}\nlet knownTokens;\nlet selectedNetworkId;\nexport const getKnownTokens = networkID => {\n  if (!knownTokens || !selectedNetworkId || networkID !== selectedNetworkId) {\n    knownTokens = new KnownTokens(KNOWN_TOKENS_META_DATA, networkID);\n  }\n\n  return knownTokens;\n};\n\nconst mapTokensMetaDataToTokenByNetworkId = (tokensMetaData, networkID) => {\n  const data = tokensMetaData.filter(tokenMetaData => tokenMetaData.addresses[networkID]).map(tokenMetaData => {\n    return {\n      address: tokenMetaData.addresses[networkID],\n      symbol: tokenMetaData.symbol,\n      decimals: tokenMetaData.decimals,\n      name: tokenMetaData.name,\n      primaryColor: tokenMetaData.primaryColor,\n      icon: tokenMetaData.icon,\n      displayDecimals: tokenMetaData.displayDecimals || UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION\n    };\n  });\n  return data;\n};","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/util/known_tokens.ts"],"names":["Config","UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION","KNOWN_TOKENS_META_DATA","getConfig","tokens","KnownTokens","constructor","knownTokensMetadata","networkID","symbol","symbolInLowerCaseScore","toLowerCase","token","_tokens","find","t","errorMessage","Error","address","addressInLowerCase","mapTokensMetaDataToTokenByNetworkId","knownTokens","selectedNetworkId","getKnownTokens","tokensMetaData","data","filter","tokenMetaData","addresses","map","decimals","name","primaryColor","icon","displayDecimals"],"mappings":";;AACA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,uCAAT,QAAwD,qBAAxD;AAIA,MAAMC,sBAAuC,GAAGF,MAAM,CAACG,SAAP,GAAmBC,MAAnE;AAGA,OAAO,MAAMC,WAAN,CAAkB;AAIrBC,EAAAA,WAAW,CAACC,mBAAD,EAAuCC,SAAvC,EAA0D;AAAA,qCAHjC,EAGiC;;AAAA,wCAF/B,CAE+B;;AAAA,8CAM1CC,MAAD,IAA2B;AACjD,YAAMC,sBAAsB,GAAGD,MAAM,CAACE,WAAP,EAA/B;;AACA,YAAMC,KAAK,GAAG,KAAKC,OAAL,CAAaC,IAAb,CAAkBC,CAAC,IAAIA,CAAC,CAACN,MAAF,KAAaC,sBAApC,CAAd;;AAEA,UAAI,CAACE,KAAL,EAAY;AACR,cAAMI,YAAY,GAAI,qBAAoBP,MAAO,4BAAjD;AACA,cAAM,IAAIQ,KAAJ,CAAUD,YAAV,CAAN;AACH;;AACD,aAAOJ,KAAP;AACH,KAfoE;;AAAA,+CAiBzCM,OAAD,IAA4B;AACnD,YAAMC,kBAAkB,GAAGD,OAAO,CAACP,WAAR,EAA3B;;AACA,UAAIC,KAAK,GAAG,KAAKC,OAAL,CAAaC,IAAb,CAAkBC,CAAC,IAAIA,CAAC,CAACG,OAAF,CAAUP,WAAV,OAA4BQ,kBAAnD,CAAZ;;AAEA,UAAI,CAACP,KAAL,EAAY;AACR,cAAM,IAAIK,KAAJ,CAAW,sBAAqBC,OAAQ,4BAAxC,CAAN;AACH;;AACD,aAAON,KAAP;AACH,KAzBoE;;AAAA,uCA2BlD,MAAe;AAC9B,aAAO,KAAKC,OAAZ;AACH,KA7BoE;;AAEjE,SAAKA,OAAL,GAAeO,mCAAmC,CAACb,mBAAD,EAAsBC,SAAtB,CAAlD;AAEH;;AARoB;AAoCzB,IAAIa,WAAJ;AACA,IAAIC,iBAAJ;AACA,OAAO,MAAMC,cAAc,GAAIf,SAAD,IAAoC;AAC9D,MAAI,CAACa,WAAD,IAAgB,CAACC,iBAAjB,IAAsCd,SAAS,KAAKc,iBAAxD,EAA2E;AACvED,IAAAA,WAAW,GAAG,IAAIhB,WAAJ,CAAgBH,sBAAhB,EAAwCM,SAAxC,CAAd;AACH;;AACD,SAAOa,WAAP;AACH,CALM;;AAOP,MAAMD,mCAAmC,GAAG,CAACI,cAAD,EAAkChB,SAAlC,KAAiE;AAEzG,QAAMiB,IAAI,GAAID,cAAc,CACvBE,MADS,CACFC,aAAa,IAAIA,aAAa,CAACC,SAAd,CAAwBpB,SAAxB,CADf,EAETqB,GAFS,CAGLF,aAAD,IAA0B;AACtB,WAAO;AACHT,MAAAA,OAAO,EAAES,aAAa,CAACC,SAAd,CAAwBpB,SAAxB,CADN;AAEHC,MAAAA,MAAM,EAAEkB,aAAa,CAAClB,MAFnB;AAGHqB,MAAAA,QAAQ,EAAEH,aAAa,CAACG,QAHrB;AAIHC,MAAAA,IAAI,EAAEJ,aAAa,CAACI,IAJjB;AAKHC,MAAAA,YAAY,EAAEL,aAAa,CAACK,YALzB;AAMHC,MAAAA,IAAI,EAAEN,aAAa,CAACM,IANjB;AAOHC,MAAAA,eAAe,EAAEP,aAAa,CAACO,eAAd,IAAiCjC;AAP/C,KAAP;AASH,GAbK,CAAd;AAgBA,SAAOwB,IAAP;AACH,CAnBD","sourcesContent":["\nimport { Config } from '../common/config';\nimport { UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION } from '../common/constants';\nimport { TokenMetaData, Token } from '../types/blockchain';\n\n\nconst KNOWN_TOKENS_META_DATA: TokenMetaData[] = Config.getConfig().tokens;\n\n\nexport class KnownTokens {\n    private readonly _tokens: Token[] = [];\n    private readonly _networkID: number = 5;\n\n    constructor(knownTokensMetadata: TokenMetaData[], networkID: number) {\n    \n        this._tokens = mapTokensMetaDataToTokenByNetworkId(knownTokensMetadata, networkID);\n\n    }\n\n    public getTokenBySymbol = (symbol: string): Token => {\n        const symbolInLowerCaseScore = symbol.toLowerCase();\n        const token = this._tokens.find(t => t.symbol === symbolInLowerCaseScore);\n\n        if (!token) {\n            const errorMessage = `Token with symbol ${symbol} not found in known tokens`;\n            throw new Error(errorMessage);\n        }\n        return token;\n    };\n\n    public getTokenByAddress = (address: string): Token => {\n        const addressInLowerCase = address.toLowerCase();\n        let token = this._tokens.find(t => t.address.toLowerCase() === addressInLowerCase);\n        \n        if (!token) {\n            throw new Error(`Token with address ${address} not found in known tokens`);\n        }\n        return token;\n    };\n\n    public getTokens = (): Token[] => {\n        return this._tokens;\n    };\n}\n\nlet knownTokens: KnownTokens;\nlet selectedNetworkId: number\nexport const getKnownTokens = (networkID: number): KnownTokens => {\n    if (!knownTokens || !selectedNetworkId || networkID !== selectedNetworkId) {\n        knownTokens = new KnownTokens(KNOWN_TOKENS_META_DATA, networkID);\n    }\n    return knownTokens;\n};\n\nconst mapTokensMetaDataToTokenByNetworkId = (tokensMetaData: TokenMetaData[], networkID: number): Token[] => {\n    \n    const data =  tokensMetaData\n        .filter(tokenMetaData => tokenMetaData.addresses[networkID])\n        .map(\n            (tokenMetaData): Token => {\n                return {\n                    address: tokenMetaData.addresses[networkID],\n                    symbol: tokenMetaData.symbol,\n                    decimals: tokenMetaData.decimals,\n                    name: tokenMetaData.name,\n                    primaryColor: tokenMetaData.primaryColor,\n                    icon: tokenMetaData.icon,\n                    displayDecimals: tokenMetaData.displayDecimals || UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION,\n                };\n            },\n        );\n\n    return data\n};\n\n\n"]},"metadata":{},"sourceType":"module"}