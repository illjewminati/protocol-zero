{"ast":null,"code":"import _regeneratorRuntime from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { utils } from \"ethers\";\nimport { ERC20Controller } from \"smart-trade-networks\";\nexport var getBalanceOf = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, account, signer) {\n    var erc20Controller;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            erc20Controller = new ERC20Controller(token, signer);\n            return _context.abrupt(\"return\", erc20Controller.balanceOf(account));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getBalanceOf(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getDecimalsOf = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token, signer) {\n    var erc20Controller;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            erc20Controller = new ERC20Controller(token, signer);\n            return _context2.abrupt(\"return\", erc20Controller.getDecimals());\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getDecimalsOf(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getNameAndSymbolOf = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token, signer) {\n    var erc20Controller, symbol, name;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            erc20Controller = new ERC20Controller(token, signer);\n            _context3.next = 3;\n            return erc20Controller.getSymbol();\n\n          case 3:\n            symbol = _context3.sent;\n            _context3.next = 6;\n            return erc20Controller.getName();\n\n          case 6:\n            name = _context3.sent;\n            return _context3.abrupt(\"return\", {\n              name: name,\n              symbol: symbol\n            });\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getNameAndSymbolOf(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getTokenTotalSupply = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(signer, address, decimals) {\n    var erc20Controller, totalSupply;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            erc20Controller = new ERC20Controller(address, signer);\n            _context4.next = 3;\n            return erc20Controller.getTotalSupply();\n\n          case 3:\n            totalSupply = _context4.sent;\n            return _context4.abrupt(\"return\", utils.formatUnits(totalSupply, decimals));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function getTokenTotalSupply(_x8, _x9, _x10) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getBalance = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(signer, address, account, decimals) {\n    var erc20Controller, balance;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            erc20Controller = new ERC20Controller(address, signer);\n            _context5.next = 3;\n            return erc20Controller.balanceOf(account);\n\n          case 3:\n            balance = _context5.sent;\n            return _context5.abrupt(\"return\", utils.formatUnits(balance, decimals));\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getBalance(_x11, _x12, _x13, _x14) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var approveTokens = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(signer, address, to, amount) {\n    var erc20Controller;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            console.log('address', address);\n            erc20Controller = new ERC20Controller(address, signer);\n            return _context6.abrupt(\"return\", erc20Controller.approve(to, amount));\n\n          case 3:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function approveTokens(_x15, _x16, _x17, _x18) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getAllowance = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(signer, address, spender, decimals) {\n    var erc20Controller, allowance;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            erc20Controller = new ERC20Controller(address, signer);\n            _context7.t0 = erc20Controller;\n            _context7.next = 4;\n            return signer.getAddress();\n\n          case 4:\n            _context7.t1 = _context7.sent;\n            _context7.t2 = spender;\n            _context7.next = 8;\n            return _context7.t0.getAllowance.call(_context7.t0, _context7.t1, _context7.t2);\n\n          case 8:\n            allowance = _context7.sent;\n            return _context7.abrupt(\"return\", utils.formatUnits(allowance, decimals));\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function getAllowance(_x19, _x20, _x21, _x22) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/services/erc20_service.ts"],"names":["utils","ERC20Controller","getBalanceOf","token","account","signer","erc20Controller","balanceOf","getDecimalsOf","getDecimals","getNameAndSymbolOf","getSymbol","symbol","getName","name","getTokenTotalSupply","address","decimals","getTotalSupply","totalSupply","formatUnits","getBalance","balance","approveTokens","to","amount","console","log","approve","getAllowance","spender","getAddress","allowance"],"mappings":"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","sourcesContent":["\nimport { Signer, ethers, BigNumberish, utils, ContractTransaction } from \"ethers\";\nimport { ERC20Controller } from \"smart-trade-networks\";\n\nexport const getBalanceOf = async (\n    token: string, \n    account: string, \n    signer: Signer | ethers.providers.JsonRpcSigner\n): Promise<BigNumberish> => {\n    const erc20Controller = new ERC20Controller(token, signer);\n    return erc20Controller.balanceOf(account);\n}\n\nexport const getDecimalsOf = async (\n    token: string,\n    signer: Signer | ethers.providers.JsonRpcSigner\n): Promise<BigNumberish> => {\n    const erc20Controller = new ERC20Controller(token, signer);\n    return erc20Controller.getDecimals();\n}\n\nexport const getNameAndSymbolOf = async (\n    token: string,\n    signer: Signer | ethers.providers.JsonRpcSigner\n): Promise<{name: string, symbol: string}> => {\n    const erc20Controller = new ERC20Controller(token, signer);\n    const symbol = await erc20Controller.getSymbol();\n    const name = await erc20Controller.getName();\n    return {\n        name,\n        symbol\n    }\n}\n\nexport const getTokenTotalSupply = async (signer: Signer, address: string, decimals: number): Promise<string> => {\n    const erc20Controller = new ERC20Controller(address, signer);\n    const totalSupply = await erc20Controller.getTotalSupply();\n    return utils.formatUnits(totalSupply, decimals);\n}\n\nexport const getBalance = async (signer: Signer, address: string, account: string, decimals: number): Promise<string> => {\n    const erc20Controller = new ERC20Controller(address, signer);\n    const balance = await erc20Controller.balanceOf(account);\n    return utils.formatUnits(balance, decimals);\n}\n\nexport const approveTokens = async (signer: Signer, address: string, to: string, amount: string): Promise<ContractTransaction> => {\n    console.log('address',address)\n    const erc20Controller = new ERC20Controller(address, signer);\n    return erc20Controller.approve(to, amount);\n}\n\nexport const getAllowance = async (signer: Signer, address: string, spender: string, decimals: number): Promise<string> => {\n    const erc20Controller = new ERC20Controller(address, signer);\n    const allowance = await erc20Controller.getAllowance(await signer.getAddress(), spender)\n    return utils.formatUnits(allowance, decimals);\n}"]},"metadata":{},"sourceType":"module"}