/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MultisigDeployerInterface extends ethers.utils.Interface {
  functions: {
    "feeCollector()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "getAll()": FunctionFragment;
    "isMultisigAdded(address)": FunctionFragment;
    "getBytecode(address[],uint256)": FunctionFragment;
    "getAddress(bytes,uint256)": FunctionFragment;
    "deployMultisig(address[],uint256)": FunctionFragment;
    "deployMultisigPrecomputed(bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isMultisigAdded",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytecode",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployMultisig",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployMultisigPrecomputed",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMultisigAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployMultisigPrecomputed",
    data: BytesLike
  ): Result;

  events: {
    "NewMultisig(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetFeeCollector(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewMultisig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeCollector"): EventFragment;
}

export class MultisigDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultisigDeployerInterface;

  functions: {
    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    "feeCollector()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _owner: string,
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeCollector(address)"(
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAll(overrides?: CallOverrides): Promise<[string[]]>;

    "getAll()"(overrides?: CallOverrides): Promise<[string[]]>;

    isMultisigAdded(
      _multisig: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isMultisigAdded(address)"(
      _multisig: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBytecode(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getBytecode(address[],uint256)"(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddress(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAddress(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployMultisig(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployMultisig(address[],uint256)"(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployMultisigPrecomputed(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployMultisigPrecomputed(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  feeCollector(overrides?: CallOverrides): Promise<string>;

  "feeCollector()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _feeCollector: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _owner: string,
    _feeCollector: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeCollector(address)"(
    _feeCollector: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAll(overrides?: CallOverrides): Promise<string[]>;

  "getAll()"(overrides?: CallOverrides): Promise<string[]>;

  isMultisigAdded(
    _multisig: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isMultisigAdded(address)"(
    _multisig: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBytecode(
    _owners: string[],
    _required: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBytecode(address[],uint256)"(
    _owners: string[],
    _required: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddress(
    bytecode: BytesLike,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAddress(bytes,uint256)"(
    bytecode: BytesLike,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deployMultisig(
    _owners: string[],
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployMultisig(address[],uint256)"(
    _owners: string[],
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployMultisigPrecomputed(
    bytecode: BytesLike,
    _salt: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployMultisigPrecomputed(bytes,uint256)"(
    bytecode: BytesLike,
    _salt: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    feeCollector(overrides?: CallOverrides): Promise<string>;

    "feeCollector()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _owner: string,
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _owner: string,
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeCollector(address)"(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAll(overrides?: CallOverrides): Promise<string[]>;

    "getAll()"(overrides?: CallOverrides): Promise<string[]>;

    isMultisigAdded(
      _multisig: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isMultisigAdded(address)"(
      _multisig: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBytecode(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBytecode(address[],uint256)"(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddress(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAddress(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployMultisig(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployMultisig(address[],uint256)"(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployMultisigPrecomputed(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployMultisigPrecomputed(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewMultisig(
      _creator: string | null,
      _multisigAddress: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetFeeCollector(feeCollector: string | null): EventFilter;
  };

  estimateGas: {
    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    "feeCollector()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _owner: string,
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeCollector(address)"(
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAll(overrides?: CallOverrides): Promise<BigNumber>;

    "getAll()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMultisigAdded(
      _multisig: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isMultisigAdded(address)"(
      _multisig: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBytecode(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBytecode(address[],uint256)"(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddress(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAddress(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployMultisig(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployMultisig(address[],uint256)"(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployMultisigPrecomputed(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployMultisigPrecomputed(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeCollector()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _owner: string,
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeCollector(address)"(
      _feeCollector: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAll()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMultisigAdded(
      _multisig: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMultisigAdded(address)"(
      _multisig: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBytecode(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBytecode(address[],uint256)"(
      _owners: string[],
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddress(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddress(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployMultisig(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployMultisig(address[],uint256)"(
      _owners: string[],
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployMultisigPrecomputed(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployMultisigPrecomputed(bytes,uint256)"(
      bytecode: BytesLike,
      _salt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
