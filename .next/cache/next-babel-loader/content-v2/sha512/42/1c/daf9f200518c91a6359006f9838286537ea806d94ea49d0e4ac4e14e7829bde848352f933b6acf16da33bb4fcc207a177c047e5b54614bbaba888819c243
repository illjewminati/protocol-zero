{"ast":null,"code":"import { BigNumber, ethers, utils } from \"ethers\";\nimport { getContract } from \"./contract_loader\";\nimport * as artifact from \"../../artifacts/contracts/TokenPaymaster.sol/TokenPaymaster.json\";\nimport { getDecimalsOf } from \"./erc20_service\";\nconst address = process.env.GSN_PAYMASTER;\nexport const loadPaymasterContract = async signer => {\n  return getContract(address, artifact.abi, signer);\n};\nexport const getMinBalance = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.minBalance();\n};\nexport const getMinGas = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.minGas();\n};\nexport const getOwner = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.owner();\n};\nexport const getPaymentData = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  const data = await contract.getPaymentData();\n  const decimals = await getDecimalsOf(data[0], signer);\n  return {\n    paymentToken: data[0],\n    fee: utils.formatUnits(data[1], decimals)\n  };\n};\nexport const getGasUsedByPost = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.gasUsedByPost();\n};\nexport const getTargetContract = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.target();\n};\nexport const getTokenToEthOutput = async (signer, amount, token1, token2) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.getTokenToEthOutput(ethers.utils.parseUnits(amount, token1.decimals), [token1.address, token2]);\n};\nexport const setMinBalance = async (signer, amount) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setMinBalance(ethers.utils.parseEther(amount));\n};\nexport const setPaymentToken = async (signer, address) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setPaymentToken(address);\n};\nexport const setFee = async (signer, amount) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setFee(ethers.utils.parseEther(amount));\n};\nexport const whitelistToken = async (signer, address, whitelist) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.whitelistToken(address, whitelist);\n};\nexport const setGasUsedByPost = async (signer, amount) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setGasUsedByPost(BigNumber.from(amount));\n};\nexport const setMinGas = async (signer, amount) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setMinGas(BigNumber.from(amount));\n};\nexport const setTarget = async (signer, address) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setTarget(address);\n};\nexport const setRelayHub = async (signer, address) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setRelayHub(address);\n};\nexport const setForwarder = async (signer, address) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setTrustedForwarder(address);\n};\nexport const withdrawFromRelayHub = async (signer, amount, receiver) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.withdrawRelayHubDepositTo(ethers.utils.parseEther(amount), receiver);\n};","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/services/paymaster.ts"],"names":["BigNumber","ethers","utils","getContract","artifact","getDecimalsOf","address","process","env","GSN_PAYMASTER","loadPaymasterContract","signer","abi","getMinBalance","contract","minBalance","getMinGas","minGas","getOwner","owner","getPaymentData","data","decimals","paymentToken","fee","formatUnits","getGasUsedByPost","gasUsedByPost","getTargetContract","target","getTokenToEthOutput","amount","token1","token2","parseUnits","setMinBalance","parseEther","setPaymentToken","setFee","whitelistToken","whitelist","setGasUsedByPost","from","setMinGas","setTarget","setRelayHub","setForwarder","setTrustedForwarder","withdrawFromRelayHub","receiver","withdrawRelayHubDepositTo"],"mappings":"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","sourcesContent":["import { BigNumber, Contract, ContractTransaction, ethers, Signer, utils } from \"ethers\"\nimport { getContract } from \"./contract_loader\"\n\nimport * as artifact from \"../../artifacts/contracts/TokenPaymaster.sol/TokenPaymaster.json\";\nimport { PaymasterPaymentData, Token } from \"../types/blockchain\";\nimport { getDecimalsOf } from \"./erc20_service\";\n\nconst address = process.env.GSN_PAYMASTER;\n\nexport const loadPaymasterContract = async (signer: Signer): Promise<Contract> => {\n    return getContract(address, artifact.abi, signer)\n}\n\n\nexport const getMinBalance = async (signer: Signer): Promise<BigNumber> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.minBalance();\n}\n\nexport const getMinGas = async (signer: Signer): Promise<BigNumber> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.minGas();\n}\n\nexport const getOwner = async (signer: Signer): Promise<string> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.owner()\n}\n\nexport const getPaymentData = async (signer: Signer): Promise<PaymasterPaymentData> => {\n    const contract = await loadPaymasterContract(signer);\n    const data = await contract.getPaymentData();\n    const decimals = await getDecimalsOf(data[0], signer);\n    return {\n        paymentToken: data[0],\n        fee: utils.formatUnits(data[1], decimals)\n    }\n}\n\nexport const getGasUsedByPost = async (signer: Signer): Promise<BigNumber> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.gasUsedByPost();\n}\n\nexport const getTargetContract = async (signer: Signer): Promise<string> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.target();\n}\n\nexport const getTokenToEthOutput = async (\n    signer: Signer, \n    amount: string, \n    token1: Token, \n    token2: string\n): Promise<string> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.getTokenToEthOutput(\n        ethers.utils.parseUnits(amount, token1.decimals),\n        [token1.address, token2]\n    )\n}\n\nexport const setMinBalance = async (signer: Signer, amount: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.setMinBalance(ethers.utils.parseEther(amount))\n}\n\nexport const setPaymentToken = async (signer: Signer, address: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.setPaymentToken(address)\n}\n\nexport const setFee = async (signer: Signer, amount: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.setFee(ethers.utils.parseEther(amount))\n}\n\nexport const whitelistToken = async (signer: Signer, address: string, whitelist: boolean): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.whitelistToken(address, whitelist)\n}\n\nexport const setGasUsedByPost = async (signer: Signer, amount: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.setGasUsedByPost(BigNumber.from(amount))\n}\n\nexport const setMinGas = async (signer: Signer, amount: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.setMinGas(BigNumber.from(amount))\n}\n\nexport const setTarget = async (signer: Signer, address: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.setTarget(address)\n}\n\nexport const setRelayHub = async (signer: Signer, address: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.setRelayHub(address)\n}\n\nexport const setForwarder = async (signer: Signer, address: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.setTrustedForwarder(address)\n}\n\nexport const withdrawFromRelayHub = async (signer: Signer, amount: string, receiver: string): Promise<ContractTransaction> => {\n    const contract = await loadPaymasterContract(signer);\n    return contract.withdrawRelayHubDepositTo(ethers.utils.parseEther(amount), receiver)\n}"]},"metadata":{},"sourceType":"module"}