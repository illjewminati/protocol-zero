{"ast":null,"code":"import { createAction } from \"typesafe-actions\";\nimport { isMetamaskInstalled } from \"../../services/web3_wrapper\";\nimport { Web3State } from \"../../types/blockchain\";\nimport { RelayProvider } from \"@opengsn/provider/dist/RelayProvider\";\nimport { ethers } from \"ethers\";\nimport { loadRelayHubContract } from \"../../services/relay_hub\";\nimport { getGasUsedByPost, getMinBalance, getMinGas, getOwner, getPaymentData, getTargetContract, getTokenToEthOutput, setFee, setForwarder, setGasUsedByPost, setMinBalance, setMinGas, setPaymentToken, setRelayHub, setTarget, whitelistToken, withdrawFromRelayHub } from \"../../services/paymaster\";\nimport { getTokenValue } from \"../../services/uniswap_router\";\nimport { getKnownTokens } from \"../../util/known_tokens\";\nimport { ERC20Controller } from \"smart-trade-networks\";\nimport { getTokenTotalSupply, getBalance, approveTokens, getAllowance } from \"../../services/erc20_service\";\nimport { swap } from \"../../services/gsn_service\";\nimport { NETWORK_ID } from \"../../common/constants\";\nexport const setWeb3State = createAction('blockchain/WEB3_STATE_set', resolve => {\n  return web3State => resolve(web3State);\n});\nexport const setEthAccount = createAction('blockchain/ETH_ACCOUNT_set', resolve => {\n  return ethAccount => resolve(ethAccount);\n});\nexport const setEthBalance = createAction('blockchain/ETH_BALANCE_set', resolve => {\n  return ethBalance => resolve(ethBalance);\n});\nexport const setTokenBalance = createAction('blockchain/TOKEN_BALANCE_set', resolve => {\n  return tokenBalance => resolve(tokenBalance);\n});\nexport const setNetworkID = createAction('blockchain/NETWORK_ID_set', resolve => {\n  return networkID => resolve(networkID);\n});\nexport const setNetworkBalance = createAction('blockchain/NETWORK_BALANCE_set', resolve => {\n  return balance => resolve(balance);\n});\nexport const setPaymasterData = createAction('blockchain/PAYMASTER_DATAset', resolve => {\n  return data => resolve(data);\n});\nexport const initializeBlockchainData = createAction('blockchain/init', resolve => {\n  return blockchainData => resolve(blockchainData);\n});\nexport const setGSNProvider = createAction('blockchain/GSN_PROVIDER_set', resolve => {\n  return gsnProvider => resolve(gsnProvider);\n});\nexport const setGasPrice = createAction('blockchain/GAS_PRICE_set', resolve => {\n  return gasPrice => resolve(gasPrice);\n});\nexport const setWeb3Provider = createAction('blockchain/WEB3_PROVIDER_set', resolve => {\n  return web3Provider => resolve(web3Provider);\n});\nexport const initWeb3 = () => {\n  return async (dispatch, _, {\n    initializeWeb3Wrapper,\n    listenNetwork\n  }) => {\n    const web3Wrapper = await initializeWeb3Wrapper();\n\n    if (web3Wrapper) {\n      dispatch(setWeb3Provider(web3Wrapper));\n      const networkId = (await web3Wrapper.getNetwork()).chainId;\n      dispatch(setNetworkID(networkId));\n\n      if (NETWORK_ID !== networkId) {\n        dispatch(setWeb3State(Web3State.Error));\n\n        const onChainChanged = () => {\n          dispatch(initWeb3());\n        };\n\n        listenNetwork(onChainChanged);\n        return;\n      }\n\n      dispatch(initWallet());\n    }\n  };\n};\nexport const initGSNProvider = () => {\n  return async dispatch => {\n    const gsnConfig = {\n      loggerConfiguration: {\n        logLevel: 'error'\n      },\n      paymasterAddress: process.env.GSN_PAYMASTER\n    };\n    const gsnProvider = await RelayProvider.newProvider({\n      provider: window.ethereum,\n      config: gsnConfig\n    }).init(); // const gasFees = await gsnProvider.calculateGasFees()\n\n    const provider = new ethers.providers.Web3Provider(gsnProvider); // dispatch(setGasPrice(gasFees.maxFeePerGas.toString()))\n\n    dispatch(setGSNProvider(provider));\n  };\n};\nexport const initWallet = () => {\n  return async (dispatch, _, {\n    enableWeb3\n  }) => {\n    dispatch(setWeb3State(Web3State.Loading));\n\n    try {\n      if (!isMetamaskInstalled()) {\n        dispatch(initializeAppNoMetamaskOrLocked());\n      }\n\n      if (typeof window.ethereum !== 'undefined') {\n        const onAccountsChange = () => {\n          console.log(\"callcak\");\n          dispatch(initWallet());\n        };\n\n        const enableMetamask = await enableWeb3(onAccountsChange);\n\n        if (enableMetamask) {\n          await dispatch(initBalances());\n          await dispatch(initGSNProvider());\n        } else {\n          dispatch(initializeAppNoMetamaskOrLocked());\n        }\n      } else {\n        dispatch(setWeb3State(Web3State.NotInstalled));\n      }\n    } catch (error) {\n      // Web3Error\n      console.log(error);\n      dispatch(setWeb3State(Web3State.Error));\n    }\n  };\n};\nexport const initializeAppNoMetamaskOrLocked = () => {\n  return async dispatch => {\n    if (isMetamaskInstalled()) {\n      dispatch(setWeb3State(Web3State.Locked));\n    } else {\n      dispatch(setWeb3State(Web3State.NotInstalled));\n    }\n  };\n};\nexport const initBalances = () => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    await dispatch(initWalletBeginCommon());\n    await dispatch(initWalletERC20());\n  };\n};\n\nconst initWalletBeginCommon = () => {\n  return async (dispatch, _, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const ethAccount = await web3Wrapper.getSigner().getAddress();\n    dispatch(initializeBlockchainData({\n      ethAccount,\n      web3State: Web3State.Done\n    }));\n    dispatch(initNetworksBalance());\n  };\n};\n\nconst initNetworksBalance = () => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    const ethAccount = await signer.getAddress();\n    const balance = (await web3Wrapper.getBalance(ethAccount)).toString();\n    const networkID = getState().blockchain.networkID;\n    const balanceData = {\n      balance,\n      networkID,\n      coin: \"ETH\"\n    };\n    const relayHub = await loadRelayHubContract(signer);\n    const paymasterBalance = (await relayHub.balanceOf(process.env.GSN_PAYMASTER)).toString();\n    const paymasterBalanceData = {\n      balance: paymasterBalance,\n      networkID,\n      coin: \"ETH\"\n    };\n    const paymasterMinBalance = await getMinBalance(signer);\n    const minGas = await getMinGas(signer);\n    const owner = await getOwner(signer);\n    const paymentData = await getPaymentData(signer);\n    const gasUsedByPost = await getGasUsedByPost(signer);\n    const targetContract = await getTargetContract(signer);\n    dispatch(setPaymasterData({\n      balance: paymasterBalanceData,\n      minBalance: paymasterMinBalance,\n      minGas,\n      owner,\n      paymentData,\n      gasUsedByPost,\n      targetContract\n    }));\n    dispatch(setNetworkBalance(balanceData));\n  };\n};\n\nconst initWalletERC20 = () => {\n  return async dispatch => {\n    dispatch(fetchTokenBalances());\n  };\n};\n\nexport const fetchTokenBalances = () => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    const ethAccount = await signer.getAddress();\n    const networkID = getState().blockchain.networkID;\n    const knownTokens = getKnownTokens(networkID).getTokens();\n    knownTokens.map(async token => {\n      const erc20 = new ERC20Controller(token.address, signer);\n      const balance = (await erc20.balanceOf(ethAccount)).toString();\n      const decimals = parseInt((await erc20.getDecimals()).toString());\n      let tokenValue = (await getTokenValue(signer, token.address, decimals))[1];\n      const totalSupply = await getTokenTotalSupply(signer, token.address, decimals);\n      const burned = await getBalance(signer, token.address, process.env.NULL_ADDRESS, decimals);\n      const tokenSwapAllowance = await getAllowance(signer, token.address, process.env.GSN_TOKEN_SWAP, decimals);\n      dispatch(setTokenBalance({\n        token,\n        balance,\n        networkID: networkID,\n        uniswapValue: tokenValue.toString(),\n        totalSupply,\n        burned,\n        tokenSwapAllowance\n      }));\n    });\n  };\n};\nexport const setAllowance = (tokenAddress, amount, to) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n\n    try {\n      return approveTokens(signer, tokenAddress, to, amount);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\nexport const swapTokens = (token, amount) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const gsnProvider = getState().blockchain.gsnProvider;\n    const minGas = getState().blockchain.paymaster.minGas;\n    const signer = web3Wrapper.getSigner();\n    return swap(signer, gsnProvider, token, amount, minGas.toString());\n  };\n};\nexport const reviewSwap = (amount, token) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return getTokenToEthOutput(signer, amount, token, process.env.UNISWAP_WETH);\n  };\n};\nexport const setPaymasterMinBalance = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setMinBalance(signer, amount);\n  };\n};\nexport const setPaymasterPaymentToken = address => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setPaymentToken(signer, address);\n  };\n};\nexport const setPaymasterFee = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setFee(signer, amount);\n  };\n};\nexport const setWhitelist = (address, whitelist) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return whitelistToken(signer, address, whitelist);\n  };\n};\nexport const setPaymasterGasUsedByPost = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setGasUsedByPost(signer, amount);\n  };\n};\nexport const setPamasterMinGas = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setMinGas(signer, amount);\n  };\n};\nexport const setPaymasterTarget = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setTarget(signer, amount);\n  };\n};\nexport const setPaymasterRelayHub = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setRelayHub(signer, amount);\n  };\n};\nexport const setPaymasterForwarder = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setForwarder(signer, amount);\n  };\n};\nexport const withdrawPaymaster = (amount, receiver) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return withdrawFromRelayHub(signer, amount, receiver);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}