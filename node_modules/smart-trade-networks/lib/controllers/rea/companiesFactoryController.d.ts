import { BytesLike, ContractTransaction, Signer } from "ethers";
import { ProviderOrSigner } from "../../localTypes";
import { CompaniesFactory } from "../../types";
import { DecodedCall } from "../helpers/abiDecoderController";
export declare class CompaniesFactoryController {
    private _companiesFactoryAddress;
    private _signer;
    private _factoryContract?;
    constructor(companiesFactoryAddress: string, signerOrProvider: ProviderOrSigner);
    private _getCompaniesFactoryContract;
    static deployCompaniesFactory(signer: Signer, owner: string): Promise<CompaniesFactory>;
    /**Getters */
    getContract(): Promise<CompaniesFactory>;
    getCompanies(): Promise<Array<string>>;
    isCompanyOwner(companyAddress: string, owner: string): Promise<boolean>;
    getCompaniesBySignatorie(signatorie: string): Promise<Array<string>>;
    getSignersByCompany(companyAddress: string): Promise<Array<string>>;
    /** Setters */
    createCompany(owner: string, name: string, ipfsLink: BytesLike): Promise<ContractTransaction>;
    removeCompany(companyAddress: string): Promise<ContractTransaction>;
    approveCompany(companyAddress: string): Promise<ContractTransaction>;
    addCompanySignatorie(companyAddress: string, newSignatorie: string): Promise<ContractTransaction>;
    removeCompanySignatorie(companyAddress: string, signatorie: string): Promise<ContractTransaction>;
    /** Helpers */
    static encodeCall(functionName: string, args?: any[]): string;
    static decodeCall(data: string): DecodedCall | null;
}
