{"ast":null,"code":"import { createAction } from \"typesafe-actions\";\nimport { isMetamaskInstalled } from \"../../services/web3_wrapper\";\nimport { Web3State } from \"../../types/blockchain\";\nimport { RelayProvider } from \"@opengsn/provider/dist/RelayProvider\";\nimport { ethers } from \"ethers\";\nimport { loadRelayHubContract } from \"../../services/relay_hub\";\nimport { getGasUsedByPost, getMinBalance, getMinGas, getOwner, getPaymentData, getTargetContract, getTokenToEthOutput, setFee, setForwarder, setGasUsedByPost, setMinBalance, setMinGas, setPaymentToken, setRelayHub, setTarget, whitelistToken, withdrawFromRelayHub } from \"../../services/paymaster\";\nimport { getTokenValue } from \"../../services/uniswap_router\";\nimport { getKnownTokens } from \"../../util/known_tokens\";\nimport { ERC20Controller } from \"smart-trade-networks\";\nimport { getTokenTotalSupply, getBalance, approveTokens, getAllowance } from \"../../services/erc20_service\";\nimport { swap } from \"../../services/gsn_service\";\nimport { NETWORK_ID } from \"../../common/constants\";\nexport const setWeb3State = createAction('blockchain/WEB3_STATE_set', resolve => {\n  return web3State => resolve(web3State);\n});\nexport const setEthAccount = createAction('blockchain/ETH_ACCOUNT_set', resolve => {\n  return ethAccount => resolve(ethAccount);\n});\nexport const setEthBalance = createAction('blockchain/ETH_BALANCE_set', resolve => {\n  return ethBalance => resolve(ethBalance);\n});\nexport const setTokenBalance = createAction('blockchain/TOKEN_BALANCE_set', resolve => {\n  return tokenBalance => resolve(tokenBalance);\n});\nexport const setNetworkID = createAction('blockchain/NETWORK_ID_set', resolve => {\n  return networkID => resolve(networkID);\n});\nexport const setNetworkBalance = createAction('blockchain/NETWORK_BALANCE_set', resolve => {\n  return balance => resolve(balance);\n});\nexport const setPaymasterData = createAction('blockchain/PAYMASTER_DATAset', resolve => {\n  return data => resolve(data);\n});\nexport const initializeBlockchainData = createAction('blockchain/init', resolve => {\n  return blockchainData => resolve(blockchainData);\n});\nexport const setGSNProvider = createAction('blockchain/GSN_PROVIDER_set', resolve => {\n  return gsnProvider => resolve(gsnProvider);\n});\nexport const setGasPrice = createAction('blockchain/GAS_PRICE_set', resolve => {\n  return gasPrice => resolve(gasPrice);\n});\nexport const setWeb3Provider = createAction('blockchain/WEB3_PROVIDER_set', resolve => {\n  return web3Provider => resolve(web3Provider);\n});\nexport const initWeb3 = () => {\n  return async (dispatch, _, {\n    initializeWeb3Wrapper,\n    listenNetwork\n  }) => {\n    const web3Wrapper = await initializeWeb3Wrapper();\n\n    if (web3Wrapper) {\n      dispatch(setWeb3Provider(web3Wrapper));\n      const networkId = (await web3Wrapper.getNetwork()).chainId;\n      dispatch(setNetworkID(networkId));\n\n      if (NETWORK_ID !== networkId) {\n        dispatch(setWeb3State(Web3State.Error));\n\n        const onChainChanged = () => {\n          dispatch(initWeb3());\n        };\n\n        listenNetwork(onChainChanged);\n        return;\n      }\n\n      dispatch(initWallet());\n    }\n  };\n};\nexport const initGSNProvider = () => {\n  return async dispatch => {\n    const gsnConfig = {\n      loggerConfiguration: {\n        logLevel: 'error'\n      },\n      paymasterAddress: process.env.GSN_PAYMASTER\n    };\n    const gsnProvider = await RelayProvider.newProvider({\n      provider: window.ethereum,\n      config: gsnConfig\n    }).init(); // const gasFees = await gsnProvider.calculateGasFees()\n\n    const provider = new ethers.providers.Web3Provider(gsnProvider); // dispatch(setGasPrice(gasFees.maxFeePerGas.toString()))\n\n    dispatch(setGSNProvider(provider));\n  };\n};\nexport const initWallet = () => {\n  return async (dispatch, _, {\n    enableWeb3\n  }) => {\n    dispatch(setWeb3State(Web3State.Loading));\n\n    try {\n      if (!isMetamaskInstalled()) {\n        dispatch(initializeAppNoMetamaskOrLocked());\n      }\n\n      if (typeof window.ethereum !== 'undefined') {\n        const onAccountsChange = () => {\n          console.log(\"callcak\");\n          dispatch(initWallet());\n        };\n\n        const enableMetamask = await enableWeb3(onAccountsChange);\n\n        if (enableMetamask) {\n          await dispatch(initBalances());\n          await dispatch(initGSNProvider());\n        } else {\n          dispatch(initializeAppNoMetamaskOrLocked());\n        }\n      } else {\n        dispatch(setWeb3State(Web3State.NotInstalled));\n      }\n    } catch (error) {\n      // Web3Error\n      console.log(error);\n      dispatch(setWeb3State(Web3State.Error));\n    }\n  };\n};\nexport const initializeAppNoMetamaskOrLocked = () => {\n  return async dispatch => {\n    if (isMetamaskInstalled()) {\n      dispatch(setWeb3State(Web3State.Locked));\n    } else {\n      dispatch(setWeb3State(Web3State.NotInstalled));\n    }\n  };\n};\nexport const initBalances = () => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    await dispatch(initWalletBeginCommon());\n    await dispatch(initWalletERC20());\n  };\n};\n\nconst initWalletBeginCommon = () => {\n  return async (dispatch, _, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const ethAccount = await web3Wrapper.getSigner().getAddress();\n    dispatch(initializeBlockchainData({\n      ethAccount,\n      web3State: Web3State.Done\n    }));\n    dispatch(initNetworksBalance());\n  };\n};\n\nconst initNetworksBalance = () => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    const ethAccount = await signer.getAddress();\n    const balance = (await web3Wrapper.getBalance(ethAccount)).toString();\n    const networkID = getState().blockchain.networkID;\n    const balanceData = {\n      balance,\n      networkID,\n      coin: \"ETH\"\n    };\n    const relayHub = await loadRelayHubContract(signer);\n    const paymasterBalance = (await relayHub.balanceOf(process.env.GSN_PAYMASTER)).toString();\n    const paymasterBalanceData = {\n      balance: paymasterBalance,\n      networkID,\n      coin: \"ETH\"\n    };\n    const paymasterMinBalance = await getMinBalance(signer);\n    const minGas = await getMinGas(signer);\n    const owner = await getOwner(signer);\n    const paymentData = await getPaymentData(signer);\n    const gasUsedByPost = await getGasUsedByPost(signer);\n    const targetContract = await getTargetContract(signer);\n    dispatch(setPaymasterData({\n      balance: paymasterBalanceData,\n      minBalance: paymasterMinBalance,\n      minGas,\n      owner,\n      paymentData,\n      gasUsedByPost,\n      targetContract\n    }));\n    dispatch(setNetworkBalance(balanceData));\n  };\n};\n\nconst initWalletERC20 = () => {\n  return async dispatch => {\n    dispatch(fetchTokenBalances());\n  };\n};\n\nexport const fetchTokenBalances = () => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    const ethAccount = await signer.getAddress();\n    const networkID = getState().blockchain.networkID;\n    const knownTokens = getKnownTokens(networkID).getTokens();\n    knownTokens.map(async token => {\n      const erc20 = new ERC20Controller(token.address, signer);\n      const balance = (await erc20.balanceOf(ethAccount)).toString();\n      const decimals = parseInt((await erc20.getDecimals()).toString());\n      let tokenValue = (await getTokenValue(signer, token.address, decimals))[1];\n      const totalSupply = await getTokenTotalSupply(signer, token.address, decimals);\n      const burned = await getBalance(signer, token.address, process.env.NULL_ADDRESS, decimals);\n      const tokenSwapAllowance = await getAllowance(signer, token.address, process.env.GSN_TOKEN_SWAP, decimals);\n      dispatch(setTokenBalance({\n        token,\n        balance,\n        networkID: networkID,\n        uniswapValue: tokenValue.toString(),\n        totalSupply,\n        burned,\n        tokenSwapAllowance\n      }));\n    });\n  };\n};\nexport const setAllowance = (tokenAddress, amount, to) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n\n    try {\n      return approveTokens(signer, tokenAddress, to, amount);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\nexport const swapTokens = (token, amount) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const gsnProvider = getState().blockchain.gsnProvider;\n    const minGas = getState().blockchain.paymaster.minGas;\n    const signer = web3Wrapper.getSigner();\n    return swap(signer, gsnProvider, token, amount, minGas.toString());\n  };\n};\nexport const reviewSwap = (amount, token) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return getTokenToEthOutput(signer, amount, token, process.env.UNISWAP_WETH);\n  };\n};\nexport const setPaymasterMinBalance = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setMinBalance(signer, amount);\n  };\n};\nexport const setPaymasterPaymentToken = address => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setPaymentToken(signer, address);\n  };\n};\nexport const setPaymasterFee = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setFee(signer, amount);\n  };\n};\nexport const setWhitelist = (address, whitelist) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return whitelistToken(signer, address, whitelist);\n  };\n};\nexport const setPaymasterGasUsedByPost = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setGasUsedByPost(signer, amount);\n  };\n};\nexport const setPamasterMinGas = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setMinGas(signer, amount);\n  };\n};\nexport const setPaymasterTarget = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setTarget(signer, amount);\n  };\n};\nexport const setPaymasterRelayHub = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setRelayHub(signer, amount);\n  };\n};\nexport const setPaymasterForwarder = amount => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return setForwarder(signer, amount);\n  };\n};\nexport const withdrawPaymaster = (amount, receiver) => {\n  return async (dispatch, getState, {\n    getWeb3Wrapper\n  }) => {\n    const web3Wrapper = await getWeb3Wrapper();\n    const signer = web3Wrapper.getSigner();\n    return withdrawFromRelayHub(signer, amount, receiver);\n  };\n};","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/store/blockchain/actions.ts"],"names":["createAction","isMetamaskInstalled","Web3State","RelayProvider","ethers","loadRelayHubContract","getGasUsedByPost","getMinBalance","getMinGas","getOwner","getPaymentData","getTargetContract","getTokenToEthOutput","setFee","setForwarder","setGasUsedByPost","setMinBalance","setMinGas","setPaymentToken","setRelayHub","setTarget","whitelistToken","withdrawFromRelayHub","getTokenValue","getKnownTokens","ERC20Controller","getTokenTotalSupply","getBalance","approveTokens","getAllowance","swap","NETWORK_ID","setWeb3State","resolve","web3State","setEthAccount","ethAccount","setEthBalance","ethBalance","setTokenBalance","tokenBalance","setNetworkID","networkID","setNetworkBalance","balance","setPaymasterData","data","initializeBlockchainData","blockchainData","setGSNProvider","gsnProvider","setGasPrice","gasPrice","setWeb3Provider","web3Provider","initWeb3","dispatch","_","initializeWeb3Wrapper","listenNetwork","web3Wrapper","networkId","getNetwork","chainId","Error","onChainChanged","initWallet","initGSNProvider","gsnConfig","loggerConfiguration","logLevel","paymasterAddress","process","env","GSN_PAYMASTER","newProvider","provider","window","ethereum","config","init","providers","Web3Provider","enableWeb3","Loading","initializeAppNoMetamaskOrLocked","onAccountsChange","console","log","enableMetamask","initBalances","NotInstalled","error","Locked","getState","getWeb3Wrapper","initWalletBeginCommon","initWalletERC20","getSigner","getAddress","Done","initNetworksBalance","signer","toString","blockchain","balanceData","coin","relayHub","paymasterBalance","balanceOf","paymasterBalanceData","paymasterMinBalance","minGas","owner","paymentData","gasUsedByPost","targetContract","minBalance","fetchTokenBalances","knownTokens","getTokens","map","token","erc20","address","decimals","parseInt","getDecimals","tokenValue","totalSupply","burned","NULL_ADDRESS","tokenSwapAllowance","GSN_TOKEN_SWAP","uniswapValue","setAllowance","tokenAddress","amount","to","e","swapTokens","paymaster","reviewSwap","UNISWAP_WETH","setPaymasterMinBalance","setPaymasterPaymentToken","setPaymasterFee","setWhitelist","whitelist","setPaymasterGasUsedByPost","setPamasterMinGas","setPaymasterTarget","setPaymasterRelayHub","setPaymasterForwarder","withdrawPaymaster","receiver"],"mappings":"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","sourcesContent":["import { createAction } from \"typesafe-actions\";\n\nimport { isMetamaskInstalled } from \"../../services/web3_wrapper\";\nimport { ThunkCreator } from \"../../types/store\";\nimport { Balance, Blockchain, Paymaster, Token, TokenBalance, Web3State } from \"../../types/blockchain\";\nimport { RelayProvider } from \"@opengsn/provider/dist/RelayProvider\";\nimport { BigNumber, ethers, utils } from \"ethers\";\nimport { loadRelayHubContract } from \"../../services/relay_hub\";\nimport { getGasUsedByPost, getMinBalance, getMinGas, getOwner, getPaymentData, getTargetContract, getTokenToEthOutput, setFee, setForwarder, setGasUsedByPost, setMinBalance, setMinGas, setPaymentToken, setRelayHub, setTarget, whitelistToken, withdrawFromRelayHub } from \"../../services/paymaster\";\nimport { getTokenValue } from \"../../services/uniswap_router\";\nimport { getKnownTokens } from \"../../util/known_tokens\";\nimport { ERC20Controller } from \"smart-trade-networks\";\nimport { getTokenTotalSupply, getBalance, approveTokens, getAllowance } from \"../../services/erc20_service\";\nimport { swap } from \"../../services/gsn_service\";\nimport { getPaymasterData } from \"./selectors\";\nimport { retrieveError } from \"../../util/gsn_error_handler\";\nimport { NETWORK_ID } from \"../../common/constants\";\n\n\n\nexport const setWeb3State = createAction('blockchain/WEB3_STATE_set', resolve => {\n    return (web3State: Web3State) => resolve(web3State);\n});\n\nexport const setEthAccount = createAction('blockchain/ETH_ACCOUNT_set', resolve => {\n    return (ethAccount: string) => resolve(ethAccount);\n});\n\nexport const setEthBalance = createAction('blockchain/ETH_BALANCE_set', resolve => {\n    return (ethBalance: string) => resolve(ethBalance);\n});\n\nexport const setTokenBalance = createAction('blockchain/TOKEN_BALANCE_set', resolve => {\n    return (tokenBalance: TokenBalance) => resolve(tokenBalance);\n});\n\nexport const setNetworkID = createAction('blockchain/NETWORK_ID_set', resolve => {\n    return (networkID: number) => resolve(networkID);\n});\n\nexport const setNetworkBalance = createAction('blockchain/NETWORK_BALANCE_set', resolve => {\n    return (balance: Balance) => resolve(balance);\n});\n\nexport const setPaymasterData = createAction('blockchain/PAYMASTER_DATAset', resolve => {\n    return (data: Paymaster) => resolve(data);\n});\n\nexport const initializeBlockchainData = createAction('blockchain/init', resolve => {\n    return (blockchainData: Partial<Blockchain>) => resolve(blockchainData);\n});\n\nexport const setGSNProvider = createAction('blockchain/GSN_PROVIDER_set', resolve => {\n    return (gsnProvider: ethers.providers.Web3Provider) => resolve(gsnProvider);\n});\n\nexport const setGasPrice = createAction('blockchain/GAS_PRICE_set', resolve => {\n    return (gasPrice: string) => resolve(gasPrice);\n});\n\nexport const setWeb3Provider = createAction('blockchain/WEB3_PROVIDER_set', resolve => {\n    return (web3Provider: ethers.providers.Web3Provider) => resolve(web3Provider);\n});\n\nexport const initWeb3: ThunkCreator<Promise<any>> = () => {\n    return async (dispatch, _, { initializeWeb3Wrapper, listenNetwork }) => {\n        const web3Wrapper = await initializeWeb3Wrapper();\n        if (web3Wrapper) {\n            dispatch(setWeb3Provider(web3Wrapper));\n\n            const networkId = (await web3Wrapper.getNetwork()).chainId\n            dispatch(setNetworkID(networkId))\n\n            if (NETWORK_ID !== networkId) {\n                dispatch(setWeb3State(Web3State.Error));\n\n                const onChainChanged = () => {\n                    dispatch(initWeb3())\n                }\n\n                listenNetwork(onChainChanged);\n                return;\n            }\n            dispatch(initWallet())\n        }\n    }\n}\n\nexport const initGSNProvider: ThunkCreator<Promise<any>> = () => {\n    return async (dispatch) => {\n        const gsnConfig: Partial<any> = {\n            loggerConfiguration: {\n                logLevel: 'error'\n            },\n            paymasterAddress: process.env.GSN_PAYMASTER\n        }\n\n        const gsnProvider = await RelayProvider.newProvider({\n            provider: window.ethereum,\n            config: gsnConfig\n        }).init()\n\n        // const gasFees = await gsnProvider.calculateGasFees()\n\n        const provider = new ethers.providers.Web3Provider(gsnProvider)\n        // dispatch(setGasPrice(gasFees.maxFeePerGas.toString()))\n\n        dispatch(setGSNProvider(provider));\n\n    }\n}\n\nexport const initWallet: ThunkCreator<Promise<any>> = () => {\n    return async (dispatch, _, { enableWeb3 }) => {\n        dispatch(setWeb3State(Web3State.Loading));\n        try {\n            if (!isMetamaskInstalled()) {\n                dispatch(initializeAppNoMetamaskOrLocked());\n            }\n\n            if (typeof window.ethereum !== 'undefined') {\n\n                const onAccountsChange = () => {\n                    console.log(\"callcak\")\n                    dispatch(initWallet())\n                }\n\n                const enableMetamask = await enableWeb3(onAccountsChange);\n\n                if (enableMetamask) {\n\n                    await dispatch(initBalances())\n                    await dispatch(initGSNProvider())\n\n\n                } else {\n                    dispatch(initializeAppNoMetamaskOrLocked());\n                }\n            } else {\n                dispatch(setWeb3State(Web3State.NotInstalled));\n            }\n        } catch (error) {\n            // Web3Error\n            console.log(error)\n            dispatch(setWeb3State(Web3State.Error));\n        }\n    };\n};\n\nexport const initializeAppNoMetamaskOrLocked: ThunkCreator = () => {\n    return async (dispatch) => {\n        if (isMetamaskInstalled()) {\n            dispatch(setWeb3State(Web3State.Locked));\n        } else {\n            dispatch(setWeb3State(Web3State.NotInstalled));\n        }\n    };\n};\n\nexport const initBalances: ThunkCreator<Promise<any>> = () => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        await dispatch(initWalletBeginCommon());\n        await dispatch(initWalletERC20());\n    }\n}\n\n\nconst initWalletBeginCommon: ThunkCreator<Promise<any>> = () => {\n    return async (dispatch, _, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const ethAccount = await web3Wrapper.getSigner().getAddress();\n        dispatch(\n            initializeBlockchainData({\n                ethAccount,\n                web3State: Web3State.Done,\n            }),\n        );\n        dispatch(initNetworksBalance())\n    };\n};\n\nconst initNetworksBalance: ThunkCreator<Promise<any>> = () => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner();\n        const ethAccount = await signer.getAddress();\n        const balance = (await web3Wrapper.getBalance(ethAccount)).toString();\n        const networkID = getState().blockchain.networkID\n        const balanceData: Balance = {\n            balance,\n            networkID,\n            coin: \"ETH\"\n        }\n\n        const relayHub = await loadRelayHubContract(signer)\n        const paymasterBalance = (await relayHub.balanceOf(process.env.GSN_PAYMASTER)).toString();\n        const paymasterBalanceData: Balance = {\n            balance: paymasterBalance,\n            networkID,\n            coin: \"ETH\"\n        }\n        const paymasterMinBalance = await getMinBalance(signer);\n        const minGas = await getMinGas(signer);\n\n        const owner = await getOwner(signer);\n\n        const paymentData = await getPaymentData(signer);\n\n        const gasUsedByPost = await getGasUsedByPost(signer);\n\n        const targetContract = await getTargetContract(signer)\n\n\n        dispatch(setPaymasterData({\n            balance: paymasterBalanceData,\n            minBalance: paymasterMinBalance,\n            minGas,\n            owner,\n            paymentData,\n            gasUsedByPost,\n            targetContract\n        }))\n\n        dispatch(setNetworkBalance(balanceData))\n    };\n};\n\nconst initWalletERC20: ThunkCreator<Promise<any>> = () => {\n    return async (dispatch) => {\n        dispatch(fetchTokenBalances())\n    };\n};\n\nexport const fetchTokenBalances: ThunkCreator<Promise<any>> = () => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        const ethAccount = await signer.getAddress();\n        const networkID = getState().blockchain.networkID\n\n\n        const knownTokens = getKnownTokens(networkID).getTokens()\n        knownTokens.map(async token => {\n            const erc20 = new ERC20Controller(token.address, signer);\n            const balance = (await erc20.balanceOf(ethAccount)).toString();\n            const decimals = parseInt((await erc20.getDecimals()).toString())\n\n            let tokenValue = (await getTokenValue(signer, token.address, decimals))[1]\n\n            const totalSupply = await getTokenTotalSupply(signer, token.address, decimals);\n\n            const burned = await getBalance(signer, token.address, process.env.NULL_ADDRESS, decimals);\n\n            const tokenSwapAllowance = await getAllowance(signer, token.address, process.env.GSN_TOKEN_SWAP, decimals);\n\n\n\n            dispatch(setTokenBalance({\n                token,\n                balance,\n                networkID: networkID,\n                uniswapValue: tokenValue.toString(),\n                totalSupply,\n                burned,\n                tokenSwapAllowance\n            }));\n        })\n    }\n}\n\n\nexport const setAllowance: ThunkCreator<Promise<any>> = (\n    tokenAddress: string,\n    amount: string,\n    to: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        try {\n            return approveTokens(signer, tokenAddress, to, amount);\n        } catch (e) {\n            console.log(e)\n        }\n    }\n}\n\n\nexport const swapTokens: ThunkCreator<Promise<any>> = (\n    token: Token,\n    amount: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const gsnProvider = getState().blockchain.gsnProvider;\n        const minGas = getState().blockchain.paymaster.minGas;\n        const signer = web3Wrapper.getSigner()\n        return swap(signer, gsnProvider, token, amount, minGas.toString());\n    }\n}\n\nexport const reviewSwap: ThunkCreator<Promise<any>> = (\n    amount: string,\n    token: Token\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return getTokenToEthOutput(signer, amount, token, process.env.UNISWAP_WETH)\n    }\n}\n\nexport const setPaymasterMinBalance: ThunkCreator<Promise<any>> = (\n    amount: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return setMinBalance(signer, amount);\n    }\n}\n\nexport const setPaymasterPaymentToken: ThunkCreator<Promise<any>> = (\n    address: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return setPaymentToken(signer, address);\n    }\n}\n\nexport const setPaymasterFee: ThunkCreator<Promise<any>> = (\n    amount: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return setFee(signer, amount);\n    }\n}\n\nexport const setWhitelist: ThunkCreator<Promise<any>> = (\n    address: string,\n    whitelist: boolean\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return whitelistToken(signer, address, whitelist);\n    }\n}\n\nexport const setPaymasterGasUsedByPost: ThunkCreator<Promise<any>> = (\n    amount: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return setGasUsedByPost(signer, amount);\n    }\n}\n\nexport const setPamasterMinGas: ThunkCreator<Promise<any>> = (\n    amount: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return setMinGas(signer, amount);\n    }\n}\n\nexport const setPaymasterTarget: ThunkCreator<Promise<any>> = (\n    amount: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return setTarget(signer, amount);\n    }\n}\n\nexport const setPaymasterRelayHub: ThunkCreator<Promise<any>> = (\n    amount: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return setRelayHub(signer, amount);\n    }\n}\n\nexport const setPaymasterForwarder: ThunkCreator<Promise<any>> = (\n    amount: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return setForwarder(signer, amount);\n    }\n}\n\n\nexport const withdrawPaymaster: ThunkCreator<Promise<any>> = (\n    amount: string,\n    receiver: string\n) => {\n    return async (dispatch, getState, { getWeb3Wrapper }) => {\n        const web3Wrapper = await getWeb3Wrapper();\n        const signer = web3Wrapper.getSigner()\n        return withdrawFromRelayHub(signer, amount, receiver);\n    }\n}"]},"metadata":{},"sourceType":"module"}