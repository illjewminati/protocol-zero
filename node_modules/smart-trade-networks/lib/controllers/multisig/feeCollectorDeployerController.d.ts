import { BigNumberish, BytesLike, ContractTransaction, Signer } from "ethers";
import { FeeCollectorDeployer } from "../../types";
import { ProviderOrSigner } from "../../localTypes";
import { DecodedCall } from "../helpers/abiDecoderController";
export declare class FeeCollectorDeployerController {
    private _signer;
    private _feeCollectorDeployerAddress;
    private _feeCollectorDeployerContract?;
    constructor(feeCollectorAddress: string, signerOrProvider: ProviderOrSigner);
    private _getcontract;
    static deployFeeCollectorDeployer(signer: Signer): Promise<FeeCollectorDeployer>;
    /**Getters */
    getContract(): Promise<FeeCollectorDeployer>;
    getFeeCollectorBytecode(): Promise<BytesLike>;
    getProxyBytecode(): Promise<BytesLike>;
    /** @param bytecode  can be retrieved by calling get___Bytecode()*/
    /** @param _salt is a random number used to create an address */
    getAddress(bytecode: BytesLike, salt: BigNumberish): Promise<BytesLike>;
    getSalt(contractAddress: string): Promise<BigNumberish>;
    /**Setters */
    deployPrecomputed(bytecode: BytesLike, salt: BigNumberish): Promise<ContractTransaction>;
    setProxyOwner(newOwner: string, proxy: string): Promise<ContractTransaction>;
    /** Helpers */
    static encodeCall(functionName: string, args?: any[]): string;
    static decodeCall(data: string): DecodedCall | null;
    static getBytecode(): string;
}
