{"ast":null,"code":"import _classCallCheck from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Config } from '../common/config';\nimport { UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION } from '../common/constants';\nvar KNOWN_TOKENS_META_DATA = Config.getConfig().tokens;\nexport var KnownTokens = function KnownTokens(knownTokensMetadata, networkID) {\n  var _this = this;\n\n  _classCallCheck(this, KnownTokens);\n\n  _defineProperty(this, \"_tokens\", []);\n\n  _defineProperty(this, \"_networkID\", 5);\n\n  _defineProperty(this, \"getTokenBySymbol\", function (symbol) {\n    var symbolInLowerCaseScore = symbol.toLowerCase();\n\n    var token = _this._tokens.find(function (t) {\n      return t.symbol === symbolInLowerCaseScore;\n    });\n\n    if (!token) {\n      var errorMessage = \"Token with symbol \".concat(symbol, \" not found in known tokens\");\n      throw new Error(errorMessage);\n    }\n\n    return token;\n  });\n\n  _defineProperty(this, \"getTokenByAddress\", function (address) {\n    var addressInLowerCase = address.toLowerCase();\n\n    var token = _this._tokens.find(function (t) {\n      return t.address.toLowerCase() === addressInLowerCase;\n    });\n\n    if (!token) {\n      throw new Error(\"Token with address \".concat(address, \" not found in known tokens\"));\n    }\n\n    return token;\n  });\n\n  _defineProperty(this, \"getTokens\", function () {\n    return _this._tokens;\n  });\n\n  this._tokens = mapTokensMetaDataToTokenByNetworkId(knownTokensMetadata, networkID);\n};\nvar knownTokens;\nvar selectedNetworkId;\nexport var getKnownTokens = function getKnownTokens(networkID) {\n  if (!knownTokens || !selectedNetworkId || networkID !== selectedNetworkId) {\n    knownTokens = new KnownTokens(KNOWN_TOKENS_META_DATA, networkID);\n  }\n\n  return knownTokens;\n};\n\nvar mapTokensMetaDataToTokenByNetworkId = function mapTokensMetaDataToTokenByNetworkId(tokensMetaData, networkID) {\n  var data = tokensMetaData.filter(function (tokenMetaData) {\n    return tokenMetaData.addresses[networkID];\n  }).map(function (tokenMetaData) {\n    return {\n      address: tokenMetaData.addresses[networkID],\n      symbol: tokenMetaData.symbol,\n      decimals: tokenMetaData.decimals,\n      name: tokenMetaData.name,\n      primaryColor: tokenMetaData.primaryColor,\n      icon: tokenMetaData.icon,\n      displayDecimals: tokenMetaData.displayDecimals || UI_DECIMALS_DISPLAYED_DEFAULT_PRECISION\n    };\n  });\n  return data;\n};","map":null,"metadata":{},"sourceType":"module"}