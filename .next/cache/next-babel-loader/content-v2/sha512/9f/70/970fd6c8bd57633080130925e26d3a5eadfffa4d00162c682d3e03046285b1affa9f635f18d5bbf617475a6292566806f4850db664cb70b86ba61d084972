{"ast":null,"code":"import { ethers } from 'ethers';\nimport Web3 from 'web3';\nlet web3Wrapper = null;\nexport const isMetamaskInstalled = () => {\n  const {\n    ethereum,\n    web3\n  } = window;\n  return ethereum || web3;\n}; //0x02c1f487092fe14ae85cc2411b951669518df586\n//0x05db46b2588ebb55b4525b5d6103f41a776f9ec2\n\nexport const enableWeb3 = async callback => {\n  const {\n    ethereum,\n    location\n  } = window;\n\n  try {\n    const provider = new ethers.providers.Web3Provider(ethereum, \"any\"); // Request account access if needed\n\n    await provider.send(\"eth_requestAccounts\", []); // Subscriptions register\n\n    ethereum.on('accountsChanged', async accounts => {\n      // Reload to avoid MetaMask bug: \"MetaMask - RPC Error: Internal JSON-RPC\"\n      callback();\n    });\n    return true;\n  } catch (error) {\n    // The user denied account access\n    return false;\n  }\n};\nexport const initializeWeb3Wrapper = async () => {\n  const {\n    ethereum,\n    web3\n  } = window;\n\n  if (ethereum) {\n    web3Wrapper = new ethers.providers.Web3Provider(ethereum, \"any\");\n  } else if (web3) {\n    web3Wrapper = new ethers.providers.Web3Provider(web3.currentProvider);\n  } else {\n    return null;\n  }\n\n  return web3Wrapper;\n};\nexport const listenNetwork = callback => {\n  const {\n    ethereum,\n    location\n  } = window;\n  ethereum.on('networkChanged', async network => {\n    console.log(\"cbba\");\n    callback();\n  });\n};\nexport const getWeb3Wrapper = async () => {\n  while (!web3Wrapper) {\n    // if web3Wrapper is not set yet, wait and retry\n    await sleep(100);\n  }\n\n  return web3Wrapper;\n};\nexport const getWeb3 = () => {\n  const {\n    ethereum\n  } = window;\n  return ethereum;\n};\n\nconst _getExternalProvider = async url => {\n  const provider = new ethers.providers.JsonRpcProvider(url);\n  await provider.ready;\n  return provider;\n};\n\nexport const getExternalSigner = async (account, url) => {\n  const provider = await _getExternalProvider(url);\n  return new ethers.VoidSigner(account, provider);\n};\nexport const getExternalProvider = url => {\n  return _getExternalProvider(url);\n};\nexport const getWebSocketProvider = url => {\n  return new Web3(new Web3.providers.WebsocketProvider(url));\n};\nexport const getWeb3Provider = url => {\n  return new Web3(new Web3.providers.HttpProvider(url));\n};\n\nconst sleep = timeout => new Promise(resolve => setTimeout(resolve, timeout));","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/services/web3_wrapper.ts"],"names":["ethers","Web3","web3Wrapper","isMetamaskInstalled","ethereum","web3","window","enableWeb3","callback","location","provider","providers","Web3Provider","send","on","accounts","error","initializeWeb3Wrapper","currentProvider","listenNetwork","network","console","log","getWeb3Wrapper","sleep","getWeb3","_getExternalProvider","url","JsonRpcProvider","ready","getExternalSigner","account","VoidSigner","getExternalProvider","getWebSocketProvider","WebsocketProvider","getWeb3Provider","HttpProvider","timeout","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\nimport Web3 from 'web3';\n\nlet web3Wrapper: ethers.providers.Web3Provider | null = null;\n\nexport const isMetamaskInstalled = (): boolean => {\n    const { ethereum, web3 } = window;\n    return ethereum || web3;\n};\n\n//0x02c1f487092fe14ae85cc2411b951669518df586\n//0x05db46b2588ebb55b4525b5d6103f41a776f9ec2\n\nexport const enableWeb3 = async (callback: () => void): Promise<boolean> => {\n    const { ethereum, location } = window;\n    try {\n\n        const provider = new ethers.providers.Web3Provider(ethereum, \"any\");\n        // Request account access if needed\n        await provider.send(\"eth_requestAccounts\", []);\n\n        // Subscriptions register\n        ethereum.on('accountsChanged', async (accounts: []) => {\n            // Reload to avoid MetaMask bug: \"MetaMask - RPC Error: Internal JSON-RPC\"\n            callback();\n        });\n        \n        return true;\n    } catch (error) {\n        // The user denied account access\n        return false;\n    }\n}\n\nexport const initializeWeb3Wrapper = async (): Promise<ethers.providers.Web3Provider | null> => {\n    const { ethereum, web3 } = window;\n\n    if (ethereum) {\n        web3Wrapper = new ethers.providers.Web3Provider(ethereum, \"any\");\n    } else if (web3) {\n        web3Wrapper =  new ethers.providers.Web3Provider(web3.currentProvider);\n    } else {\n        return null;\n    }\n    return web3Wrapper;\n\n};\n\nexport const listenNetwork = (callback: () => void): any => {\n    const { ethereum, location } = window;\n    ethereum.on('networkChanged', async (network: number) => {\n        console.log(\"cbba\")\n        callback()\n    });\n}\n\nexport const getWeb3Wrapper = async (): Promise<ethers.providers.Web3Provider> => {\n    while (!web3Wrapper) {\n        // if web3Wrapper is not set yet, wait and retry\n        await sleep(100);\n    }\n    return web3Wrapper;\n};\n\nexport const getWeb3 = () => {\n    const { ethereum } = window;\n    return ethereum\n}\n\nconst _getExternalProvider = async(url: string): Promise<ethers.providers.JsonRpcProvider> => {\n    const provider = new ethers.providers.JsonRpcProvider(url);\n    await provider.ready;\n    return provider;\n}\n\nexport const getExternalSigner = async (account: string, url: string): Promise<ethers.Signer> => {\n    const provider = await _getExternalProvider(url);\n    return new ethers.VoidSigner(account, provider)\n} \n\nexport const getExternalProvider = (url: string): Promise<ethers.providers.JsonRpcProvider> => {\n    return _getExternalProvider(url);\n} \n\nexport const getWebSocketProvider = (url: string): Web3 => {\n    return new Web3(new Web3.providers.WebsocketProvider(url));\n}\n\nexport const getWeb3Provider = (url: string): Web3 => {\n    return new Web3(new Web3.providers.HttpProvider(url))\n}\n\nconst sleep = (timeout: number) => new Promise<void>(resolve => setTimeout(resolve, timeout));\n\n\n\n\n   "]},"metadata":{},"sourceType":"module"}