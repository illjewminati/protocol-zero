"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERC721 = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _contracts = require("@ethersproject/contracts");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ERC721 = /*#__PURE__*/function (_Contract) {
  (0, _inherits2["default"])(ERC721, _Contract);

  var _super = _createSuper(ERC721);

  function ERC721() {
    var _this;

    (0, _classCallCheck2["default"])(this, ERC721);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "interface", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functions", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "callStatic", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filters", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "estimateGas", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "populateTransaction", void 0);
    return _this;
  }

  return ERC721;
}(_contracts.Contract);

exports.ERC721 = ERC721;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9FUkM3MjEuZC50cyJdLCJuYW1lcyI6WyJFUkM3MjEiLCJDb250cmFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7OztJQTRHYUEsTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQUFlQyxtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IHtcbiAgZXRoZXJzLFxuICBFdmVudEZpbHRlcixcbiAgU2lnbmVyLFxuICBCaWdOdW1iZXIsXG4gIEJpZ051bWJlcmlzaCxcbiAgUG9wdWxhdGVkVHJhbnNhY3Rpb24sXG59IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7XG4gIENvbnRyYWN0LFxuICBDb250cmFjdFRyYW5zYWN0aW9uLFxuICBPdmVycmlkZXMsXG4gIENhbGxPdmVycmlkZXMsXG59IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb250cmFjdHNcIjtcbmltcG9ydCB7IEJ5dGVzTGlrZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgTGlzdGVuZXIsIFByb3ZpZGVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3ZpZGVyc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25GcmFnbWVudCwgRXZlbnRGcmFnbWVudCwgUmVzdWx0IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FiaVwiO1xuXG5pbnRlcmZhY2UgRVJDNzIxSW50ZXJmYWNlIGV4dGVuZHMgZXRoZXJzLnV0aWxzLkludGVyZmFjZSB7XG4gIGZ1bmN0aW9uczoge1xuICAgIFwic3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiYmFsYW5jZU9mKGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJvd25lck9mKHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJuYW1lKClcIjogRnVuY3Rpb25GcmFnbWVudDtcbiAgICBcInN5bWJvbCgpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJ0b2tlblVSSSh1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJnZXRBcHByb3ZlZCh1aW50MjU2KVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwic2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyxib29sKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIFwiaXNBcHByb3ZlZEZvckFsbChhZGRyZXNzLGFkZHJlc3MpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJ0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCI6IEZ1bmN0aW9uRnJhZ21lbnQ7XG4gICAgXCJzYWZlVHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGJ5dGVzKVwiOiBGdW5jdGlvbkZyYWdtZW50O1xuICB9O1xuXG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInN1cHBvcnRzSW50ZXJmYWNlXCIsXG4gICAgdmFsdWVzOiBbQnl0ZXNMaWtlXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcImJhbGFuY2VPZlwiLCB2YWx1ZXM6IFtzdHJpbmddKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJvd25lck9mXCIsXG4gICAgdmFsdWVzOiBbQmlnTnVtYmVyaXNoXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShmdW5jdGlvbkZyYWdtZW50OiBcIm5hbWVcIiwgdmFsdWVzPzogdW5kZWZpbmVkKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoZnVuY3Rpb25GcmFnbWVudDogXCJzeW1ib2xcIiwgdmFsdWVzPzogdW5kZWZpbmVkKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0b2tlblVSSVwiLFxuICAgIHZhbHVlczogW0JpZ051bWJlcmlzaF1cbiAgKTogc3RyaW5nO1xuICBlbmNvZGVGdW5jdGlvbkRhdGEoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJhcHByb3ZlXCIsXG4gICAgdmFsdWVzOiBbc3RyaW5nLCBCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0QXBwcm92ZWRcIixcbiAgICB2YWx1ZXM6IFtCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic2V0QXBwcm92YWxGb3JBbGxcIixcbiAgICB2YWx1ZXM6IFtzdHJpbmcsIGJvb2xlYW5dXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiaXNBcHByb3ZlZEZvckFsbFwiLFxuICAgIHZhbHVlczogW3N0cmluZywgc3RyaW5nXVxuICApOiBzdHJpbmc7XG4gIGVuY29kZUZ1bmN0aW9uRGF0YShcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInRyYW5zZmVyRnJvbVwiLFxuICAgIHZhbHVlczogW3N0cmluZywgc3RyaW5nLCBCaWdOdW1iZXJpc2hdXG4gICk6IHN0cmluZztcbiAgZW5jb2RlRnVuY3Rpb25EYXRhKFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic2FmZVRyYW5zZmVyRnJvbVwiLFxuICAgIHZhbHVlczogW3N0cmluZywgc3RyaW5nLCBCaWdOdW1iZXJpc2gsIEJ5dGVzTGlrZV1cbiAgKTogc3RyaW5nO1xuXG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwic3VwcG9ydHNJbnRlcmZhY2VcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50OiBcImJhbGFuY2VPZlwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwib3duZXJPZlwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwibmFtZVwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwic3ltYm9sXCIsIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogXCJ0b2tlblVSSVwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQ6IFwiYXBwcm92ZVwiLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQ7XG4gIGRlY29kZUZ1bmN0aW9uUmVzdWx0KFxuICAgIGZ1bmN0aW9uRnJhZ21lbnQ6IFwiZ2V0QXBwcm92ZWRcIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInNldEFwcHJvdmFsRm9yQWxsXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJpc0FwcHJvdmVkRm9yQWxsXCIsXG4gICAgZGF0YTogQnl0ZXNMaWtlXG4gICk6IFJlc3VsdDtcbiAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoXG4gICAgZnVuY3Rpb25GcmFnbWVudDogXCJ0cmFuc2ZlckZyb21cIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuICBkZWNvZGVGdW5jdGlvblJlc3VsdChcbiAgICBmdW5jdGlvbkZyYWdtZW50OiBcInNhZmVUcmFuc2ZlckZyb21cIixcbiAgICBkYXRhOiBCeXRlc0xpa2VcbiAgKTogUmVzdWx0O1xuXG4gIGV2ZW50czoge1xuICAgIFwiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCI6IEV2ZW50RnJhZ21lbnQ7XG4gICAgXCJBcHByb3ZhbEZvckFsbChhZGRyZXNzLGFkZHJlc3MsYm9vbClcIjogRXZlbnRGcmFnbWVudDtcbiAgICBcIlRyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiOiBFdmVudEZyYWdtZW50O1xuICB9O1xuXG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiQXBwcm92YWxcIik6IEV2ZW50RnJhZ21lbnQ7XG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiQXBwcm92YWxGb3JBbGxcIik6IEV2ZW50RnJhZ21lbnQ7XG4gIGdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWM6IFwiVHJhbnNmZXJcIik6IEV2ZW50RnJhZ21lbnQ7XG59XG5cbmV4cG9ydCBjbGFzcyBFUkM3MjEgZXh0ZW5kcyBDb250cmFjdCB7XG4gIGNvbm5lY3Qoc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIgfCBzdHJpbmcpOiB0aGlzO1xuICBhdHRhY2goYWRkcmVzc09yTmFtZTogc3RyaW5nKTogdGhpcztcbiAgZGVwbG95ZWQoKTogUHJvbWlzZTx0aGlzPjtcblxuICBvbihldmVudDogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXM7XG4gIG9uY2UoZXZlbnQ6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuICBhZGRMaXN0ZW5lcihldmVudE5hbWU6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lOiBFdmVudEZpbHRlciB8IHN0cmluZyk6IHRoaXM7XG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZTogYW55LCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzO1xuXG4gIGludGVyZmFjZTogRVJDNzIxSW50ZXJmYWNlO1xuXG4gIGZ1bmN0aW9uczoge1xuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzE2NS1zdXBwb3J0c0ludGVyZmFjZX0uXG4gICAgICovXG4gICAgc3VwcG9ydHNJbnRlcmZhY2UoXG4gICAgICBpbnRlcmZhY2VJZDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5dPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzE2NS1zdXBwb3J0c0ludGVyZmFjZX0uXG4gICAgICovXG4gICAgXCJzdXBwb3J0c0ludGVyZmFjZShieXRlczQpXCIoXG4gICAgICBpbnRlcmZhY2VJZDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5dPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1iYWxhbmNlT2Z9LlxuICAgICAqL1xuICAgIGJhbGFuY2VPZihvd25lcjogc3RyaW5nLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbQmlnTnVtYmVyXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtCaWdOdW1iZXJdPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1vd25lck9mfS5cbiAgICAgKi9cbiAgICBvd25lck9mKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLW93bmVyT2Z9LlxuICAgICAqL1xuICAgIFwib3duZXJPZih1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W3N0cmluZ10+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAgICovXG4gICAgbmFtZShvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS1uYW1lfS5cbiAgICAgKi9cbiAgICBcIm5hbWUoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgc3ltYm9sKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgXCJzeW1ib2woKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICB0b2tlblVSSShcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICBcInRva2VuVVJJKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYXBwcm92ZX0uXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWFwcHJvdmV9LlxuICAgICAqL1xuICAgIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAgICovXG4gICAgZ2V0QXBwcm92ZWQoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbc3RyaW5nXT47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtZ2V0QXBwcm92ZWR9LlxuICAgICAqL1xuICAgIFwiZ2V0QXBwcm92ZWQodWludDI1NilcIihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFtzdHJpbmddPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1zZXRBcHByb3ZhbEZvckFsbH0uXG4gICAgICovXG4gICAgc2V0QXBwcm92YWxGb3JBbGwoXG4gICAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgICAgYXBwcm92ZWQ6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBcInNldEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MsYm9vbClcIihcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtaXNBcHByb3ZlZEZvckFsbH0uXG4gICAgICovXG4gICAgaXNBcHByb3ZlZEZvckFsbChcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8W2Jvb2xlYW5dPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1pc0FwcHJvdmVkRm9yQWxsfS5cbiAgICAgKi9cbiAgICBcImlzQXBwcm92ZWRGb3JBbGwoYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxbYm9vbGVhbl0+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXRyYW5zZmVyRnJvbX0uXG4gICAgICovXG4gICAgdHJhbnNmZXJGcm9tKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNhZmVUcmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlcylcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1zYWZlVHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcbiAgfTtcblxuICAvKipcbiAgICogU2VlIHtJRVJDMTY1LXN1cHBvcnRzSW50ZXJmYWNlfS5cbiAgICovXG4gIHN1cHBvcnRzSW50ZXJmYWNlKFxuICAgIGludGVyZmFjZUlkOiBCeXRlc0xpa2UsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkMxNjUtc3VwcG9ydHNJbnRlcmZhY2V9LlxuICAgKi9cbiAgXCJzdXBwb3J0c0ludGVyZmFjZShieXRlczQpXCIoXG4gICAgaW50ZXJmYWNlSWQ6IEJ5dGVzTGlrZSxcbiAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1iYWxhbmNlT2Z9LlxuICAgKi9cbiAgYmFsYW5jZU9mKG93bmVyOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1iYWxhbmNlT2Z9LlxuICAgKi9cbiAgXCJiYWxhbmNlT2YoYWRkcmVzcylcIihcbiAgICBvd25lcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAqL1xuICBvd25lck9mKHRva2VuSWQ6IEJpZ051bWJlcmlzaCwgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxLW93bmVyT2Z9LlxuICAgKi9cbiAgXCJvd25lck9mKHVpbnQyNTYpXCIoXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS1uYW1lfS5cbiAgICovXG4gIG5hbWUob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAqL1xuICBcIm5hbWUoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAqL1xuICBzeW1ib2wob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtc3ltYm9sfS5cbiAgICovXG4gIFwic3ltYm9sKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS10b2tlblVSSX0uXG4gICAqL1xuICB0b2tlblVSSSh0b2tlbklkOiBCaWdOdW1iZXJpc2gsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICovXG4gIFwidG9rZW5VUkkodWludDI1NilcIihcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1hcHByb3ZlfS5cbiAgICovXG4gIGFwcHJvdmUoXG4gICAgdG86IHN0cmluZyxcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1hcHByb3ZlfS5cbiAgICovXG4gIFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgdG86IHN0cmluZyxcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAqL1xuICBnZXRBcHByb3ZlZChcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAqL1xuICBcImdldEFwcHJvdmVkKHVpbnQyNTYpXCIoXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtc2V0QXBwcm92YWxGb3JBbGx9LlxuICAgKi9cbiAgc2V0QXBwcm92YWxGb3JBbGwoXG4gICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxDb250cmFjdFRyYW5zYWN0aW9uPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICovXG4gIFwic2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyxib29sKVwiKFxuICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgYXBwcm92ZWQ6IGJvb2xlYW4sXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1pc0FwcHJvdmVkRm9yQWxsfS5cbiAgICovXG4gIGlzQXBwcm92ZWRGb3JBbGwoXG4gICAgb3duZXI6IHN0cmluZyxcbiAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAvKipcbiAgICogU2VlIHtJRVJDNzIxLWlzQXBwcm92ZWRGb3JBbGx9LlxuICAgKi9cbiAgXCJpc0FwcHJvdmVkRm9yQWxsKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICBvd25lcjogc3RyaW5nLFxuICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICovXG4gIHRyYW5zZmVyRnJvbShcbiAgICBmcm9tOiBzdHJpbmcsXG4gICAgdG86IHN0cmluZyxcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS10cmFuc2ZlckZyb219LlxuICAgKi9cbiAgXCJ0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIoXG4gICAgZnJvbTogc3RyaW5nLFxuICAgIHRvOiBzdHJpbmcsXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICApOiBQcm9taXNlPENvbnRyYWN0VHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBTZWUge0lFUkM3MjEtc2FmZVRyYW5zZmVyRnJvbX0uXG4gICAqL1xuICBcInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpXCIoXG4gICAgZnJvbTogc3RyaW5nLFxuICAgIHRvOiBzdHJpbmcsXG4gICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgIF9kYXRhOiBCeXRlc0xpa2UsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgLyoqXG4gICAqIFNlZSB7SUVSQzcyMS1zYWZlVHJhbnNmZXJGcm9tfS5cbiAgICovXG4gIFwic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICBmcm9tOiBzdHJpbmcsXG4gICAgdG86IHN0cmluZyxcbiAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICk6IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvbj47XG5cbiAgY2FsbFN0YXRpYzoge1xuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzE2NS1zdXBwb3J0c0ludGVyZmFjZX0uXG4gICAgICovXG4gICAgc3VwcG9ydHNJbnRlcmZhY2UoXG4gICAgICBpbnRlcmZhY2VJZDogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMxNjUtc3VwcG9ydHNJbnRlcmZhY2V9LlxuICAgICAqL1xuICAgIFwic3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0KVwiKFxuICAgICAgaW50ZXJmYWNlSWQ6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgYmFsYW5jZU9mKG93bmVyOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAgICovXG4gICAgb3duZXJPZih0b2tlbklkOiBCaWdOdW1iZXJpc2gsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAgICovXG4gICAgXCJvd25lck9mKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAgICovXG4gICAgbmFtZShvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAgICovXG4gICAgXCJuYW1lKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtc3ltYm9sfS5cbiAgICAgKi9cbiAgICBzeW1ib2wob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgXCJzeW1ib2woKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS10b2tlblVSSX0uXG4gICAgICovXG4gICAgdG9rZW5VUkkodG9rZW5JZDogQmlnTnVtYmVyaXNoLCBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtdG9rZW5VUkl9LlxuICAgICAqL1xuICAgIFwidG9rZW5VUkkodWludDI1NilcIihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYXBwcm92ZX0uXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1hcHByb3ZlfS5cbiAgICAgKi9cbiAgICBcImFwcHJvdmUoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWdldEFwcHJvdmVkfS5cbiAgICAgKi9cbiAgICBnZXRBcHByb3ZlZChcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtZ2V0QXBwcm92ZWR9LlxuICAgICAqL1xuICAgIFwiZ2V0QXBwcm92ZWQodWludDI1NilcIihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2V0QXBwcm92YWxGb3JBbGx9LlxuICAgICAqL1xuICAgIHNldEFwcHJvdmFsRm9yQWxsKFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIGFwcHJvdmVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2V0QXBwcm92YWxGb3JBbGx9LlxuICAgICAqL1xuICAgIFwic2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyxib29sKVwiKFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIGFwcHJvdmVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtaXNBcHByb3ZlZEZvckFsbH0uXG4gICAgICovXG4gICAgaXNBcHByb3ZlZEZvckFsbChcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtaXNBcHByb3ZlZEZvckFsbH0uXG4gICAgICovXG4gICAgXCJpc0FwcHJvdmVkRm9yQWxsKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICB0cmFuc2ZlckZyb20oXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1zYWZlVHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpXCIoXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgX2RhdGE6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNhZmVUcmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcbiAgfTtcblxuICBmaWx0ZXJzOiB7XG4gICAgQXBwcm92YWwoXG4gICAgICBvd25lcjogc3RyaW5nIHwgbnVsbCxcbiAgICAgIGFwcHJvdmVkOiBzdHJpbmcgfCBudWxsLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoIHwgbnVsbFxuICAgICk6IEV2ZW50RmlsdGVyO1xuXG4gICAgQXBwcm92YWxGb3JBbGwoXG4gICAgICBvd25lcjogc3RyaW5nIHwgbnVsbCxcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcgfCBudWxsLFxuICAgICAgYXBwcm92ZWQ6IG51bGxcbiAgICApOiBFdmVudEZpbHRlcjtcblxuICAgIFRyYW5zZmVyKFxuICAgICAgZnJvbTogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHRvOiBzdHJpbmcgfCBudWxsLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoIHwgbnVsbFxuICAgICk6IEV2ZW50RmlsdGVyO1xuICB9O1xuXG4gIGVzdGltYXRlR2FzOiB7XG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMTY1LXN1cHBvcnRzSW50ZXJmYWNlfS5cbiAgICAgKi9cbiAgICBzdXBwb3J0c0ludGVyZmFjZShcbiAgICAgIGludGVyZmFjZUlkOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMTY1LXN1cHBvcnRzSW50ZXJmYWNlfS5cbiAgICAgKi9cbiAgICBcInN1cHBvcnRzSW50ZXJmYWNlKGJ5dGVzNClcIihcbiAgICAgIGludGVyZmFjZUlkOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWJhbGFuY2VPZn0uXG4gICAgICovXG4gICAgYmFsYW5jZU9mKG93bmVyOiBzdHJpbmcsIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAgICovXG4gICAgb3duZXJPZihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtb3duZXJPZn0uXG4gICAgICovXG4gICAgXCJvd25lck9mKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAgICovXG4gICAgbmFtZShvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAgICovXG4gICAgXCJuYW1lKClcIihvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtc3ltYm9sfS5cbiAgICAgKi9cbiAgICBzeW1ib2wob3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlcyk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgXCJzeW1ib2woKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS10b2tlblVSSX0uXG4gICAgICovXG4gICAgdG9rZW5VUkkoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtdG9rZW5VUkl9LlxuICAgICAqL1xuICAgIFwidG9rZW5VUkkodWludDI1NilcIihcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYXBwcm92ZX0uXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYXBwcm92ZX0uXG4gICAgICovXG4gICAgXCJhcHByb3ZlKGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtZ2V0QXBwcm92ZWR9LlxuICAgICAqL1xuICAgIGdldEFwcHJvdmVkKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAgICovXG4gICAgXCJnZXRBcHByb3ZlZCh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1zZXRBcHByb3ZhbEZvckFsbH0uXG4gICAgICovXG4gICAgc2V0QXBwcm92YWxGb3JBbGwoXG4gICAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgICAgYXBwcm92ZWQ6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2V0QXBwcm92YWxGb3JBbGx9LlxuICAgICAqL1xuICAgIFwic2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyxib29sKVwiKFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIGFwcHJvdmVkOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxCaWdOdW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWlzQXBwcm92ZWRGb3JBbGx9LlxuICAgICAqL1xuICAgIGlzQXBwcm92ZWRGb3JBbGwoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtaXNBcHByb3ZlZEZvckFsbH0uXG4gICAgICovXG4gICAgXCJpc0FwcHJvdmVkRm9yQWxsKGFkZHJlc3MsYWRkcmVzcylcIihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvcGVyYXRvcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS10cmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2FmZVRyYW5zZmVyRnJvbX0uXG4gICAgICovXG4gICAgXCJzYWZlVHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGJ5dGVzKVwiKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIF9kYXRhOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPEJpZ051bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtc2FmZVRyYW5zZmVyRnJvbX0uXG4gICAgICovXG4gICAgXCJzYWZlVHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8QmlnTnVtYmVyPjtcbiAgfTtcblxuICBwb3B1bGF0ZVRyYW5zYWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDMTY1LXN1cHBvcnRzSW50ZXJmYWNlfS5cbiAgICAgKi9cbiAgICBzdXBwb3J0c0ludGVyZmFjZShcbiAgICAgIGludGVyZmFjZUlkOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkMxNjUtc3VwcG9ydHNJbnRlcmZhY2V9LlxuICAgICAqL1xuICAgIFwic3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0KVwiKFxuICAgICAgaW50ZXJmYWNlSWQ6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1iYWxhbmNlT2Z9LlxuICAgICAqL1xuICAgIGJhbGFuY2VPZihcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYmFsYW5jZU9mfS5cbiAgICAgKi9cbiAgICBcImJhbGFuY2VPZihhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1vd25lck9mfS5cbiAgICAgKi9cbiAgICBvd25lck9mKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLW93bmVyT2Z9LlxuICAgICAqL1xuICAgIFwib3duZXJPZih1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxTWV0YWRhdGEtbmFtZX0uXG4gICAgICovXG4gICAgbmFtZShvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjFNZXRhZGF0YS1uYW1lfS5cbiAgICAgKi9cbiAgICBcIm5hbWUoKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgc3ltYm9sKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXN5bWJvbH0uXG4gICAgICovXG4gICAgXCJzeW1ib2woKVwiKG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXMpOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICB0b2tlblVSSShcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMU1ldGFkYXRhLXRva2VuVVJJfS5cbiAgICAgKi9cbiAgICBcInRva2VuVVJJKHVpbnQyNTYpXCIoXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtYXBwcm92ZX0uXG4gICAgICovXG4gICAgYXBwcm92ZShcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1hcHByb3ZlfS5cbiAgICAgKi9cbiAgICBcImFwcHJvdmUoYWRkcmVzcyx1aW50MjU2KVwiKFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWdldEFwcHJvdmVkfS5cbiAgICAgKi9cbiAgICBnZXRBcHByb3ZlZChcbiAgICAgIHRva2VuSWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1nZXRBcHByb3ZlZH0uXG4gICAgICovXG4gICAgXCJnZXRBcHByb3ZlZCh1aW50MjU2KVwiKFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogQ2FsbE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBzZXRBcHByb3ZhbEZvckFsbChcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNldEFwcHJvdmFsRm9yQWxsfS5cbiAgICAgKi9cbiAgICBcInNldEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MsYm9vbClcIihcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBhcHByb3ZlZDogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLWlzQXBwcm92ZWRGb3JBbGx9LlxuICAgICAqL1xuICAgIGlzQXBwcm92ZWRGb3JBbGwoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgb3BlcmF0b3I6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IENhbGxPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1pc0FwcHJvdmVkRm9yQWxsfS5cbiAgICAgKi9cbiAgICBcImlzQXBwcm92ZWRGb3JBbGwoYWRkcmVzcyxhZGRyZXNzKVwiKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIG9wZXJhdG9yOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBDYWxsT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICB0cmFuc2ZlckZyb20oXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzXG4gICAgKTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj47XG5cbiAgICAvKipcbiAgICAgKiBTZWUge0lFUkM3MjEtdHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIFNlZSB7SUVSQzcyMS1zYWZlVHJhbnNmZXJGcm9tfS5cbiAgICAgKi9cbiAgICBcInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpXCIoXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgdG9rZW5JZDogQmlnTnVtYmVyaXNoLFxuICAgICAgX2RhdGE6IEJ5dGVzTGlrZSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlc1xuICAgICk6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+O1xuXG4gICAgLyoqXG4gICAgICogU2VlIHtJRVJDNzIxLXNhZmVUcmFuc2ZlckZyb219LlxuICAgICAqL1xuICAgIFwic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIihcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICB0b2tlbklkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXNcbiAgICApOiBQcm9taXNlPFBvcHVsYXRlZFRyYW5zYWN0aW9uPjtcbiAgfTtcbn1cbiJdfQ==