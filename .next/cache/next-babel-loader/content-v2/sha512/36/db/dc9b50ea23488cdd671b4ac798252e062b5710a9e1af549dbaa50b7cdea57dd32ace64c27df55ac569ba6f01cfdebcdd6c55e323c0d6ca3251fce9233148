{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/danildovgal/Desktop/protocol_zero/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/components/common/steps_modal/base_step_modal.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { getStepTitle, makeGetProgress } from '../../../util/steps';\nimport { ComponentUnmountedException } from '../../exceptions/component_unmounted_exception';\nimport { ModalStatusTextLight, ModalText, StepStatus, StepStatusConfirmOnMetamask, StepStatusDone, StepStatusError, StepStatusLoading, Title } from './steps_common';\nimport { StepsProgress } from './steps_progress';\nimport { StepPendingTime } from './step_pending_time';\nexport var BaseStepModal = /*#__PURE__*/function (_React$Component) {\n  _inherits(BaseStepModal, _React$Component);\n\n  var _super = _createSuper(BaseStepModal);\n\n  function BaseStepModal(props) {\n    var _this;\n\n    _classCallCheck(this, BaseStepModal);\n\n    _this = _super.call(this, props); // we set the value of the estimated tx time, so that the progress bar length is not updated in the middle of the step\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      status: StepStatus.ConfirmOnMetamask,\n      loadingStarted: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_estimatedTxTimeMs\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_isUnmounted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this._runAction();\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function () {\n      _this._isUnmounted = true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      var _this$props = _this.props,\n          confirmCaption = _this$props.confirmCaption,\n          loadingCaption = _this$props.loadingCaption,\n          doneCaption = _this$props.doneCaption,\n          errorCaption = _this$props.errorCaption,\n          loadingFooterCaption = _this$props.loadingFooterCaption,\n          doneFooterCaption = _this$props.doneFooterCaption,\n          title = _this$props.title;\n      var _this$state = _this.state,\n          loadingStarted = _this$state.loadingStarted,\n          status = _this$state.status;\n\n      var retry = function retry() {\n        return _this._retry();\n      };\n\n      var content;\n      var bodyText;\n      var footer = _this.props.showPartialProgress ? null : /*#__PURE__*/_jsxDEV(ModalStatusTextLight, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 62\n      }, _assertThisInitialized(_this));\n\n      switch (status) {\n        case StepStatus.Loading:\n          content = /*#__PURE__*/_jsxDEV(StepStatusLoading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 27\n          }, _assertThisInitialized(_this));\n          bodyText = /*#__PURE__*/_jsxDEV(ModalText, {\n            children: loadingCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 28\n          }, _assertThisInitialized(_this));\n          break;\n\n        case StepStatus.Done:\n          content = /*#__PURE__*/_jsxDEV(StepStatusDone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 27\n          }, _assertThisInitialized(_this));\n          bodyText = /*#__PURE__*/_jsxDEV(ModalText, {\n            children: doneCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 28\n          }, _assertThisInitialized(_this));\n          footer = /*#__PURE__*/_jsxDEV(ModalStatusTextLight, {\n            children: doneFooterCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 26\n          }, _assertThisInitialized(_this));\n          break;\n\n        case StepStatus.Error:\n          content = /*#__PURE__*/_jsxDEV(StepStatusError, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 27\n          }, _assertThisInitialized(_this));\n          bodyText = /*#__PURE__*/_jsxDEV(ModalText, {\n            children: [errorCaption, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }, _assertThisInitialized(_this)), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"modal-text-clickable\",\n              onClick: retry,\n              children: \"Click here to try again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }, _assertThisInitialized(_this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, _assertThisInitialized(_this));\n          break;\n\n        default:\n          content = /*#__PURE__*/_jsxDEV(StepStatusConfirmOnMetamask, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 27\n          }, _assertThisInitialized(_this));\n          bodyText = /*#__PURE__*/_jsxDEV(ModalText, {\n            children: confirmCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 28\n          }, _assertThisInitialized(_this));\n          footer = /*#__PURE__*/_jsxDEV(ModalStatusTextLight, {\n            children: loadingFooterCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 26\n          }, _assertThisInitialized(_this));\n          break;\n      }\n\n      var getProgress = function getProgress() {\n        return 0;\n      };\n\n      if (status === StepStatus.Loading && _this.props.showPartialProgress && loadingStarted !== null) {\n        getProgress = makeGetProgress(loadingStarted, _this._estimatedTxTimeMs);\n      } else if (status === StepStatus.Done) {\n        getProgress = function getProgress() {\n          return 100;\n        };\n      }\n\n      var stepsProgress = _this.props.buildStepsProgress({\n        title: getStepTitle(_this.props.step),\n        active: true,\n        progress: getProgress,\n        isLong: false\n      });\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [content, /*#__PURE__*/_jsxDEV(Title, {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, _assertThisInitialized(_this)), bodyText, /*#__PURE__*/_jsxDEV(StepsProgress, {\n          steps: stepsProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }, _assertThisInitialized(_this)), _this.props.showPartialProgress && /*#__PURE__*/_jsxDEV(ModalStatusTextLight, {\n          children: /*#__PURE__*/_jsxDEV(StepPendingTime, {\n            txStarted: loadingStarted,\n            stepStatus: status,\n            estimatedTxTimeMs: _this._estimatedTxTimeMs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, _assertThisInitialized(_this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, _assertThisInitialized(_this)), footer]\n      }, void 0, true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_runAction\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var onLoading, onDone, onError;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              onLoading = function onLoading() {\n                _this._throwIfUnmounted();\n\n                _this.setState({\n                  status: StepStatus.Loading,\n                  loadingStarted: Date.now()\n                });\n              };\n\n              onDone = function onDone() {\n                _this._throwIfUnmounted();\n\n                _this.setState({\n                  status: StepStatus.Done\n                });\n              };\n\n              onError = function onError(err) {\n                if (err instanceof ComponentUnmountedException) {\n                  return;\n                }\n\n                _this.setState({\n                  status: StepStatus.Error\n                });\n              };\n\n              return _context2.abrupt(\"return\", _this.props.runAction({\n                onLoading: onLoading,\n                onDone: onDone,\n                onError: onError\n              }));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"_retry\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.setState({\n                status: StepStatus.ConfirmOnMetamask\n              });\n\n              _context3.next = 3;\n              return _this._runAction();\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"_throwIfUnmounted\", function () {\n      if (_this._isUnmounted) {\n        throw new ComponentUnmountedException('BaseStepModal');\n      }\n    });\n\n    _this._estimatedTxTimeMs = props.estimatedTxTimeMs;\n    return _this;\n  }\n\n  return BaseStepModal;\n}(React.Component);","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/common/steps_modal/base_step_modal.tsx"],"names":["React","getStepTitle","makeGetProgress","ComponentUnmountedException","ModalStatusTextLight","ModalText","StepStatus","StepStatusConfirmOnMetamask","StepStatusDone","StepStatusError","StepStatusLoading","Title","StepsProgress","StepPendingTime","BaseStepModal","props","status","ConfirmOnMetamask","loadingStarted","_runAction","_isUnmounted","confirmCaption","loadingCaption","doneCaption","errorCaption","loadingFooterCaption","doneFooterCaption","title","state","retry","_retry","content","bodyText","footer","showPartialProgress","Loading","Done","Error","getProgress","_estimatedTxTimeMs","stepsProgress","buildStepsProgress","step","active","progress","isLong","onLoading","_throwIfUnmounted","setState","Date","now","onDone","onError","err","runAction","estimatedTxTimeMs","Component"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { Step } from '../../../types/steps-modal';\n\nimport { getStepTitle, makeGetProgress } from '../../../util/steps';\nimport { ComponentUnmountedException } from '../../exceptions/component_unmounted_exception';\n\nimport {\n    ModalStatusTextLight,\n    ModalText,\n    StepStatus,\n    StepStatusConfirmOnMetamask,\n    StepStatusDone,\n    StepStatusError,\n    StepStatusLoading,\n    Title,\n} from './steps_common';\nimport { GetProgress, StepItem, StepsProgress } from './steps_progress';\nimport { StepPendingTime } from './step_pending_time';\n\ntype RunAction = ({\n    onLoading,\n    onDone,\n    onError,\n}: {\n    onLoading: () => any;\n    onDone: () => any;\n    onError: (err: Error | ComponentUnmountedException) => any;\n}) => Promise<any>;\n\ninterface Props {\n    buildStepsProgress: (currentStepItem: StepItem) => StepItem[];\n    estimatedTxTimeMs: number;\n    runAction: RunAction;\n    title: string;\n    confirmCaption: string;\n    loadingCaption: string;\n    loadingFooterCaption: string;\n    doneFooterCaption: string;\n    doneCaption: string;\n    errorCaption: string;\n    step: Step;\n    showPartialProgress?: boolean;\n}\n\ninterface State {\n    status: StepStatus;\n    loadingStarted: number | null;\n}\n\nexport class BaseStepModal extends React.Component<Props, State> {\n    public state: State = {\n        status: StepStatus.ConfirmOnMetamask,\n        loadingStarted: null,\n    };\n\n    private readonly _estimatedTxTimeMs: number;\n    private _isUnmounted: boolean = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        // we set the value of the estimated tx time, so that the progress bar length is not updated in the middle of the step\n        this._estimatedTxTimeMs = props.estimatedTxTimeMs;\n    }\n\n    public componentDidMount = async () => {\n        await this._runAction();\n    };\n\n    public componentWillUnmount = () => {\n        this._isUnmounted = true;\n    };\n\n    public render = () => {\n        const {\n            confirmCaption,\n            loadingCaption,\n            doneCaption,\n            errorCaption,\n            loadingFooterCaption,\n            doneFooterCaption,\n            title,\n        } = this.props;\n        const { loadingStarted, status } = this.state;\n        const retry = () => this._retry();\n        let content: ReactNode;\n        let bodyText: ReactNode;\n        let footer = this.props.showPartialProgress ? null : <ModalStatusTextLight>{}</ModalStatusTextLight>;\n        switch (status) {\n            case StepStatus.Loading:\n                content = <StepStatusLoading />;\n                bodyText = <ModalText>{loadingCaption}</ModalText>;\n                break;\n            case StepStatus.Done:\n                content = <StepStatusDone />;\n                bodyText = <ModalText>{doneCaption}</ModalText>;\n                footer = <ModalStatusTextLight>{doneFooterCaption}</ModalStatusTextLight>;\n                break;\n            case StepStatus.Error:\n                content = <StepStatusError />;\n                bodyText = (\n                    <ModalText>\n                        {errorCaption}\n                        <br />\n                        <span className=\"modal-text-clickable\" onClick={retry}>Click here to try again</span>\n                    </ModalText>\n                );\n                break;\n            default:\n                content = <StepStatusConfirmOnMetamask />;\n                bodyText = <ModalText>{confirmCaption}</ModalText>;\n                footer = <ModalStatusTextLight>{loadingFooterCaption}</ModalStatusTextLight>;\n                break;\n        }\n\n        let getProgress: GetProgress = () => 0;\n\n        if (status === StepStatus.Loading && this.props.showPartialProgress && loadingStarted !== null) {\n            getProgress = makeGetProgress(loadingStarted, this._estimatedTxTimeMs);\n        } else if (status === StepStatus.Done) {\n            getProgress = () => 100;\n        }\n\n        const stepsProgress = this.props.buildStepsProgress({\n            title: getStepTitle(this.props.step),\n            active: true,\n            progress: getProgress,\n            isLong: false,\n        });\n\n        return (\n            <>\n                {content}\n                <Title>{title}</Title>\n                {bodyText}\n                <StepsProgress steps={stepsProgress} />\n                {this.props.showPartialProgress && (\n                    <ModalStatusTextLight>\n                        <StepPendingTime\n                            txStarted={loadingStarted}\n                            stepStatus={status}\n                            estimatedTxTimeMs={this._estimatedTxTimeMs}\n                        />\n                    </ModalStatusTextLight>\n                )}\n                {footer}\n            </>\n        );\n    };\n\n    private readonly _runAction = async () => {\n        \n        const onLoading = () => {\n            this._throwIfUnmounted();\n            this.setState({\n                status: StepStatus.Loading,\n                loadingStarted: Date.now(),\n            });\n        };\n        const onDone = () => {\n            this._throwIfUnmounted();\n            this.setState({\n                status: StepStatus.Done,\n            });\n        };\n        const onError = (err: Error | ComponentUnmountedException) => {\n            if (err instanceof ComponentUnmountedException) {\n                return;\n            }\n            this.setState({\n                status: StepStatus.Error,\n            });\n        };\n\n        return this.props.runAction({\n            onLoading,\n            onDone,\n            onError,\n        });\n    };\n\n    private readonly _retry = async () => {\n        this.setState({ status: StepStatus.ConfirmOnMetamask });\n\n        await this._runAction();\n    };\n\n    private readonly _throwIfUnmounted = () => {\n        if (this._isUnmounted) {\n            throw new ComponentUnmountedException('BaseStepModal');\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}