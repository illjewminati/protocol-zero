"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helperTestPermissions = exports.helperDeployPermissions = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ = require("../../../");

var _companiesFactoryController = require("../../../companiesFactoryController");

var _multisig = require("./multisig");

var helperDeployPermissions = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(signers, owner, companiesAddress) {
    var permissionsContract, companiesContractAddress;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _.PermissionsController.deployPermissionsContract(signers[0], owner, companiesAddress);

          case 2:
            permissionsContract = _context.sent;
            companiesContractAddress = permissionsContract.address;
            return _context.abrupt("return", [permissionsContract, companiesContractAddress]);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function helperDeployPermissions(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

exports.helperDeployPermissions = helperDeployPermissions;

var helperTestPermissions = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(signers, permissionsAddress, multisigAddress, companiesAddress) {
    var multisigController, permissionsController, companiesController, _yield$companiesContr, _yield$companiesContr2, company1, company2, company3, signersC1, signersC2, signerNotFromCompany, addPermissionEncoded, tx, permission, isSignerApproved, addPermissionsEncoded, tx2;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            multisigController = new _.MultisigController(multisigAddress, signers[0]);
            permissionsController = new _.PermissionsController(permissionsAddress, signers[0]);
            companiesController = new _companiesFactoryController.CompaniesFactoryController(companiesAddress, signers[0]);
            _context2.next = 5;
            return companiesController.getCompanies();

          case 5:
            _yield$companiesContr = _context2.sent;
            _yield$companiesContr2 = (0, _slicedToArray2["default"])(_yield$companiesContr, 3);
            company1 = _yield$companiesContr2[0];
            company2 = _yield$companiesContr2[1];
            company3 = _yield$companiesContr2[2];
            _context2.next = 12;
            return companiesController.getSignersByCompany(company1);

          case 12:
            signersC1 = _context2.sent;
            _context2.next = 15;
            return companiesController.getSignersByCompany(company2);

          case 15:
            signersC2 = _context2.sent;
            _context2.next = 18;
            return signers[7].getAddress();

          case 18:
            signerNotFromCompany = _context2.sent;
            addPermissionEncoded = _.PermissionsController.encodeCall("setPermission", [0, company1, true]);
            _context2.next = 22;
            return multisigController.submitTransaction(permissionsAddress, 0, addPermissionEncoded, {
              gasLimit: 7500000
            });

          case 22:
            tx = _context2.sent;
            _context2.next = 25;
            return tx.wait();

          case 25:
            _context2.next = 27;
            return (0, _multisig.confirmLastMultisigTx)(multisigAddress, signers[1]);

          case 27:
            _context2.next = 29;
            return permissionsController.getPermission(0, company1, signersC1[0]);

          case 29:
            permission = _context2.sent;
            expect(permission).toEqual(true);
            _context2.next = 33;
            return permissionsController.getPermission(0, company1, signersC1[1]);

          case 33:
            permission = _context2.sent;
            expect(permission).toEqual(true);
            _context2.next = 37;
            return permissionsController.isSignerApproved(company1, signersC1[0]);

          case 37:
            isSignerApproved = _context2.sent;
            expect(isSignerApproved).toEqual(true);
            addPermissionsEncoded = _.PermissionsController.encodeCall("setPermissions", [[1, 2, 3], company2, true]);
            _context2.next = 42;
            return multisigController.submitTransaction(permissionsAddress, 0, addPermissionsEncoded, {
              gasLimit: 7500000
            });

          case 42:
            tx2 = _context2.sent;
            _context2.next = 45;
            return tx2.wait();

          case 45:
            _context2.next = 47;
            return (0, _multisig.confirmLastMultisigTx)(multisigAddress, signers[1]);

          case 47:
            _context2.next = 49;
            return permissionsController.getPermission(1, company2, signersC2[signersC2.length - 1]);

          case 49:
            permission = _context2.sent;
            expect(permission).toEqual(true); //from an account that is not signer

            _context2.next = 53;
            return permissionsController.getPermission(1, company2, signerNotFromCompany);

          case 53:
            permission = _context2.sent;
            expect(permission).toEqual(false);

          case 55:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function helperTestPermissions(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();

exports.helperTestPermissions = helperTestPermissions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ldGhlcmV1bS9fX3Rlc3RzX18vaGVscGVycy9wZXJtaXNzaW9ucy50cyJdLCJuYW1lcyI6WyJoZWxwZXJEZXBsb3lQZXJtaXNzaW9ucyIsInNpZ25lcnMiLCJvd25lciIsImNvbXBhbmllc0FkZHJlc3MiLCJQZXJtaXNzaW9uc0NvbnRyb2xsZXIiLCJkZXBsb3lQZXJtaXNzaW9uc0NvbnRyYWN0IiwicGVybWlzc2lvbnNDb250cmFjdCIsImNvbXBhbmllc0NvbnRyYWN0QWRkcmVzcyIsImFkZHJlc3MiLCJoZWxwZXJUZXN0UGVybWlzc2lvbnMiLCJwZXJtaXNzaW9uc0FkZHJlc3MiLCJtdWx0aXNpZ0FkZHJlc3MiLCJtdWx0aXNpZ0NvbnRyb2xsZXIiLCJNdWx0aXNpZ0NvbnRyb2xsZXIiLCJwZXJtaXNzaW9uc0NvbnRyb2xsZXIiLCJjb21wYW5pZXNDb250cm9sbGVyIiwiQ29tcGFuaWVzRmFjdG9yeUNvbnRyb2xsZXIiLCJnZXRDb21wYW5pZXMiLCJjb21wYW55MSIsImNvbXBhbnkyIiwiY29tcGFueTMiLCJnZXRTaWduZXJzQnlDb21wYW55Iiwic2lnbmVyc0MxIiwic2lnbmVyc0MyIiwiZ2V0QWRkcmVzcyIsInNpZ25lck5vdEZyb21Db21wYW55IiwiYWRkUGVybWlzc2lvbkVuY29kZWQiLCJlbmNvZGVDYWxsIiwic3VibWl0VHJhbnNhY3Rpb24iLCJnYXNMaW1pdCIsInR4Iiwid2FpdCIsImdldFBlcm1pc3Npb24iLCJwZXJtaXNzaW9uIiwiZXhwZWN0IiwidG9FcXVhbCIsImlzU2lnbmVyQXBwcm92ZWQiLCJhZGRQZXJtaXNzaW9uc0VuY29kZWQiLCJ0eDIiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUVBOztBQUdPLElBQU1BLHVCQUF1QjtBQUFBLDJGQUFJLGlCQUFPQyxPQUFQLEVBQXNDQyxLQUF0QyxFQUFxREMsZ0JBQXJEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFB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QUQsQ0FBTixDQUFtQkUsT0FBbkIsQ0FBMkIsS0FBM0I7O0FBakNpQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFIOztBQUFBLGtCQUFyQjFCLHFCQUFxQjtBQUFBO0FBQUE7QUFBQSxHQUEzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV0aGVycyB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7IE11bHRpc2lnQ29udHJvbGxlciwgUGVybWlzc2lvbnNDb250cm9sbGVyIH0gZnJvbSBcIi4uLy4uLy4uL1wiO1xuaW1wb3J0IHsgQ29tcGFuaWVzRmFjdG9yeUNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29tcGFuaWVzRmFjdG9yeUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IFBlcm1pc3Npb25zIH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBjb25maXJtTGFzdE11bHRpc2lnVHggfSBmcm9tIFwiLi9tdWx0aXNpZ1wiO1xuXG5cbmV4cG9ydCBjb25zdCBoZWxwZXJEZXBsb3lQZXJtaXNzaW9ucyAgPSBhc3luYyAoc2lnbmVyczogQXJyYXk8ZXRoZXJzLlNpZ25lcj4sIG93bmVyOiBzdHJpbmcsIGNvbXBhbmllc0FkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8W1Blcm1pc3Npb25zLCBzdHJpbmddPiA9PiB7XG4gICAgY29uc3QgcGVybWlzc2lvbnNDb250cmFjdDogUGVybWlzc2lvbnMgPSBhd2FpdCBQZXJtaXNzaW9uc0NvbnRyb2xsZXIuZGVwbG95UGVybWlzc2lvbnNDb250cmFjdChzaWduZXJzWzBdLCBvd25lciwgY29tcGFuaWVzQWRkcmVzcyk7XG4gICAgY29uc3QgY29tcGFuaWVzQ29udHJhY3RBZGRyZXNzID0gcGVybWlzc2lvbnNDb250cmFjdC5hZGRyZXNzO1xuICAgIHJldHVybiBbcGVybWlzc2lvbnNDb250cmFjdCwgY29tcGFuaWVzQ29udHJhY3RBZGRyZXNzXTtcbn1cblxuZXhwb3J0IGNvbnN0IGhlbHBlclRlc3RQZXJtaXNzaW9ucyA9IGFzeW5jIChzaWduZXJzOiBBcnJheTxldGhlcnMuU2lnbmVyPiwgcGVybWlzc2lvbnNBZGRyZXNzOiBzdHJpbmcsIG11bHRpc2lnQWRkcmVzczogc3RyaW5nLCBjb21wYW5pZXNBZGRyZXNzOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBtdWx0aXNpZ0NvbnRyb2xsZXIgPSBuZXcgTXVsdGlzaWdDb250cm9sbGVyKG11bHRpc2lnQWRkcmVzcywgc2lnbmVyc1swXSk7XG4gICAgY29uc3QgcGVybWlzc2lvbnNDb250cm9sbGVyID0gbmV3IFBlcm1pc3Npb25zQ29udHJvbGxlcihwZXJtaXNzaW9uc0FkZHJlc3MsIHNpZ25lcnNbMF0pO1xuICAgIGNvbnN0IGNvbXBhbmllc0NvbnRyb2xsZXIgPSBuZXcgQ29tcGFuaWVzRmFjdG9yeUNvbnRyb2xsZXIoY29tcGFuaWVzQWRkcmVzcywgc2lnbmVyc1swXSk7XG5cbiAgICBjb25zdCBbY29tcGFueTEsIGNvbXBhbnkyLCBjb21wYW55M10gPSBhd2FpdCBjb21wYW5pZXNDb250cm9sbGVyLmdldENvbXBhbmllcygpO1xuICAgIGNvbnN0IHNpZ25lcnNDMSA9IGF3YWl0IGNvbXBhbmllc0NvbnRyb2xsZXIuZ2V0U2lnbmVyc0J5Q29tcGFueShjb21wYW55MSk7XG4gICAgY29uc3Qgc2lnbmVyc0MyID0gYXdhaXQgY29tcGFuaWVzQ29udHJvbGxlci5nZXRTaWduZXJzQnlDb21wYW55KGNvbXBhbnkyKTtcbiAgICBjb25zdCBzaWduZXJOb3RGcm9tQ29tcGFueSA9IGF3YWl0IHNpZ25lcnNbN10uZ2V0QWRkcmVzcygpO1xuXG4gICAgY29uc3QgYWRkUGVybWlzc2lvbkVuY29kZWQgPSBQZXJtaXNzaW9uc0NvbnRyb2xsZXIuZW5jb2RlQ2FsbChcInNldFBlcm1pc3Npb25cIiwgWzAsIGNvbXBhbnkxLCB0cnVlXSk7XG4gICAgY29uc3QgdHggPSBhd2FpdCBtdWx0aXNpZ0NvbnRyb2xsZXIuc3VibWl0VHJhbnNhY3Rpb24ocGVybWlzc2lvbnNBZGRyZXNzLCAwLCBhZGRQZXJtaXNzaW9uRW5jb2RlZCwgeyBnYXNMaW1pdDogNzUwMDAwMH0pXG4gICAgYXdhaXQgdHgud2FpdCgpXG4gICAgYXdhaXQgY29uZmlybUxhc3RNdWx0aXNpZ1R4KG11bHRpc2lnQWRkcmVzcywgc2lnbmVyc1sxXSk7XG5cbiAgICBsZXQgcGVybWlzc2lvbiA9IGF3YWl0IHBlcm1pc3Npb25zQ29udHJvbGxlci5nZXRQZXJtaXNzaW9uKDAsIGNvbXBhbnkxLCBzaWduZXJzQzFbMF0pO1xuICAgIGV4cGVjdChwZXJtaXNzaW9uKS50b0VxdWFsKHRydWUpO1xuICAgIHBlcm1pc3Npb24gPSBhd2FpdCBwZXJtaXNzaW9uc0NvbnRyb2xsZXIuZ2V0UGVybWlzc2lvbigwLCBjb21wYW55MSwgc2lnbmVyc0MxWzFdKTtcbiAgICBleHBlY3QocGVybWlzc2lvbikudG9FcXVhbCh0cnVlKTtcblxuICAgIGxldCBpc1NpZ25lckFwcHJvdmVkID0gYXdhaXQgcGVybWlzc2lvbnNDb250cm9sbGVyLmlzU2lnbmVyQXBwcm92ZWQoY29tcGFueTEsIHNpZ25lcnNDMVswXSk7XG4gICAgZXhwZWN0KGlzU2lnbmVyQXBwcm92ZWQpLnRvRXF1YWwodHJ1ZSk7XG4gICAgXG4gICAgY29uc3QgYWRkUGVybWlzc2lvbnNFbmNvZGVkID0gUGVybWlzc2lvbnNDb250cm9sbGVyLmVuY29kZUNhbGwoXCJzZXRQZXJtaXNzaW9uc1wiLCBbWzEsIDIsIDNdLCBjb21wYW55MiwgdHJ1ZV0pO1xuICAgIGNvbnN0IHR4MiA9IGF3YWl0IG11bHRpc2lnQ29udHJvbGxlci5zdWJtaXRUcmFuc2FjdGlvbihwZXJtaXNzaW9uc0FkZHJlc3MsIDAsIGFkZFBlcm1pc3Npb25zRW5jb2RlZCwgeyBnYXNMaW1pdDogNzUwMDAwMH0pXG4gICAgYXdhaXQgdHgyLndhaXQoKVxuICAgIGF3YWl0IGNvbmZpcm1MYXN0TXVsdGlzaWdUeChtdWx0aXNpZ0FkZHJlc3MsIHNpZ25lcnNbMV0pO1xuXG4gICAgcGVybWlzc2lvbiA9IGF3YWl0IHBlcm1pc3Npb25zQ29udHJvbGxlci5nZXRQZXJtaXNzaW9uKDEsIGNvbXBhbnkyLCBzaWduZXJzQzJbc2lnbmVyc0MyLmxlbmd0aCAtIDFdKTtcbiAgICBleHBlY3QocGVybWlzc2lvbikudG9FcXVhbCh0cnVlKTtcblxuICAgIC8vZnJvbSBhbiBhY2NvdW50IHRoYXQgaXMgbm90IHNpZ25lclxuICAgIHBlcm1pc3Npb24gPSBhd2FpdCBwZXJtaXNzaW9uc0NvbnRyb2xsZXIuZ2V0UGVybWlzc2lvbigxLCBjb21wYW55Miwgc2lnbmVyTm90RnJvbUNvbXBhbnkpO1xuICAgIGV4cGVjdChwZXJtaXNzaW9uKS50b0VxdWFsKGZhbHNlKTtcbn0iXX0=