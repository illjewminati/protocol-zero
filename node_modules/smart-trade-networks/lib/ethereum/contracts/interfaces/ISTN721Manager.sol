// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


interface ISTN721Manager {

    event AddController(address indexed newController);
    event RemoveController(address indexed controller);
    event CreateSTN721Parent(string name, string symbol);
    event CreateSTN721Child(address indexed stn721Parent, uint256 tokenId, string name, string symbol);

    function addController(address _newController) external;

    function removeController(address _controller) external;

    function createParentSTN721(string memory name, string memory symbol) external returns(address);

    function createChildSTN721(address stn721Parent, uint256 tokenId, string memory name, string memory symbol) external returns(address);

    //TODO:
    // function createParentSTN1155(string memory name, string memory symbol) external;
    // function createChildSTN1155(address stn721Parent, uint256 tokenId, string memory name, string memory symbol) external;

    function mint(address stn721, bool divisible, uint256[] memory ids, address receiver) external;

    function mintChild(address stn721Child, bool divisible, uint256[] memory tokenIds) external;

    function getChild(address stn721Parent, uint256 tokenId) external view returns(address);

    function getAll() external view returns(address[] memory);
}