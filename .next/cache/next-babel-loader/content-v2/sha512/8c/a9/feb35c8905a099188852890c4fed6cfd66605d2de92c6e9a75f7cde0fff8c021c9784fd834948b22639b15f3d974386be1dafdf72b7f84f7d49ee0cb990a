{"ast":null,"code":"import { BigNumber, ethers, utils } from \"ethers\";\nimport { getContract } from \"./contract_loader\";\nimport * as artifact from \"../../artifacts/contracts/TokenPaymaster.sol/TokenPaymaster.json\";\nimport { getDecimalsOf } from \"./erc20_service\";\nconst address = process.env.GSN_PAYMASTER;\nexport const loadPaymasterContract = async signer => {\n  return getContract(address, artifact.abi, signer);\n};\nexport const getMinBalance = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.minBalance();\n};\nexport const getMinGas = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.minGas();\n};\nexport const getOwner = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.owner();\n};\nexport const getPaymentData = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  const data = await contract.getPaymentData();\n  const decimals = await getDecimalsOf(data[0], signer);\n  return {\n    paymentToken: data[0],\n    fee: utils.formatUnits(data[1], decimals)\n  };\n};\nexport const getGasUsedByPost = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.gasUsedByPost();\n};\nexport const getTargetContract = async signer => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.target();\n};\nexport const getTokenToEthOutput = async (signer, amount, token1, token2) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.getTokenToEthOutput(ethers.utils.parseUnits(amount, token1.decimals), [token1.address, token2]);\n};\nexport const setMinBalance = async (signer, amount) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setMinBalance(ethers.utils.parseEther(amount));\n};\nexport const setPaymentToken = async (signer, address) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setPaymentToken(address);\n};\nexport const setFee = async (signer, amount) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setFee(ethers.utils.parseEther(amount));\n};\nexport const whitelistToken = async (signer, address, whitelist) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.whitelistToken(address, whitelist);\n};\nexport const setGasUsedByPost = async (signer, amount) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setGasUsedByPost(BigNumber.from(amount));\n};\nexport const setMinGas = async (signer, amount) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setMinGas(BigNumber.from(amount));\n};\nexport const setTarget = async (signer, address) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setTarget(address);\n};\nexport const setRelayHub = async (signer, address) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setRelayHub(address);\n};\nexport const setForwarder = async (signer, address) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.setTrustedForwarder(address);\n};\nexport const withdrawFromRelayHub = async (signer, amount, receiver) => {\n  const contract = await loadPaymasterContract(signer);\n  return contract.withdrawRelayHubDepositTo(ethers.utils.parseEther(amount), receiver);\n};","map":null,"metadata":{},"sourceType":"module"}