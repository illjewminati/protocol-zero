{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Utils = void 0;\n\nvar bignumber_js_1 = require(\"bignumber.js\");\n\nvar Utils =\n/** @class */\nfunction () {\n  function Utils() {}\n  /**\r\n   * To precision\r\n   */\n\n\n  Utils.toPrecision = function (value, significantDigits, significantDigitsForDecimalOnly) {\n    if (significantDigits === void 0) {\n      significantDigits = 4;\n    }\n\n    if (significantDigitsForDecimalOnly === void 0) {\n      significantDigitsForDecimalOnly = true;\n    }\n\n    var parsedValue = new bignumber_js_1.BigNumber(value);\n\n    if (significantDigitsForDecimalOnly) {\n      var beforeDecimalsCount = parsedValue.toString().split('.')[0].length;\n      return parsedValue.precision(beforeDecimalsCount + significantDigits, bignumber_js_1.BigNumber.ROUND_DOWN).toFixed();\n    } else {\n      return parsedValue.precision(significantDigits, bignumber_js_1.BigNumber.ROUND_DOWN).toFixed();\n    }\n  };\n  /**\r\n   * Format the currency\r\n   * @value The value to format\r\n   */\n\n\n  Utils.formatCurrency = function (value) {\n    return Number(value).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n  };\n  /**\r\n   * Deep clone a object\r\n   * @param object The object\r\n   */\n\n\n  Utils.deepClone = function (object) {\n    return JSON.parse(JSON.stringify(object));\n  };\n  /**\r\n   * Check if something is zero\r\n   * @param amount The amount\r\n   */\n\n\n  Utils.isZero = function (amount) {\n    if (!amount || amount === '') {\n      return true;\n    }\n\n    return new bignumber_js_1.BigNumber(amount).eq(0);\n  };\n  /**\r\n   * Generate random id\r\n   */\n\n\n  Utils.randomId = function () {\n    var randLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n    return randLetter + Date.now();\n  };\n\n  return Utils;\n}();\n\nexports.Utils = Utils;","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/components/uniswap_components/uniswap-dapp-integration-shared/dist/cjs/utils.js"],"names":["Object","defineProperty","exports","value","Utils","bignumber_js_1","require","toPrecision","significantDigits","significantDigitsForDecimalOnly","parsedValue","BigNumber","beforeDecimalsCount","toString","split","length","precision","ROUND_DOWN","toFixed","formatCurrency","Number","replace","deepClone","object","JSON","parse","stringify","isZero","amount","eq","randomId","randLetter","String","fromCharCode","Math","floor","random","Date","now"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,cAAD,CAA5B;;AACA,IAAIF,KAAK;AAAG;AAAe,YAAY;AACnC,WAASA,KAAT,GAAiB,CAChB;AACD;AACJ;AACA;;;AACIA,EAAAA,KAAK,CAACG,WAAN,GAAoB,UAAUJ,KAAV,EAAiBK,iBAAjB,EAAoCC,+BAApC,EAAqE;AACrF,QAAID,iBAAiB,KAAK,KAAK,CAA/B,EAAkC;AAAEA,MAAAA,iBAAiB,GAAG,CAApB;AAAwB;;AAC5D,QAAIC,+BAA+B,KAAK,KAAK,CAA7C,EAAgD;AAAEA,MAAAA,+BAA+B,GAAG,IAAlC;AAAyC;;AAC3F,QAAIC,WAAW,GAAG,IAAIL,cAAc,CAACM,SAAnB,CAA6BR,KAA7B,CAAlB;;AACA,QAAIM,+BAAJ,EAAqC;AACjC,UAAIG,mBAAmB,GAAGF,WAAW,CAACG,QAAZ,GAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,EAAqCC,MAA/D;AACA,aAAOL,WAAW,CACbM,SADE,CACQJ,mBAAmB,GAAGJ,iBAD9B,EACiDH,cAAc,CAACM,SAAf,CAAyBM,UAD1E,EAEFC,OAFE,EAAP;AAGH,KALD,MAMK;AACD,aAAOR,WAAW,CACbM,SADE,CACQR,iBADR,EAC2BH,cAAc,CAACM,SAAf,CAAyBM,UADpD,EAEFC,OAFE,EAAP;AAGH;AACJ,GAfD;AAgBA;AACJ;AACA;AACA;;;AACId,EAAAA,KAAK,CAACe,cAAN,GAAuB,UAAUhB,KAAV,EAAiB;AACpC,WAAOiB,MAAM,CAACjB,KAAD,CAAN,CACFe,OADE,CACM,CADN,EAEFG,OAFE,CAEM,mBAFN,EAE2B,KAF3B,CAAP;AAGH,GAJD;AAKA;AACJ;AACA;AACA;;;AACIjB,EAAAA,KAAK,CAACkB,SAAN,GAAkB,UAAUC,MAAV,EAAkB;AAChC,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,MAAf,CAAX,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACInB,EAAAA,KAAK,CAACuB,MAAN,GAAe,UAAUC,MAAV,EAAkB;AAC7B,QAAI,CAACA,MAAD,IAAWA,MAAM,KAAK,EAA1B,EAA8B;AAC1B,aAAO,IAAP;AACH;;AACD,WAAO,IAAIvB,cAAc,CAACM,SAAnB,CAA6BiB,MAA7B,EAAqCC,EAArC,CAAwC,CAAxC,CAAP;AACH,GALD;AAMA;AACJ;AACA;;;AACIzB,EAAAA,KAAK,CAAC0B,QAAN,GAAiB,YAAY;AACzB,QAAIC,UAAU,GAAGC,MAAM,CAACC,YAAP,CAAoB,KAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAzB,CAAjB;AACA,WAAOL,UAAU,GAAGM,IAAI,CAACC,GAAL,EAApB;AACH,GAHD;;AAIA,SAAOlC,KAAP;AACH,CAxD0B,EAA3B;;AAyDAF,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Utils = void 0;\r\nvar bignumber_js_1 = require(\"bignumber.js\");\r\nvar Utils = /** @class */ (function () {\r\n    function Utils() {\r\n    }\r\n    /**\r\n     * To precision\r\n     */\r\n    Utils.toPrecision = function (value, significantDigits, significantDigitsForDecimalOnly) {\r\n        if (significantDigits === void 0) { significantDigits = 4; }\r\n        if (significantDigitsForDecimalOnly === void 0) { significantDigitsForDecimalOnly = true; }\r\n        var parsedValue = new bignumber_js_1.BigNumber(value);\r\n        if (significantDigitsForDecimalOnly) {\r\n            var beforeDecimalsCount = parsedValue.toString().split('.')[0].length;\r\n            return parsedValue\r\n                .precision(beforeDecimalsCount + significantDigits, bignumber_js_1.BigNumber.ROUND_DOWN)\r\n                .toFixed();\r\n        }\r\n        else {\r\n            return parsedValue\r\n                .precision(significantDigits, bignumber_js_1.BigNumber.ROUND_DOWN)\r\n                .toFixed();\r\n        }\r\n    };\r\n    /**\r\n     * Format the currency\r\n     * @value The value to format\r\n     */\r\n    Utils.formatCurrency = function (value) {\r\n        return Number(value)\r\n            .toFixed(2)\r\n            .replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n    };\r\n    /**\r\n     * Deep clone a object\r\n     * @param object The object\r\n     */\r\n    Utils.deepClone = function (object) {\r\n        return JSON.parse(JSON.stringify(object));\r\n    };\r\n    /**\r\n     * Check if something is zero\r\n     * @param amount The amount\r\n     */\r\n    Utils.isZero = function (amount) {\r\n        if (!amount || amount === '') {\r\n            return true;\r\n        }\r\n        return new bignumber_js_1.BigNumber(amount).eq(0);\r\n    };\r\n    /**\r\n     * Generate random id\r\n     */\r\n    Utils.randomId = function () {\r\n        var randLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\r\n        return randLetter + Date.now();\r\n    };\r\n    return Utils;\r\n}());\r\nexports.Utils = Utils;\r\n"]},"metadata":{},"sourceType":"script"}