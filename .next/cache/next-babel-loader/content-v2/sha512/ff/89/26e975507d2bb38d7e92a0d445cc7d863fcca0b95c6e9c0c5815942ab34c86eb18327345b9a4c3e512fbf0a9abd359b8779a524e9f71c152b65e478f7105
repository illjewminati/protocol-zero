{"ast":null,"code":"import { StepKind } from \"../types/steps-modal\";\nexport var getStepTitle = function getStepTitle(step) {\n  switch (step.kind) {\n    case StepKind.Allowance:\n      return 'Set Allowance';\n\n    case StepKind.Swap:\n      return 'Send GSN transaction';\n\n    case StepKind.SetMinBalance:\n      return \"Set TokenPaymaster Min Balance\";\n\n    case StepKind.SetPaymentToken:\n      return \"Set Paymaster Payment Token\";\n\n    case StepKind.SetFee:\n      return \"Set Paymaster Fee\";\n\n    case StepKind.Whitelist:\n      return \"Whitelist Token\";\n\n    case StepKind.SetGasUsedByPost:\n      return \"Set Gas Used By Post\";\n\n    case StepKind.SetMinGas:\n      return \"Set Swap Min Gas\";\n\n    case StepKind.SetTarget:\n      return \"Set Target Contract\";\n\n    case StepKind.SetRelayHub:\n      return \"Set Relay Hub Contract\";\n\n    case StepKind.SetForwarder:\n      return \"Set Forwarder Contract\";\n\n    case StepKind.Withdraw:\n      return \"Withdraw From Paymaster\";\n\n    default:\n      var _exhaustiveCheck = step;\n      return _exhaustiveCheck;\n  }\n};\nexport var makeGetProgress = function makeGetProgress(beginning, estimatedTxTimeMs) {\n  return function (now) {\n    var elapsedMs = now - beginning;\n    var progress = Math.round(elapsedMs / estimatedTxTimeMs * 100);\n    return Math.max(0, Math.min(progress, 95));\n  };\n};","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/util/steps.ts"],"names":["StepKind","getStepTitle","step","kind","Allowance","Swap","SetMinBalance","SetPaymentToken","SetFee","Whitelist","SetGasUsedByPost","SetMinGas","SetTarget","SetRelayHub","SetForwarder","Withdraw","_exhaustiveCheck","makeGetProgress","beginning","estimatedTxTimeMs","now","elapsedMs","progress","Math","round","max","min"],"mappings":"AAAA,SAAeA,QAAf,QAA+B,sBAA/B;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAwB;AAChD,UAAQA,IAAI,CAACC,IAAb;AACI,SAAKH,QAAQ,CAACI,SAAd;AACI,aAAO,eAAP;;AACJ,SAAKJ,QAAQ,CAACK,IAAd;AACI,aAAO,sBAAP;;AACJ,SAAKL,QAAQ,CAACM,aAAd;AACI,aAAO,gCAAP;;AACJ,SAAKN,QAAQ,CAACO,eAAd;AACI,aAAO,6BAAP;;AACJ,SAAKP,QAAQ,CAACQ,MAAd;AACI,aAAO,mBAAP;;AACJ,SAAKR,QAAQ,CAACS,SAAd;AACI,aAAO,iBAAP;;AACJ,SAAKT,QAAQ,CAACU,gBAAd;AACI,aAAO,sBAAP;;AACJ,SAAKV,QAAQ,CAACW,SAAd;AACI,aAAO,kBAAP;;AACJ,SAAKX,QAAQ,CAACY,SAAd;AACI,aAAO,qBAAP;;AACJ,SAAKZ,QAAQ,CAACa,WAAd;AACI,aAAO,wBAAP;;AACJ,SAAKb,QAAQ,CAACc,YAAd;AACI,aAAO,wBAAP;;AACJ,SAAKd,QAAQ,CAACe,QAAd;AACI,aAAO,yBAAP;;AACJ;AACI,UAAMC,gBAA0B,GAAGd,IAAnC;AACA,aAAOc,gBAAP;AA3BR;AA6BH,CA9BM;AAgCP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD,EAAoBC,iBAApB;AAAA,SAAkD,UAACC,GAAD,EAAiB;AAC9F,QAAMC,SAAS,GAAGD,GAAG,GAAGF,SAAxB;AAEA,QAAMI,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAYH,SAAS,GAAGF,iBAAb,GAAkC,GAA7C,CAAjB;AAEA,WAAOI,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYF,IAAI,CAACG,GAAL,CAASJ,QAAT,EAAmB,EAAnB,CAAZ,CAAP;AACH,GAN8B;AAAA,CAAxB","sourcesContent":["import { Step, StepKind } from \"../types/steps-modal\";\n\nexport const getStepTitle = (step: Step): string => {\n    switch (step.kind) {\n        case StepKind.Allowance:\n            return 'Set Allowance'\n        case StepKind.Swap:\n            return 'Send GSN transaction'\n        case StepKind.SetMinBalance:\n            return \"Set TokenPaymaster Min Balance\"\n        case StepKind.SetPaymentToken:\n            return \"Set Paymaster Payment Token\"\n        case StepKind.SetFee:\n            return \"Set Paymaster Fee\"\n        case StepKind.Whitelist:\n            return \"Whitelist Token\"\n        case StepKind.SetGasUsedByPost:\n            return \"Set Gas Used By Post\"\n        case StepKind.SetMinGas:\n            return \"Set Swap Min Gas\"\n        case StepKind.SetTarget:\n            return \"Set Target Contract\"\n        case StepKind.SetRelayHub:\n            return \"Set Relay Hub Contract\"\n        case StepKind.SetForwarder:\n            return \"Set Forwarder Contract\"\n        case StepKind.Withdraw:\n            return \"Withdraw From Paymaster\"\n        default:\n            const _exhaustiveCheck: StepKind = step;\n            return _exhaustiveCheck;\n    }\n};\n\nexport const makeGetProgress = (beginning: number, estimatedTxTimeMs: number) => (now: number) => {\n    const elapsedMs = now - beginning;\n\n    const progress = Math.round((elapsedMs / estimatedTxTimeMs) * 100);\n\n    return Math.max(0, Math.min(progress, 95));\n};\n"]},"metadata":{},"sourceType":"module"}