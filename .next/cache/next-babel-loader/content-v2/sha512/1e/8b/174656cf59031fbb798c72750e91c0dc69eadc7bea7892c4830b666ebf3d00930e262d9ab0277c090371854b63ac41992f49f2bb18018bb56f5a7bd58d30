{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { connect } from 'react-redux';\nimport { getEthAccount } from '../../store/blockchain/selectors';\nimport { truncateAddress } from '../../util/number_utils';\nimport { WalletConnectionStatusContainer } from '../account/wallet_connection_status';\nimport { CardBase } from './card_base';\nimport { DropdownTextItem } from './dropdown_text_item';\n\nclass WalletConnectionContent extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"render\", () => {\n      const _this$props = this.props,\n            {\n        ethAccount\n      } = _this$props,\n            restProps = _objectWithoutProperties(_this$props, [\"ethAccount\"]);\n\n      const ethAccountText = ethAccount ? `${truncateAddress(ethAccount)}` : 'Not connected';\n\n      const content = /*#__PURE__*/_jsx(\"div\", {\n        className: \"dropdown-items\",\n        children: /*#__PURE__*/_jsx(CardBase, {\n          children: /*#__PURE__*/_jsx(CopyToClipboard, {\n            text: ethAccount ? ethAccount : '',\n            children: /*#__PURE__*/_jsx(DropdownTextItem, {\n              text: \"Copy Address to Clipboard\"\n            })\n          })\n        })\n      });\n\n      return /*#__PURE__*/_jsx(WalletConnectionStatusContainer, _objectSpread({\n        walletConnectionContent: content,\n        headerText: ethAccountText,\n        ethAccount: ethAccount\n      }, restProps));\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ethAccount: getEthAccount(state)\n  };\n};\n\nconst WalletConnectionContentContainer = connect(mapStateToProps, {})(WalletConnectionContent);\nexport { WalletConnectionContent, WalletConnectionContentContainer };","map":null,"metadata":{},"sourceType":"module"}