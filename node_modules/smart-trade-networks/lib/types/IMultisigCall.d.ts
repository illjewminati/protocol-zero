/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMultisigCallInterface extends ethers.utils.Interface {
  functions: {
    "setResourceActionsContract(address)": FunctionFragment;
    "setERC721(address)": FunctionFragment;
    "approveProduce(uint256)": FunctionFragment;
    "addCompany(address,string,bytes32)": FunctionFragment;
    "removeCompany(address)": FunctionFragment;
    "setMultisigWallet(address)": FunctionFragment;
    "deployGrouping(address,address)": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "replaceOwner(address,address)": FunctionFragment;
    "changeRequirement(uint256)": FunctionFragment;
    "setCompaniesContract(address)": FunctionFragment;
    "setPermission(uint8,address,bool)": FunctionFragment;
    "setPermissions(uint8[],address,bool)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "setMultisigName(string)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setResourceActionsContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setERC721", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveProduce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCompany",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCompany",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultisigWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployGrouping",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompaniesContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [BigNumberish[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultisigName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "setResourceActionsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveProduce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCompany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultisigWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployGrouping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompaniesContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMultisigName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {};
}

export class IMultisigCall extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMultisigCallInterface;

  functions: {
    setResourceActionsContract(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setResourceActionsContract(address)"(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setERC721(
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setERC721(address)"(
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveProduce(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveProduce(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addCompany(
      _company: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addCompany(address,string,bytes32)"(
      _company: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeCompany(
      _company: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultisigWallet(
      multisig: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultisigWallet(address)"(
      multisig: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployGrouping(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployGrouping(address,address)"(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCompaniesContract(
      _companies: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCompaniesContract(address)"(
      _companies: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPermission(
      _action: BigNumberish,
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPermission(uint8,address,bool)"(
      _action: BigNumberish,
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPermissions(
      _permissions: BigNumberish[],
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPermissions(uint8[],address,bool)"(
      _permissions: BigNumberish[],
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultisigName(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultisigName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  setResourceActionsContract(
    _resourceActions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setResourceActionsContract(address)"(
    _resourceActions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setERC721(
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setERC721(address)"(
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveProduce(
    _entry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveProduce(uint256)"(
    _entry: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addCompany(
    _company: string,
    _name: string,
    _ipfsLink: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addCompany(address,string,bytes32)"(
    _company: string,
    _name: string,
    _ipfsLink: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeCompany(
    _company: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeCompany(address)"(
    _company: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultisigWallet(
    multisig: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultisigWallet(address)"(
    multisig: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployGrouping(
    _rgToken: string,
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployGrouping(address,address)"(
    _rgToken: string,
    _erc721: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addOwner(owner: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addOwner(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeOwner(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOwner(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  replaceOwner(
    owner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "replaceOwner(address,address)"(
    owner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeRequirement(
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeRequirement(uint256)"(
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCompaniesContract(
    _companies: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCompaniesContract(address)"(
    _companies: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPermission(
    _action: BigNumberish,
    _company: string,
    _allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPermission(uint8,address,bool)"(
    _action: BigNumberish,
    _company: string,
    _allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPermissions(
    _permissions: BigNumberish[],
    _company: string,
    _allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPermissions(uint8[],address,bool)"(
    _permissions: BigNumberish[],
    _company: string,
    _allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultisigName(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultisigName(string)"(
    _name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    setResourceActionsContract(
      _resourceActions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setResourceActionsContract(address)"(
      _resourceActions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC721(_erc721: string, overrides?: CallOverrides): Promise<void>;

    "setERC721(address)"(
      _erc721: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveProduce(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveProduce(uint256)"(
      _entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addCompany(
      _company: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCompany(address,string,bytes32)"(
      _company: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCompany(_company: string, overrides?: CallOverrides): Promise<void>;

    "removeCompany(address)"(
      _company: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultisigWallet(
      multisig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMultisigWallet(address)"(
      multisig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployGrouping(
      _rgToken: string,
      _erc721: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployGrouping(address,address)"(
      _rgToken: string,
      _erc721: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    "addOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    "removeOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompaniesContract(
      _companies: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCompaniesContract(address)"(
      _companies: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermission(
      _action: BigNumberish,
      _company: string,
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPermission(uint8,address,bool)"(
      _action: BigNumberish,
      _company: string,
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissions(
      _permissions: BigNumberish[],
      _company: string,
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPermissions(uint8[],address,bool)"(
      _permissions: BigNumberish[],
      _company: string,
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMultisigName(_name: string, overrides?: CallOverrides): Promise<void>;

    "setMultisigName(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    setResourceActionsContract(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setResourceActionsContract(address)"(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setERC721(_erc721: string, overrides?: Overrides): Promise<BigNumber>;

    "setERC721(address)"(
      _erc721: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveProduce(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveProduce(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addCompany(
      _company: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addCompany(address,string,bytes32)"(
      _company: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeCompany(_company: string, overrides?: Overrides): Promise<BigNumber>;

    "removeCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultisigWallet(
      multisig: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMultisigWallet(address)"(
      multisig: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployGrouping(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployGrouping(address,address)"(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addOwner(owner: string, overrides?: Overrides): Promise<BigNumber>;

    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeOwner(owner: string, overrides?: Overrides): Promise<BigNumber>;

    "removeOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCompaniesContract(
      _companies: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCompaniesContract(address)"(
      _companies: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPermission(
      _action: BigNumberish,
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPermission(uint8,address,bool)"(
      _action: BigNumberish,
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPermissions(
      _permissions: BigNumberish[],
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPermissions(uint8[],address,bool)"(
      _permissions: BigNumberish[],
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultisigName(_name: string, overrides?: Overrides): Promise<BigNumber>;

    "setMultisigName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setResourceActionsContract(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setResourceActionsContract(address)"(
      _resourceActions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setERC721(
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setERC721(address)"(
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveProduce(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveProduce(uint256)"(
      _entry: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addCompany(
      _company: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addCompany(address,string,bytes32)"(
      _company: string,
      _name: string,
      _ipfsLink: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeCompany(
      _company: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeCompany(address)"(
      _company: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultisigWallet(
      multisig: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultisigWallet(address)"(
      multisig: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployGrouping(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployGrouping(address,address)"(
      _rgToken: string,
      _erc721: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCompaniesContract(
      _companies: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCompaniesContract(address)"(
      _companies: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPermission(
      _action: BigNumberish,
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPermission(uint8,address,bool)"(
      _action: BigNumberish,
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPermissions(
      _permissions: BigNumberish[],
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPermissions(uint8[],address,bool)"(
      _permissions: BigNumberish[],
      _company: string,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultisigName(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultisigName(string)"(
      _name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
