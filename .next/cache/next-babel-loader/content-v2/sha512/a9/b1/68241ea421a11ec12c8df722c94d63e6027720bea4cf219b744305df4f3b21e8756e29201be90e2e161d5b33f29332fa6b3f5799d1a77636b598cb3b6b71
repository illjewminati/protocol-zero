{"ast":null,"code":"import { ethers } from 'ethers';\nimport Web3 from 'web3';\nlet web3Wrapper = null;\nexport const isMetamaskInstalled = () => {\n  const {\n    ethereum,\n    web3\n  } = window;\n  return ethereum || web3;\n}; //0x02c1f487092fe14ae85cc2411b951669518df586\n//0x05db46b2588ebb55b4525b5d6103f41a776f9ec2\n\nexport const enableWeb3 = async callback => {\n  const {\n    ethereum,\n    location\n  } = window;\n\n  try {\n    const provider = new ethers.providers.Web3Provider(ethereum, \"any\"); // Request account access if needed\n\n    await provider.send(\"eth_requestAccounts\", []); // Subscriptions register\n\n    ethereum.on('accountsChanged', async accounts => {\n      // Reload to avoid MetaMask bug: \"MetaMask - RPC Error: Internal JSON-RPC\"\n      callback();\n    });\n    return true;\n  } catch (error) {\n    // The user denied account access\n    return false;\n  }\n};\nexport const initializeWeb3Wrapper = async () => {\n  const {\n    ethereum,\n    web3\n  } = window;\n\n  if (ethereum) {\n    web3Wrapper = new ethers.providers.Web3Provider(ethereum, \"any\");\n  } else if (web3) {\n    web3Wrapper = new ethers.providers.Web3Provider(web3.currentProvider);\n  } else {\n    return null;\n  }\n\n  return web3Wrapper;\n};\nexport const listenNetwork = callback => {\n  const {\n    ethereum,\n    location\n  } = window;\n  ethereum.on('networkChanged', async network => {\n    console.log(\"cbba\");\n    callback();\n  });\n};\nexport const getWeb3Wrapper = async () => {\n  while (!web3Wrapper) {\n    // if web3Wrapper is not set yet, wait and retry\n    await sleep(100);\n  }\n\n  return web3Wrapper;\n};\nexport const getWeb3 = () => {\n  const {\n    ethereum\n  } = window;\n  return ethereum;\n};\n\nconst _getExternalProvider = async url => {\n  const provider = new ethers.providers.JsonRpcProvider(url);\n  await provider.ready;\n  return provider;\n};\n\nexport const getExternalSigner = async (account, url) => {\n  const provider = await _getExternalProvider(url);\n  return new ethers.VoidSigner(account, provider);\n};\nexport const getExternalProvider = url => {\n  return _getExternalProvider(url);\n};\nexport const getWebSocketProvider = url => {\n  return new Web3(new Web3.providers.WebsocketProvider(url));\n};\nexport const getWeb3Provider = url => {\n  return new Web3(new Web3.providers.HttpProvider(url));\n};\n\nconst sleep = timeout => new Promise(resolve => setTimeout(resolve, timeout));","map":null,"metadata":{},"sourceType":"module"}