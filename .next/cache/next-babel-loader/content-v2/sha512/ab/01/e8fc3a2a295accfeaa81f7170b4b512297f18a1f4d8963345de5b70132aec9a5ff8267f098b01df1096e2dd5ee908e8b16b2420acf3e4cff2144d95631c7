{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danildovgal/Desktop/protocol_zero/src/store/redux-config.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { initializeStore } from './index';\nconst isServer = true;\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nconst AppWithReduxStore = App => {\n  var _temp;\n\n  return _temp = class AppWithRedux extends React.Component {\n    static async getInitialProps(appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrCreateStore(); // Provide the store to getInitialProps of pages\n\n      appContext.ctx.reduxStore = reduxStore;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(appContext);\n      }\n\n      return _objectSpread(_objectSpread({}, appProps), {}, {\n        initialReduxState: reduxStore.getState()\n      });\n    }\n\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"reduxStore\", void 0);\n\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(App, _objectSpread(_objectSpread({}, this.props), {}, {\n        reduxStore: this.reduxStore\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this);\n    }\n\n  }, _temp;\n};\n\nexport default AppWithReduxStore;","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/store/redux-config.tsx"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","AppWithReduxStore","App","AppWithRedux","Component","getInitialProps","appContext","reduxStore","ctx","appProps","initialReduxState","getState","constructor","props","render"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,eAAR,QAA8B,SAA9B;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;;AAEA,SAASC,gBAAT,CAA2BC,YAA3B,EAAsD;AACpD;AACA,MAAIH,QAAJ,EAAc;AACZ,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACD,GAJmD,CAMpD;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AACjCG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACD;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACD;;AAMD,MAAMI,iBAAiB,GAAIC,GAAD,IAAsC;AAAA;;AAC9D,iBAAO,MAAMC,YAAN,SAA2BT,KAAK,CAACU,SAAjC,CAAkD;AAIvD,iBAAaC,eAAb,CAA8BC,UAA9B,EAA0C;AACxC;AACA;AACA,YAAMC,UAAe,GAAGT,gBAAgB,EAAxC,CAHwC,CAKxC;;AACAQ,MAAAA,UAAU,CAACE,GAAX,CAAeD,UAAf,GAA4BA,UAA5B;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAKP,GAAD,CAAaG,eAAjB,EAAkC;AAChCI,QAAAA,QAAQ,GAAG,MAAOP,GAAD,CAAaG,eAAb,CAA6BC,UAA7B,CAAjB;AACD;;AAED,6CACKG,QADL;AAEEC,QAAAA,iBAAiB,EAAEH,UAAU,CAACI,QAAX;AAFrB;AAID;;AAEDC,IAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,YAAMA,KAAN;;AADkB;;AAElB,WAAKN,UAAL,GAAkBT,gBAAgB,CAACe,KAAK,CAACH,iBAAP,CAAlC;AACD;;AAEDI,IAAAA,MAAM,GAAI;AACR,0BAAQ,QAAC,GAAD,kCAAS,KAAKD,KAAd;AAAqB,QAAA,UAAU,EAAE,KAAKN;AAAtC;AAAA;AAAA;AAAA;AAAA,cAAR;AACD;;AA9BsD,GAAzD;AAgCD,CAjCD;;AAmCA,eAAeN,iBAAf","sourcesContent":["import React from 'react'\nimport { StoreState } from '../types/store';\nimport {initializeStore} from './index';\n\nconst isServer = typeof window === 'undefined'\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'\n\nfunction getOrCreateStore (initialState?: StoreState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState)\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState)\n  }\n  return window[__NEXT_REDUX_STORE__]\n}\n\nexport type Store = ReturnType<typeof getOrCreateStore>\n\ntype Props = { reduxStore: Store }\n\nconst AppWithReduxStore = (App: React.ComponentClass<Props>) => {\n  return class AppWithRedux extends React.Component<Props> {\n\n    private reduxStore\n\n    static async getInitialProps (appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore: any = getOrCreateStore()\n\n      // Provide the store to getInitialProps of pages\n      appContext.ctx.reduxStore = reduxStore\n\n      let appProps = {}\n      if ((App as any).getInitialProps) {\n        appProps = await (App as any).getInitialProps(appContext)\n      }\n\n      return {\n        ...appProps,\n        initialReduxState: reduxStore.getState() \n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.reduxStore = getOrCreateStore(props.initialReduxState)\n    }\n\n    render () {\n      return (<App {...this.props} reduxStore={this.reduxStore}  />)\n    }\n  }\n}\n\nexport default AppWithReduxStore\n"]},"metadata":{},"sourceType":"module"}