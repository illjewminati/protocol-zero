// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "../../interfaces/ICompany.sol";

contract Company is ICompany, Ownable {

    CompanyData private companyData;

    modifier onlyCompanyOwner {
        require(companyData.owner == msg.sender, "Sender is not company owner");
        _;
    }
 
    /** @dev contract owner is CompaniesFactory */
    constructor(address _companyOwner, string memory _name, bytes32 _ipfsLink) {
        require(_companyOwner != address(0), "Owner cannot be 0");
        companyData = CompanyData({
            name: _name,
            ipfsLink: _ipfsLink,
            createdAt: block.timestamp,
            owner: _companyOwner
        });
        emit NewSignatorie(_companyOwner);
    }

    function changeName(string calldata _name) external virtual override onlyCompanyOwner {
        string memory oldName = companyData.name;
        companyData.name = _name;
        emit ChangeName(oldName, _name);
    }

    function changeIpfsLink(bytes32 _ipfsLink) external virtual override onlyCompanyOwner {
        bytes32 oldIpfsLink = companyData.ipfsLink;
        companyData.ipfsLink = _ipfsLink;
        emit ChangeIpfsLink(oldIpfsLink, _ipfsLink);
    }

    /** Getters */
    function getData() external virtual override view returns (CompanyData memory) {
        return companyData;
    }

    
}