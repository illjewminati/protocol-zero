"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IMultisigCall__factory = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ethers = require("ethers");

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
var IMultisigCall__factory = /*#__PURE__*/function () {
  function IMultisigCall__factory() {
    (0, _classCallCheck2["default"])(this, IMultisigCall__factory);
  }

  (0, _createClass2["default"])(IMultisigCall__factory, null, [{
    key: "connect",
    value: function connect(address, signerOrProvider) {
      return new _ethers.Contract(address, _abi, signerOrProvider);
    }
  }]);
  return IMultisigCall__factory;
}();

exports.IMultisigCall__factory = IMultisigCall__factory;
var _abi = [{
  inputs: [{
    internalType: "address",
    name: "_resourceActions",
    type: "address"
  }],
  name: "setResourceActionsContract",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_erc721",
    type: "address"
  }],
  name: "setERC721",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "_entry",
    type: "uint256"
  }],
  name: "approveProduce",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_company",
    type: "address"
  }, {
    internalType: "string",
    name: "_name",
    type: "string"
  }, {
    internalType: "bytes32",
    name: "_ipfsLink",
    type: "bytes32"
  }],
  name: "addCompany",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_company",
    type: "address"
  }],
  name: "removeCompany",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address payable",
    name: "multisig",
    type: "address"
  }],
  name: "setMultisigWallet",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_rgToken",
    type: "address"
  }, {
    internalType: "address",
    name: "_erc721",
    type: "address"
  }],
  name: "deployGrouping",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "owner",
    type: "address"
  }],
  name: "addOwner",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "owner",
    type: "address"
  }],
  name: "removeOwner",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "owner",
    type: "address"
  }, {
    internalType: "address",
    name: "newOwner",
    type: "address"
  }],
  name: "replaceOwner",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "_required",
    type: "uint256"
  }],
  name: "changeRequirement",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_token",
    type: "address"
  }, {
    internalType: "address",
    name: "_to",
    type: "address"
  }, {
    internalType: "uint256",
    name: "_amount",
    type: "uint256"
  }],
  name: "withdraw",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "_companies",
    type: "address"
  }],
  name: "setCompaniesContract",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "enum IMultisigCall.Actions",
    name: "_action",
    type: "uint8"
  }, {
    internalType: "address",
    name: "_company",
    type: "address"
  }, {
    internalType: "bool",
    name: "_allow",
    type: "bool"
  }],
  name: "setPermission",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "uint8[]",
    name: "_permissions",
    type: "uint8[]"
  }, {
    internalType: "address",
    name: "_company",
    type: "address"
  }, {
    internalType: "bool",
    name: "_allow",
    type: "bool"
  }],
  name: "setPermissions",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "recipient",
    type: "address"
  }, {
    internalType: "uint256",
    name: "amount",
    type: "uint256"
  }],
  name: "transfer",
  outputs: [{
    internalType: "bool",
    name: "",
    type: "bool"
  }],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "string",
    name: "_name",
    type: "string"
  }],
  name: "setMultisigName",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}, {
  inputs: [{
    internalType: "address",
    name: "user",
    type: "address"
  }, {
    internalType: "uint256",
    name: "amount",
    type: "uint256"
  }],
  name: "mint",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,