/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISTN721Interface extends ethers.utils.Interface {
  functions: {
    "attachChild(address,uint256)": FunctionFragment;
    "mint(bool,uint256[],address)": FunctionFragment;
    "getParentAddress()": FunctionFragment;
    "getParentId()": FunctionFragment;
    "isDivisible(uint256)": FunctionFragment;
    "getChildIndexById(uint256)": FunctionFragment;
    "getChildIndexByAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "attachChild",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [boolean, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDivisible",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChildIndexById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChildIndexByAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "attachChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDivisible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChildIndexById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChildIndexByAddress",
    data: BytesLike
  ): Result;

  events: {
    "ChildAttached(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChildAttached"): EventFragment;
}

export class ISTN721 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISTN721Interface;

  functions: {
    attachChild(
      stn721Child: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "attachChild(address,uint256)"(
      stn721Child: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(bool,uint256[],address)"(
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getParentAddress(overrides?: CallOverrides): Promise<[string]>;

    "getParentAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getParentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getParentId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isDivisible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isDivisible(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getChildIndexById(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getChildIndexById(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChildIndexByAddress(
      stn721: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getChildIndexByAddress(address)"(
      stn721: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  attachChild(
    stn721Child: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "attachChild(address,uint256)"(
    stn721Child: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    divisible: boolean,
    tokenIds: BigNumberish[],
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(bool,uint256[],address)"(
    divisible: boolean,
    tokenIds: BigNumberish[],
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getParentAddress(overrides?: CallOverrides): Promise<string>;

  "getParentAddress()"(overrides?: CallOverrides): Promise<string>;

  getParentId(overrides?: CallOverrides): Promise<BigNumber>;

  "getParentId()"(overrides?: CallOverrides): Promise<BigNumber>;

  isDivisible(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDivisible(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getChildIndexById(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getChildIndexById(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getChildIndexByAddress(
    stn721: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getChildIndexByAddress(address)"(
    stn721: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    attachChild(
      stn721Child: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "attachChild(address,uint256)"(
      stn721Child: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(bool,uint256[],address)"(
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getParentAddress(overrides?: CallOverrides): Promise<string>;

    "getParentAddress()"(overrides?: CallOverrides): Promise<string>;

    getParentId(overrides?: CallOverrides): Promise<BigNumber>;

    "getParentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDivisible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDivisible(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getChildIndexById(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getChildIndexById(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChildIndexByAddress(
      stn721: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChildIndexByAddress(address)"(
      stn721: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ChildAttached(stn721Child: string | null, tokenId: null): EventFilter;
  };

  estimateGas: {
    attachChild(
      stn721Child: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "attachChild(address,uint256)"(
      stn721Child: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(bool,uint256[],address)"(
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getParentAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getParentAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getParentId(overrides?: CallOverrides): Promise<BigNumber>;

    "getParentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDivisible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDivisible(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChildIndexById(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChildIndexById(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChildIndexByAddress(
      stn721: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChildIndexByAddress(address)"(
      stn721: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attachChild(
      stn721Child: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "attachChild(address,uint256)"(
      stn721Child: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(bool,uint256[],address)"(
      divisible: boolean,
      tokenIds: BigNumberish[],
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getParentAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getParentAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getParentId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDivisible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDivisible(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChildIndexById(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChildIndexById(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChildIndexByAddress(
      stn721: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChildIndexByAddress(address)"(
      stn721: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
