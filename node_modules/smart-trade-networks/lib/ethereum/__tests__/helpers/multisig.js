"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.confirmLastMultisigTx = exports.helperTestMultisig = exports.helperDeployMultisig = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ = require("../../../");

var helperDeployMultisig = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(signers) {
    var mSigOwner1, mSigOwner2, owners, multisigContract, multisigContractAddress;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return signers[0].getAddress();

          case 2:
            mSigOwner1 = _context.sent;
            _context.next = 5;
            return signers[1].getAddress();

          case 5:
            mSigOwner2 = _context.sent;
            owners = [mSigOwner1, mSigOwner2];
            _context.next = 9;
            return _.MultisigController.deployMultisigContract(signers[0], owners, 1);

          case 9:
            multisigContract = _context.sent;
            multisigContractAddress = multisigContract.address;
            return _context.abrupt("return", [multisigContract, multisigContractAddress]);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function helperDeployMultisig(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.helperDeployMultisig = helperDeployMultisig;

var helperTestMultisig = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(signers, multisigContractAddress) {
    var multisigController, owners, signer0, requirement, isOwner, encodedDataAO, tx, newRequirement, newOwner, encodedDataNR, tx2, newOwners, mSigOwner1, mSigOwner2, mSigOwner3, encodedDataReplaceO, tx4, encodedDataRO, tx3;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            expect(multisigContractAddress.length).toEqual(42);
            multisigController = new _.MultisigController(multisigContractAddress, signers[0]);
            _context2.next = 4;
            return multisigController.getOwners();

          case 4:
            owners = _context2.sent;
            _context2.next = 7;
            return signers[0].getAddress();

          case 7:
            signer0 = _context2.sent;
            expect(owners.length).toEqual(2);
            _context2.next = 11;
            return multisigController.getRequiredSignatures();

          case 11:
            requirement = _context2.sent;
            expect(requirement.toString()).toEqual("1");
            _context2.next = 15;
            return multisigController.isOwner(signer0);

          case 15:
            isOwner = _context2.sent;
            expect(isOwner).toEqual(true);
            encodedDataAO = _.MultisigController.encodeCall("changeRequirement", [2]);
            _context2.next = 20;
            return multisigController.submitTransaction(multisigContractAddress, 0, encodedDataAO, {
              gasLimit: 7500000
            });

          case 20:
            tx = _context2.sent;
            _context2.next = 23;
            return tx.wait();

          case 23:
            _context2.next = 25;
            return multisigController.getRequiredSignatures();

          case 25:
            newRequirement = _context2.sent;
            expect(newRequirement.toString()).toEqual("2");
            _context2.next = 29;
            return signers[3].getAddress();

          case 29:
            newOwner = _context2.sent;
            encodedDataNR = _.MultisigController.encodeCall("addOwner", [newOwner]);
            _context2.next = 33;
            return multisigController.submitTransaction(multisigContractAddress, 0, encodedDataNR, {
              gasLimit: 7500000
            });

          case 33:
            tx2 = _context2.sent;
            _context2.next = 36;
            return tx2.wait();

          case 36:
            _context2.next = 38;
            return confirmLastMultisigTx(multisigContractAddress, signers[1]);

          case 38:
            _context2.next = 40;
            return multisigController.getOwners();

          case 40:
            newOwners = _context2.sent;
            expect(newOwners.length).toEqual(3);
            _context2.next = 44;
            return signers[0].getAddress();

          case 44:
            mSigOwner1 = _context2.sent;
            _context2.next = 47;
            return signers[1].getAddress();

          case 47:
            mSigOwner2 = _context2.sent;
            _context2.next = 50;
            return signers[2].getAddress();

          case 50:
            mSigOwner3 = _context2.sent;
            encodedDataReplaceO = _.MultisigController.encodeCall("replaceOwner", [newOwner, mSigOwner3]);
            _context2.next = 54;
            return multisigController.submitTransaction(multisigContractAddress, 0, encodedDataReplaceO, {
              gasLimit: 7500000
            });

          case 54:
            tx4 = _context2.sent;
            _context2.next = 57;
            return tx4.wait();

          case 57:
            _context2.next = 59;
            return confirmLastMultisigTx(multisigContractAddress, signers[1]);

          case 59:
            _context2.next = 61;
            return multisigController.getOwners();

          case 61:
            newOwners = _context2.sent;
            expect(newOwners.length).toEqual(3);
            expect(newOwners).toEqual(expect.arrayContaining([mSigOwner1, mSigOwner2, mSigOwner3]));
            encodedDataRO = _.MultisigController.encodeCall("removeOwner", [mSigOwner3]);
            _context2.next = 67;
            return multisigController.submitTransaction(multisigContractAddress, 0, encodedDataRO, {
              gasLimit: 7500000
            });

          case 67:
            tx3 = _context2.sent;
            _context2.next = 70;
            return tx3.wait();

          case 70:
            _context2.next = 72;
            return confirmLastMultisigTx(multisigContractAddress, signers[1]);

          case 72:
            _context2.next = 74;
            return multisigController.getOwners();

          case 74:
            newOwners = _context2.sent;
            expect(newOwners.length).toEqual(2);
            expect(newOwners).toEqual(expect.arrayContaining([mSigOwner1, mSigOwner2]));

          case 77:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function helperTestMultisig(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

exports.helperTestMultisig = helperTestMultisig;

var confirmLastMultisigTx = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(multisigContractAddress, signer) {
    var multisigController, txCount, confirmTx;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            multisigController = new _.MultisigController(multisigContractAddress, signer);
            _context3.next = 3;
            return multisigController.getTransactionCount(true, true);

          case 3:
            txCount = _context3.sent;
            console.log("txCount", txCount);
            _context3.next = 7;
            return multisigController.confirmTransaction(parseInt(txCount.toString()) - 1, {
              gasLimit: 7500000
            });

          case 7:
            confirmTx = _context3.sent;
            _context3.next = 10;
            return confirmTx.wait();

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function confirmLastMultisigTx(_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();

exports.confirmLastMultisigTx = confirmLastMultisigTx;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,