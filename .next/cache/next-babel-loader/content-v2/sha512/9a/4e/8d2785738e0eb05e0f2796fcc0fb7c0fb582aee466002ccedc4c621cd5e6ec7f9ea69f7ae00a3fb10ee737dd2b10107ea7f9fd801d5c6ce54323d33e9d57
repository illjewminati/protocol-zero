{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { BigNumber } from 'bignumber.js';\nimport { getAddress, removeEthFromContractAddress, TokenFactoryPublic } from 'simple-uniswap-sdk';\n\nvar TokenService =\n/** @class */\nfunction () {\n  function TokenService(_ethereumProvider, _supportedNetworkTokens) {\n    this._ethereumProvider = _ethereumProvider;\n    this._supportedNetworkTokens = _supportedNetworkTokens;\n    this._tokensCachedImages = [];\n    this._defaultTokenImageSvg = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"sc-1fvnadz-1 eIZpIe\" style=\"color: rgb(136, 141, 155);\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"4.93\" y1=\"4.93\" x2=\"19.07\" y2=\"19.07\"></line></svg>';\n  }\n  /**\r\n   * Get the token image url\r\n   * @param contractAddress The contract address\r\n   * @param chainId The chain id\r\n   */\n\n\n  TokenService.prototype.getTokenImage = function (contractAddress, chainId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedImage, supportedTokensForNetwork, token, image, result, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            contractAddress = getAddress(contractAddress, true);\n            cachedImage = this._tokensCachedImages.find(function (c) {\n              return c.contractAddress === contractAddress && c.chainId === chainId;\n            });\n\n            if (cachedImage) {\n              return [2\n              /*return*/\n              , cachedImage.tokenImageContext];\n            }\n\n            supportedTokensForNetwork = this._supportedNetworkTokens.find(function (tokens) {\n              return tokens.chainId === chainId;\n            });\n\n            if (supportedTokensForNetwork) {\n              token = supportedTokensForNetwork.supportedTokens.find(function (c) {\n                return getAddress(c.contractAddress, true) === contractAddress;\n              });\n\n              if (token === null || token === void 0 ? void 0 : token.tokenImageContext) {\n                this._tokensCachedImages.push({\n                  contractAddress: contractAddress,\n                  chainId: chainId,\n                  tokenImageContext: token.tokenImageContext\n                });\n\n                return [2\n                /*return*/\n                , token.tokenImageContext];\n              }\n            }\n\n            image = \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/\" + removeEthFromContractAddress(contractAddress) + \"/logo.png\";\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , fetch(image)];\n\n          case 2:\n            result = _a.sent();\n\n            if (result.status === 404) {\n              return [2\n              /*return*/\n              , this.getDefaultTokenImageAndCache(contractAddress, chainId)];\n            }\n\n            this._tokensCachedImages.push({\n              contractAddress: contractAddress,\n              chainId: chainId,\n              tokenImageContext: {\n                image: image,\n                isSvg: false\n              }\n            });\n\n            return [2\n            /*return*/\n            , {\n              image: image,\n              isSvg: false\n            }];\n\n          case 3:\n            error_1 = _a.sent();\n            return [2\n            /*return*/\n            , this.getDefaultTokenImageAndCache(contractAddress, chainId)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get token information\r\n   * @param contractAddress The contract address\r\n   * @param ethereumProvider The custom ethereum provider from the dapp (not our interval one)\r\n   */\n\n\n  TokenService.prototype.getTokenInformation = function (contractAddress, ethereumProvider) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenFactoryPublic, token, _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            contractAddress = getAddress(contractAddress, true);\n            tokenFactoryPublic = new TokenFactoryPublic(contractAddress, {\n              ethereumProvider: ethereumProvider\n            });\n            return [4\n            /*yield*/\n            , tokenFactoryPublic.getToken()];\n\n          case 1:\n            token = _c.sent();\n            _a = token;\n            _b = BigNumber.bind;\n            return [4\n            /*yield*/\n            , tokenFactoryPublic.balanceOf(this._ethereumProvider.address)];\n\n          case 2:\n            _a.balance = new (_b.apply(BigNumber, [void 0, _c.sent()]))();\n            return [2\n            /*return*/\n            , token];\n        }\n      });\n    });\n  };\n  /**\r\n   * Build extended token\r\n   * @param token The token\r\n   * @param balance The balance\r\n   */\n\n\n  TokenService.prototype.buildExtendedToken = function (token, balance, // tslint:disable-next-line: ban-types\n  fiatPriceResults) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fiatPrice, _i, _a, _b, key, value;\n\n      var _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            for (_i = 0, _a = Object.entries(fiatPriceResults); _i < _a.length; _i++) {\n              _b = _a[_i], key = _b[0], value = _b[1];\n\n              if (key.toLowerCase() === removeEthFromContractAddress(token.contractAddress.toLowerCase())) {\n                // @ts-ignore\n                // tslint:disable-next-line: no-string-literal\n                fiatPrice = Number(value['usd']);\n                break;\n              }\n            }\n\n            _c = {\n              chainId: token.chainId,\n              contractAddress: token.contractAddress,\n              decimals: token.decimals,\n              symbol: token.symbol,\n              name: token.name,\n              fiatPrice: fiatPrice !== undefined ? new BigNumber(fiatPrice) : undefined,\n              balance: new BigNumber(balance)\n            };\n            return [4\n            /*yield*/\n            , this.getTokenImage(token.contractAddress, token.chainId)];\n\n          case 1:\n            return [2\n            /*return*/\n            , (_c.tokenImageContext = _d.sent(), _c)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Search for tokens\r\n   * @param search The search term\r\n   */\n\n\n  TokenService.prototype.searchToken = function (search, supportedTokenBalances) {\n    var noneCaseSearch = search.toLowerCase();\n\n    for (var i = 0; i < supportedTokenBalances.length; i++) {\n      var token = supportedTokenBalances[i];\n\n      if (search && search !== '' && !token.symbol.toLowerCase().includes(noneCaseSearch) && noneCaseSearch !== token.contractAddress.toLowerCase()) {\n        token.canShow = false;\n      } else {\n        token.canShow = true;\n      }\n    }\n\n    return supportedTokenBalances;\n  };\n  /**\r\n   * Get the default token image and cache it\r\n   * @param contractAddress The contract address\r\n   * @param chainId The chain id\r\n   */\n\n\n  TokenService.prototype.getDefaultTokenImageAndCache = function (contractAddress, chainId) {\n    var tokenImageContext = {\n      image: this._defaultTokenImageSvg,\n      isSvg: true\n    };\n\n    this._tokensCachedImages.push({\n      contractAddress: contractAddress,\n      chainId: chainId,\n      tokenImageContext: tokenImageContext\n    });\n\n    return {\n      image: this._defaultTokenImageSvg,\n      isSvg: true\n    };\n  };\n\n  return TokenService;\n}();\n\nexport { TokenService };","map":null,"metadata":{},"sourceType":"module"}