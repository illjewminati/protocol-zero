{"ast":null,"code":"import { utils } from \"ethers\";\nimport { ERC20Controller } from \"smart-trade-networks\";\nexport const getBalanceOf = async (token, account, signer) => {\n  const erc20Controller = new ERC20Controller(token, signer);\n  return erc20Controller.balanceOf(account);\n};\nexport const getDecimalsOf = async (token, signer) => {\n  const erc20Controller = new ERC20Controller(token, signer);\n  return erc20Controller.getDecimals();\n};\nexport const getNameAndSymbolOf = async (token, signer) => {\n  const erc20Controller = new ERC20Controller(token, signer);\n  const symbol = await erc20Controller.getSymbol();\n  const name = await erc20Controller.getName();\n  return {\n    name,\n    symbol\n  };\n};\nexport const getTokenTotalSupply = async (signer, address, decimals) => {\n  const erc20Controller = new ERC20Controller(address, signer);\n  const totalSupply = await erc20Controller.getTotalSupply();\n  return utils.formatUnits(totalSupply, decimals);\n};\nexport const getBalance = async (signer, address, account, decimals) => {\n  const erc20Controller = new ERC20Controller(address, signer);\n  const balance = await erc20Controller.balanceOf(account);\n  return utils.formatUnits(balance, decimals);\n};\nexport const approveTokens = async (signer, address, to, amount) => {\n  console.log('address', address);\n  const erc20Controller = new ERC20Controller(address, signer);\n  return erc20Controller.approve(to, amount);\n};\nexport const getAllowance = async (signer, address, spender, decimals) => {\n  const erc20Controller = new ERC20Controller(address, signer);\n  const allowance = await erc20Controller.getAllowance(await signer.getAddress(), spender);\n  return utils.formatUnits(allowance, decimals);\n};","map":{"version":3,"sources":["/Users/danildovgal/Desktop/protocol_zero/src/services/erc20_service.ts"],"names":["utils","ERC20Controller","getBalanceOf","token","account","signer","erc20Controller","balanceOf","getDecimalsOf","getDecimals","getNameAndSymbolOf","symbol","getSymbol","name","getName","getTokenTotalSupply","address","decimals","totalSupply","getTotalSupply","formatUnits","getBalance","balance","approveTokens","to","amount","console","log","approve","getAllowance","spender","allowance","getAddress"],"mappings":"AACA,SAAuCA,KAAvC,QAAyE,QAAzE;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,OAAO,MAAMC,YAAY,GAAG,OACxBC,KADwB,EAExBC,OAFwB,EAGxBC,MAHwB,KAIA;AACxB,QAAMC,eAAe,GAAG,IAAIL,eAAJ,CAAoBE,KAApB,EAA2BE,MAA3B,CAAxB;AACA,SAAOC,eAAe,CAACC,SAAhB,CAA0BH,OAA1B,CAAP;AACH,CAPM;AASP,OAAO,MAAMI,aAAa,GAAG,OACzBL,KADyB,EAEzBE,MAFyB,KAGD;AACxB,QAAMC,eAAe,GAAG,IAAIL,eAAJ,CAAoBE,KAApB,EAA2BE,MAA3B,CAAxB;AACA,SAAOC,eAAe,CAACG,WAAhB,EAAP;AACH,CANM;AAQP,OAAO,MAAMC,kBAAkB,GAAG,OAC9BP,KAD8B,EAE9BE,MAF8B,KAGY;AAC1C,QAAMC,eAAe,GAAG,IAAIL,eAAJ,CAAoBE,KAApB,EAA2BE,MAA3B,CAAxB;AACA,QAAMM,MAAM,GAAG,MAAML,eAAe,CAACM,SAAhB,EAArB;AACA,QAAMC,IAAI,GAAG,MAAMP,eAAe,CAACQ,OAAhB,EAAnB;AACA,SAAO;AACHD,IAAAA,IADG;AAEHF,IAAAA;AAFG,GAAP;AAIH,CAXM;AAaP,OAAO,MAAMI,mBAAmB,GAAG,OAAOV,MAAP,EAAuBW,OAAvB,EAAwCC,QAAxC,KAA8E;AAC7G,QAAMX,eAAe,GAAG,IAAIL,eAAJ,CAAoBe,OAApB,EAA6BX,MAA7B,CAAxB;AACA,QAAMa,WAAW,GAAG,MAAMZ,eAAe,CAACa,cAAhB,EAA1B;AACA,SAAOnB,KAAK,CAACoB,WAAN,CAAkBF,WAAlB,EAA+BD,QAA/B,CAAP;AACH,CAJM;AAMP,OAAO,MAAMI,UAAU,GAAG,OAAOhB,MAAP,EAAuBW,OAAvB,EAAwCZ,OAAxC,EAAyDa,QAAzD,KAA+F;AACrH,QAAMX,eAAe,GAAG,IAAIL,eAAJ,CAAoBe,OAApB,EAA6BX,MAA7B,CAAxB;AACA,QAAMiB,OAAO,GAAG,MAAMhB,eAAe,CAACC,SAAhB,CAA0BH,OAA1B,CAAtB;AACA,SAAOJ,KAAK,CAACoB,WAAN,CAAkBE,OAAlB,EAA2BL,QAA3B,CAAP;AACH,CAJM;AAMP,OAAO,MAAMM,aAAa,GAAG,OAAOlB,MAAP,EAAuBW,OAAvB,EAAwCQ,EAAxC,EAAoDC,MAApD,KAAqG;AAC9HC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBX,OAAtB;AACA,QAAMV,eAAe,GAAG,IAAIL,eAAJ,CAAoBe,OAApB,EAA6BX,MAA7B,CAAxB;AACA,SAAOC,eAAe,CAACsB,OAAhB,CAAwBJ,EAAxB,EAA4BC,MAA5B,CAAP;AACH,CAJM;AAMP,OAAO,MAAMI,YAAY,GAAG,OAAOxB,MAAP,EAAuBW,OAAvB,EAAwCc,OAAxC,EAAyDb,QAAzD,KAA+F;AACvH,QAAMX,eAAe,GAAG,IAAIL,eAAJ,CAAoBe,OAApB,EAA6BX,MAA7B,CAAxB;AACA,QAAM0B,SAAS,GAAG,MAAMzB,eAAe,CAACuB,YAAhB,CAA6B,MAAMxB,MAAM,CAAC2B,UAAP,EAAnC,EAAwDF,OAAxD,CAAxB;AACA,SAAO9B,KAAK,CAACoB,WAAN,CAAkBW,SAAlB,EAA6Bd,QAA7B,CAAP;AACH,CAJM","sourcesContent":["\nimport { Signer, ethers, BigNumberish, utils, ContractTransaction } from \"ethers\";\nimport { ERC20Controller } from \"smart-trade-networks\";\n\nexport const getBalanceOf = async (\n    token: string, \n    account: string, \n    signer: Signer | ethers.providers.JsonRpcSigner\n): Promise<BigNumberish> => {\n    const erc20Controller = new ERC20Controller(token, signer);\n    return erc20Controller.balanceOf(account);\n}\n\nexport const getDecimalsOf = async (\n    token: string,\n    signer: Signer | ethers.providers.JsonRpcSigner\n): Promise<BigNumberish> => {\n    const erc20Controller = new ERC20Controller(token, signer);\n    return erc20Controller.getDecimals();\n}\n\nexport const getNameAndSymbolOf = async (\n    token: string,\n    signer: Signer | ethers.providers.JsonRpcSigner\n): Promise<{name: string, symbol: string}> => {\n    const erc20Controller = new ERC20Controller(token, signer);\n    const symbol = await erc20Controller.getSymbol();\n    const name = await erc20Controller.getName();\n    return {\n        name,\n        symbol\n    }\n}\n\nexport const getTokenTotalSupply = async (signer: Signer, address: string, decimals: number): Promise<string> => {\n    const erc20Controller = new ERC20Controller(address, signer);\n    const totalSupply = await erc20Controller.getTotalSupply();\n    return utils.formatUnits(totalSupply, decimals);\n}\n\nexport const getBalance = async (signer: Signer, address: string, account: string, decimals: number): Promise<string> => {\n    const erc20Controller = new ERC20Controller(address, signer);\n    const balance = await erc20Controller.balanceOf(account);\n    return utils.formatUnits(balance, decimals);\n}\n\nexport const approveTokens = async (signer: Signer, address: string, to: string, amount: string): Promise<ContractTransaction> => {\n    console.log('address',address)\n    const erc20Controller = new ERC20Controller(address, signer);\n    return erc20Controller.approve(to, amount);\n}\n\nexport const getAllowance = async (signer: Signer, address: string, spender: string, decimals: number): Promise<string> => {\n    const erc20Controller = new ERC20Controller(address, signer);\n    const allowance = await erc20Controller.getAllowance(await signer.getAddress(), spender)\n    return utils.formatUnits(allowance, decimals);\n}"]},"metadata":{},"sourceType":"module"}