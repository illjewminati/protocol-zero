"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildBytecode = exports.saltToHex = exports.buildCreate2Address = exports.precomputeAddress = void 0;

var _ethers = require("ethers");

var precomputeAddress = function precomputeAddress(creatorAddress, contractBytecode, salt, constructorTypes, constructorArgs) {
  return buildCreate2Address(creatorAddress, saltToHex(salt), buildBytecode(constructorTypes, constructorArgs, contractBytecode));
};

exports.precomputeAddress = precomputeAddress;

var buildCreate2Address = function buildCreate2Address(factoryAddress, saltHex, byteCode) {
  return "0x".concat(_ethers.ethers.utils.keccak256("0x".concat(['ff', factoryAddress, saltHex, _ethers.ethers.utils.keccak256(byteCode)].map(function (x) {
    return x.replace(/0x/, '');
  }).join(''))).slice(-40)).toLowerCase();
};

exports.buildCreate2Address = buildCreate2Address;

var saltToHex = function saltToHex(salt) {
  return _ethers.ethers.utils.id(salt.toString());
};

exports.saltToHex = saltToHex;

var buildBytecode = function buildBytecode(constructorTypes, constructorArgs, contractBytecode) {
  return "".concat(contractBytecode).concat(encodeParams(constructorTypes, constructorArgs).slice(2));
};

exports.buildBytecode = buildBytecode;

var encodeParams = function encodeParams(dataTypes, data) {
  var abiCoder = _ethers.ethers.utils.defaultAbiCoder;
  return abiCoder.encode(dataTypes, data);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ldGhlcmV1bS9fX3Rlc3RzX18vaGVscGVycy9jcmVhdGUyLnRzIl0sIm5hbWVzIjpbInByZWNvbXB1dGVBZGRyZXNzIiwiY3JlYXRvckFkZHJlc3MiLCJjb250cmFjdEJ5dGVjb2RlIiwic2FsdCIsImNvbnN0cnVjdG9yVHlwZXMiLCJjb25zdHJ1Y3RvckFyZ3MiLCJidWlsZENyZWF0ZTJBZGRyZXNzIiwic2FsdFRvSGV4IiwiYnVpbGRCeXRlY29kZSIsImZhY3RvcnlBZGRyZXNzIiwic2FsdEhleCIsImJ5dGVDb2RlIiwiZXRoZXJzIiwidXRpbHMiLCJrZWNjYWsyNTYiLCJtYXAiLCJ4IiwicmVwbGFjZSIsImpvaW4iLCJzbGljZSIsInRvTG93ZXJDYXNlIiwiaWQiLCJ0b1N0cmluZyIsImVuY29kZVBhcmFtcyIsImRhdGFUeXBlcyIsImRhdGEiLCJhYmlDb2RlciIsImRlZmF1bHRBYmlDb2RlciIsImVuY29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVPLElBQU9BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FDOUJDLGNBRDhCLEVBRTlCQyxnQkFGOEIsRUFHOUJDLElBSDhCLEVBSTlCQyxnQkFKOEIsRUFLOUJDLGVBTDhCLEVBTW5CO0FBQ1gsU0FBT0MsbUJBQW1CLENBQ3RCTCxjQURzQixFQUV0Qk0sU0FBUyxDQUFDSixJQUFELENBRmEsRUFHdEJLLGFBQWEsQ0FBQ0osZ0JBQUQsRUFBbUJDLGVBQW5CLEVBQW9DSCxnQkFBcEMsQ0FIUyxDQUExQjtBQUtILENBWk07Ozs7QUFjQSxJQUFNSSxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLENBQUNHLGNBQUQsRUFBeUJDLE9BQXpCLEVBQTBDQyxRQUExQyxFQUErRDtBQUM5RixTQUFPLFlBQUtDLGVBQU9DLEtBQVAsQ0FDVEMsU0FEUyxhQUVILENBQUMsSUFBRCxFQUFPTCxjQUFQLEVBQXVCQyxPQUF2QixFQUFnQ0UsZUFBT0MsS0FBUCxDQUFhQyxTQUFiLENBQXVCSCxRQUF2QixDQUFoQyxFQUNGSSxHQURFLENBQ0UsVUFBQ0MsQ0FBRDtBQUFBLFdBQU9BLENBQUMsQ0FBQ0MsT0FBRixDQUFVLElBQVYsRUFBZ0IsRUFBaEIsQ0FBUDtBQUFBLEdBREYsRUFFRkMsSUFGRSxDQUVHLEVBRkgsQ0FGRyxHQU1UQyxLQU5TLENBTUgsQ0FBQyxFQU5FLENBQUwsRUFNU0MsV0FOVCxFQUFQO0FBT0QsQ0FSSTs7OztBQVVBLElBQU1iLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNKLElBQUQ7QUFBQSxTQUEyQlMsZUFBT0MsS0FBUCxDQUFhUSxFQUFiLENBQWdCbEIsSUFBSSxDQUFDbUIsUUFBTCxFQUFoQixDQUEzQjtBQUFBLENBQWxCOzs7O0FBR0EsSUFBTWQsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUN6QkosZ0JBRHlCLEVBRXpCQyxlQUZ5QixFQUd6QkgsZ0JBSHlCO0FBQUEsbUJBSW5CQSxnQkFKbUIsU0FJQXFCLFlBQVksQ0FBQ25CLGdCQUFELEVBQW1CQyxlQUFuQixDQUFaLENBQWdEYyxLQUFoRCxDQUFzRCxDQUF0RCxDQUpBO0FBQUEsQ0FBdEI7Ozs7QUFNTCxJQUFNSSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFDQyxTQUFELEVBQW1CQyxJQUFuQixFQUFtQztBQUN0RCxNQUFNQyxRQUFRLEdBQUdkLGVBQU9DLEtBQVAsQ0FBYWMsZUFBOUI7QUFDQSxTQUFPRCxRQUFRLENBQUNFLE1BQVQsQ0FBZ0JKLFNBQWhCLEVBQTJCQyxJQUEzQixDQUFQO0FBQ0gsQ0FIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV0aGVycyB9IGZyb20gXCJldGhlcnNcIlxuXG5leHBvcnQgY29uc3QgIHByZWNvbXB1dGVBZGRyZXNzID0gKFxuICAgIGNyZWF0b3JBZGRyZXNzOiBzdHJpbmcsXG4gICAgY29udHJhY3RCeXRlY29kZTogc3RyaW5nLCBcbiAgICBzYWx0OiBzdHJpbmcgfCBudW1iZXIsIFxuICAgIGNvbnN0cnVjdG9yVHlwZXM6IEFycmF5PGFueT4sIFxuICAgIGNvbnN0cnVjdG9yQXJnczogQXJyYXk8YW55PixcbiAgKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gYnVpbGRDcmVhdGUyQWRkcmVzcyhcbiAgICAgICAgY3JlYXRvckFkZHJlc3MsXG4gICAgICAgIHNhbHRUb0hleChzYWx0KSxcbiAgICAgICAgYnVpbGRCeXRlY29kZShjb25zdHJ1Y3RvclR5cGVzLCBjb25zdHJ1Y3RvckFyZ3MsIGNvbnRyYWN0Qnl0ZWNvZGUpLFxuICAgIClcbn1cblxuZXhwb3J0IGNvbnN0IGJ1aWxkQ3JlYXRlMkFkZHJlc3MgPSAoZmFjdG9yeUFkZHJlc3M6IHN0cmluZywgc2FsdEhleDogc3RyaW5nLCBieXRlQ29kZTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGAweCR7ZXRoZXJzLnV0aWxzXG4gICAgICAua2VjY2FrMjU2KFxuICAgICAgICBgMHgke1snZmYnLCBmYWN0b3J5QWRkcmVzcywgc2FsdEhleCwgZXRoZXJzLnV0aWxzLmtlY2NhazI1NihieXRlQ29kZSldXG4gICAgICAgICAgLm1hcCgoeCkgPT4geC5yZXBsYWNlKC8weC8sICcnKSlcbiAgICAgICAgICAuam9pbignJyl9YCxcbiAgICAgIClcbiAgICAgIC5zbGljZSgtNDApfWAudG9Mb3dlckNhc2UoKVxuICB9XG5cbmV4cG9ydCBjb25zdCBzYWx0VG9IZXggPSAoc2FsdDogc3RyaW5nIHwgbnVtYmVyKSA9PiBldGhlcnMudXRpbHMuaWQoc2FsdC50b1N0cmluZygpKVxuXG5cbmV4cG9ydCBjb25zdCBidWlsZEJ5dGVjb2RlID0gKFxuICAgIGNvbnN0cnVjdG9yVHlwZXM6IGFueVtdLFxuICAgIGNvbnN0cnVjdG9yQXJnczogYW55W10sXG4gICAgY29udHJhY3RCeXRlY29kZTogc3RyaW5nLFxuICApID0+IGAke2NvbnRyYWN0Qnl0ZWNvZGV9JHtlbmNvZGVQYXJhbXMoY29uc3RydWN0b3JUeXBlcywgY29uc3RydWN0b3JBcmdzKS5zbGljZSgyLCl9YFxuXG4gIGNvbnN0IGVuY29kZVBhcmFtcyA9IChkYXRhVHlwZXM6IGFueVtdLCBkYXRhOiBhbnlbXSkgPT4ge1xuICAgIGNvbnN0IGFiaUNvZGVyID0gZXRoZXJzLnV0aWxzLmRlZmF1bHRBYmlDb2RlclxuICAgIHJldHVybiBhYmlDb2Rlci5lbmNvZGUoZGF0YVR5cGVzLCBkYXRhKVxufSJdfQ==