{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nexport let DropdownPositions;\n\n(function (DropdownPositions) {\n  DropdownPositions[DropdownPositions[\"Center\"] = 0] = \"Center\";\n  DropdownPositions[DropdownPositions[\"Left\"] = 1] = \"Left\";\n  DropdownPositions[DropdownPositions[\"Right\"] = 2] = \"Right\";\n})(DropdownPositions || (DropdownPositions = {}));\n\nexport class Dropdown extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isOpen: false\n    });\n\n    _defineProperty(this, \"_wrapperRef\", void 0);\n\n    _defineProperty(this, \"render\", () => {\n      const _this$props = this.props,\n            {\n        header,\n        body,\n        horizontalPosition = DropdownPositions.Left,\n        bottom\n      } = _this$props,\n            restProps = _objectWithoutProperties(_this$props, [\"header\", \"body\", \"horizontalPosition\", \"bottom\"]);\n\n      return /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n        className: \"dropdown-wrapper\",\n        ref: this._setWrapperRef\n      }, restProps), {}, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"dropdown-wrapper-header\",\n          onClick: this._toggleDropdown,\n          children: header\n        }), this.state.isOpen ? /*#__PURE__*/_jsx(\"div\", {\n          className: `dropdown-wrapper-body ${bottom ? \"is-bottom\" : \"\"}`,\n          onClick: this._closeDropdownBody,\n          children: body\n        }) : null]\n      }));\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      document.addEventListener('mousedown', this._handleClickOutside);\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      document.removeEventListener('mousedown', this._handleClickOutside);\n    });\n\n    _defineProperty(this, \"closeDropdown\", () => {\n      this.setState({\n        isOpen: false\n      });\n    });\n\n    _defineProperty(this, \"_setWrapperRef\", node => {\n      this._wrapperRef = node;\n    });\n\n    _defineProperty(this, \"_handleClickOutside\", event => {\n      const {\n        close = true\n      } = this.props;\n\n      if (this._wrapperRef && !this._wrapperRef.contains(event.target) && close) {\n        this.closeDropdown();\n      }\n    });\n\n    _defineProperty(this, \"_toggleDropdown\", () => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    });\n\n    _defineProperty(this, \"_closeDropdownBody\", () => {\n      const {\n        shouldCloseDropdownOnClickInside = false\n      } = this.props;\n\n      if (shouldCloseDropdownOnClickInside) {\n        this.closeDropdown();\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}